
PT100_temp_ctrl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800535c  0800535c  0001535c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053d8  080053d8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080053d8  080053d8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080053d8  080053d8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053d8  080053d8  000153d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053dc  080053dc  000153dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080053e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  20000070  08005450  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08005450  000202a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000108a0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e7e  00000000  00000000  00030940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  000327c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc0  00000000  00000000  00033538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b6cd  00000000  00000000  000341f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d02  00000000  00000000  0004f8c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9f39  00000000  00000000  000605c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010a500  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d68  00000000  00000000  0010a554  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005344 	.word	0x08005344

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005344 	.word	0x08005344

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	db0b      	blt.n	8000612 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	f003 021f 	and.w	r2, r3, #31
 8000600:	4907      	ldr	r1, [pc, #28]	; (8000620 <__NVIC_EnableIRQ+0x38>)
 8000602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000606:	095b      	lsrs	r3, r3, #5
 8000608:	2001      	movs	r0, #1
 800060a:	fa00 f202 	lsl.w	r2, r0, r2
 800060e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	e000e100 	.word	0xe000e100

08000624 <ADC_Setup>:

 uint16_t ADC_BUFFER[2] = {};



void ADC_Setup(void){
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0

	// set PA5    and PA6
	//     ADC2/2     ADC2/3
	// ADC2 is on DMA1 CH2

	RCC -> AHBENR |= RCC_AHBENR_ADC12EN | RCC_AHBENR_GPIOAEN;
 8000628:	4b6c      	ldr	r3, [pc, #432]	; (80007dc <ADC_Setup+0x1b8>)
 800062a:	695b      	ldr	r3, [r3, #20]
 800062c:	4a6b      	ldr	r2, [pc, #428]	; (80007dc <ADC_Setup+0x1b8>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000632:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000636:	6153      	str	r3, [r2, #20]
	RCC -> AHBENR |= RCC_AHBENR_DMA1EN;
 8000638:	4b68      	ldr	r3, [pc, #416]	; (80007dc <ADC_Setup+0x1b8>)
 800063a:	695b      	ldr	r3, [r3, #20]
 800063c:	4a67      	ldr	r2, [pc, #412]	; (80007dc <ADC_Setup+0x1b8>)
 800063e:	f043 0301 	orr.w	r3, r3, #1
 8000642:	6153      	str	r3, [r2, #20]
	RCC -> CFGR2  |= RCC_CFGR2_ADCPRE12_DIV128;
 8000644:	4b65      	ldr	r3, [pc, #404]	; (80007dc <ADC_Setup+0x1b8>)
 8000646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000648:	4a64      	ldr	r2, [pc, #400]	; (80007dc <ADC_Setup+0x1b8>)
 800064a:	f443 73d0 	orr.w	r3, r3, #416	; 0x1a0
 800064e:	62d3      	str	r3, [r2, #44]	; 0x2c

	GPIOA -> MODER |= GPIO_MODER_MODER5_0 | GPIO_MODER_MODER5_1;
 8000650:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800065a:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800065e:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER |= GPIO_MODER_MODER6_0 | GPIO_MODER_MODER6_1;
 8000660:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800066a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800066e:	6013      	str	r3, [r2, #0]

//	ADC2 -> CFGR

	// Interrupt settings
	ADC2 -> IER |= ADC_IER_EOSIE;			// Enable end of sequence interrupt
 8000670:	4b5b      	ldr	r3, [pc, #364]	; (80007e0 <ADC_Setup+0x1bc>)
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	4a5a      	ldr	r2, [pc, #360]	; (80007e0 <ADC_Setup+0x1bc>)
 8000676:	f043 0308 	orr.w	r3, r3, #8
 800067a:	6053      	str	r3, [r2, #4]
	NVIC_EnableIRQ(ADC1_2_IRQn);
 800067c:	2012      	movs	r0, #18
 800067e:	f7ff ffb3 	bl	80005e8 <__NVIC_EnableIRQ>

	ADC2 -> CFGR |= ADC_CFGR_DISCNUM_0; 	// 2 Channel to convert
 8000682:	4b57      	ldr	r3, [pc, #348]	; (80007e0 <ADC_Setup+0x1bc>)
 8000684:	68db      	ldr	r3, [r3, #12]
 8000686:	4a56      	ldr	r2, [pc, #344]	; (80007e0 <ADC_Setup+0x1bc>)
 8000688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800068c:	60d3      	str	r3, [r2, #12]
	ADC2 -> CFGR |= ADC_CFGR_DISCEN;		// Enable discontinuous mode
 800068e:	4b54      	ldr	r3, [pc, #336]	; (80007e0 <ADC_Setup+0x1bc>)
 8000690:	68db      	ldr	r3, [r3, #12]
 8000692:	4a53      	ldr	r2, [pc, #332]	; (80007e0 <ADC_Setup+0x1bc>)
 8000694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000698:	60d3      	str	r3, [r2, #12]
	ADC2 -> CFGR &= ~ADC_CFGR_CONT;			// Disable continuous mode
 800069a:	4b51      	ldr	r3, [pc, #324]	; (80007e0 <ADC_Setup+0x1bc>)
 800069c:	68db      	ldr	r3, [r3, #12]
 800069e:	4a50      	ldr	r2, [pc, #320]	; (80007e0 <ADC_Setup+0x1bc>)
 80006a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80006a4:	60d3      	str	r3, [r2, #12]

	ADC2 -> CFGR |= ADC_CFGR_EXTEN_0;
 80006a6:	4b4e      	ldr	r3, [pc, #312]	; (80007e0 <ADC_Setup+0x1bc>)
 80006a8:	68db      	ldr	r3, [r3, #12]
 80006aa:	4a4d      	ldr	r2, [pc, #308]	; (80007e0 <ADC_Setup+0x1bc>)
 80006ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006b0:	60d3      	str	r3, [r2, #12]
	ADC2 -> CFGR &= ~ADC_CFGR_EXTEN_1;
 80006b2:	4b4b      	ldr	r3, [pc, #300]	; (80007e0 <ADC_Setup+0x1bc>)
 80006b4:	68db      	ldr	r3, [r3, #12]
 80006b6:	4a4a      	ldr	r2, [pc, #296]	; (80007e0 <ADC_Setup+0x1bc>)
 80006b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80006bc:	60d3      	str	r3, [r2, #12]

	// Set the external trigger to TIM2 TRGO Event
	ADC2 -> CFGR |= ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL_0;
 80006be:	4b48      	ldr	r3, [pc, #288]	; (80007e0 <ADC_Setup+0x1bc>)
 80006c0:	68db      	ldr	r3, [r3, #12]
 80006c2:	4a47      	ldr	r2, [pc, #284]	; (80007e0 <ADC_Setup+0x1bc>)
 80006c4:	f443 7330 	orr.w	r3, r3, #704	; 0x2c0
 80006c8:	60d3      	str	r3, [r2, #12]

	// Set the external trigger for the SoC

	ADC2 -> CFGR &= ~(ADC_CFGR_RES_0 | ADC_CFGR_RES_1);		// 12 bit resolution
 80006ca:	4b45      	ldr	r3, [pc, #276]	; (80007e0 <ADC_Setup+0x1bc>)
 80006cc:	68db      	ldr	r3, [r3, #12]
 80006ce:	4a44      	ldr	r2, [pc, #272]	; (80007e0 <ADC_Setup+0x1bc>)
 80006d0:	f023 0318 	bic.w	r3, r3, #24
 80006d4:	60d3      	str	r3, [r2, #12]

	ADC2 -> CFGR |= ADC_CFGR_DMACFG | ADC_CFGR_DMAEN;		// Enable DMA conversion and circular mode
 80006d6:	4b42      	ldr	r3, [pc, #264]	; (80007e0 <ADC_Setup+0x1bc>)
 80006d8:	68db      	ldr	r3, [r3, #12]
 80006da:	4a41      	ldr	r2, [pc, #260]	; (80007e0 <ADC_Setup+0x1bc>)
 80006dc:	f043 0303 	orr.w	r3, r3, #3
 80006e0:	60d3      	str	r3, [r2, #12]

	ADC2 -> SMPR1 |= ADC_SMPR1_SMP2_2 | ADC_SMPR1_SMP3_2;
 80006e2:	4b3f      	ldr	r3, [pc, #252]	; (80007e0 <ADC_Setup+0x1bc>)
 80006e4:	695b      	ldr	r3, [r3, #20]
 80006e6:	4a3e      	ldr	r2, [pc, #248]	; (80007e0 <ADC_Setup+0x1bc>)
 80006e8:	f443 6310 	orr.w	r3, r3, #2304	; 0x900
 80006ec:	6153      	str	r3, [r2, #20]
	ADC2 -> SQR1  |= ADC_SQR1_L_0;
 80006ee:	4b3c      	ldr	r3, [pc, #240]	; (80007e0 <ADC_Setup+0x1bc>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a3b      	ldr	r2, [pc, #236]	; (80007e0 <ADC_Setup+0x1bc>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
	ADC2 -> SQR1  |= (2 << 6) | (3 << 12);
 80006fa:	4b39      	ldr	r3, [pc, #228]	; (80007e0 <ADC_Setup+0x1bc>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a38      	ldr	r2, [pc, #224]	; (80007e0 <ADC_Setup+0x1bc>)
 8000700:	f443 5342 	orr.w	r3, r3, #12416	; 0x3080
 8000704:	6313      	str	r3, [r2, #48]	; 0x30

	ADC1_2_COMMON -> CCR &= ~ (ADC12_CCR_CKMODE_1);
 8000706:	4b37      	ldr	r3, [pc, #220]	; (80007e4 <ADC_Setup+0x1c0>)
 8000708:	689b      	ldr	r3, [r3, #8]
 800070a:	4a36      	ldr	r2, [pc, #216]	; (80007e4 <ADC_Setup+0x1c0>)
 800070c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000710:	6093      	str	r3, [r2, #8]
	ADC1_2_COMMON -> CCR |= ADC12_CCR_CKMODE_0;
 8000712:	4b34      	ldr	r3, [pc, #208]	; (80007e4 <ADC_Setup+0x1c0>)
 8000714:	689b      	ldr	r3, [r3, #8]
 8000716:	4a33      	ldr	r2, [pc, #204]	; (80007e4 <ADC_Setup+0x1c0>)
 8000718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800071c:	6093      	str	r3, [r2, #8]


	// DMA SETTINGS

	DMA1_Channel2 -> CCR |= DMA_CCR_PL_1 | DMA_CCR_PL_0;
 800071e:	4b32      	ldr	r3, [pc, #200]	; (80007e8 <ADC_Setup+0x1c4>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a31      	ldr	r2, [pc, #196]	; (80007e8 <ADC_Setup+0x1c4>)
 8000724:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000728:	6013      	str	r3, [r2, #0]
	DMA1_Channel2 -> CCR |= DMA_CCR_MSIZE_0 | DMA_CCR_PSIZE_0;
 800072a:	4b2f      	ldr	r3, [pc, #188]	; (80007e8 <ADC_Setup+0x1c4>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a2e      	ldr	r2, [pc, #184]	; (80007e8 <ADC_Setup+0x1c4>)
 8000730:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8000734:	6013      	str	r3, [r2, #0]
	DMA1_Channel2 -> CCR &= ~(DMA_CCR_MSIZE_1 | DMA_CCR_PSIZE_1);
 8000736:	4b2c      	ldr	r3, [pc, #176]	; (80007e8 <ADC_Setup+0x1c4>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a2b      	ldr	r2, [pc, #172]	; (80007e8 <ADC_Setup+0x1c4>)
 800073c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8000740:	6013      	str	r3, [r2, #0]
	DMA1_Channel2 -> CCR |= DMA_CCR_MINC;
 8000742:	4b29      	ldr	r3, [pc, #164]	; (80007e8 <ADC_Setup+0x1c4>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a28      	ldr	r2, [pc, #160]	; (80007e8 <ADC_Setup+0x1c4>)
 8000748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800074c:	6013      	str	r3, [r2, #0]
	DMA1_Channel2 -> CCR &=  ~(DMA_CCR_PINC);
 800074e:	4b26      	ldr	r3, [pc, #152]	; (80007e8 <ADC_Setup+0x1c4>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a25      	ldr	r2, [pc, #148]	; (80007e8 <ADC_Setup+0x1c4>)
 8000754:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000758:	6013      	str	r3, [r2, #0]
	DMA1_Channel2 -> CCR |= DMA_CCR_CIRC;
 800075a:	4b23      	ldr	r3, [pc, #140]	; (80007e8 <ADC_Setup+0x1c4>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a22      	ldr	r2, [pc, #136]	; (80007e8 <ADC_Setup+0x1c4>)
 8000760:	f043 0320 	orr.w	r3, r3, #32
 8000764:	6013      	str	r3, [r2, #0]
	DMA1_Channel2 -> CCR &= ~DMA_CCR_DIR;
 8000766:	4b20      	ldr	r3, [pc, #128]	; (80007e8 <ADC_Setup+0x1c4>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a1f      	ldr	r2, [pc, #124]	; (80007e8 <ADC_Setup+0x1c4>)
 800076c:	f023 0310 	bic.w	r3, r3, #16
 8000770:	6013      	str	r3, [r2, #0]

	DMA1_Channel2 -> CNDTR = 2;
 8000772:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <ADC_Setup+0x1c4>)
 8000774:	2202      	movs	r2, #2
 8000776:	605a      	str	r2, [r3, #4]

	DMA1_Channel2 -> CMAR = (uint32_t) (ADC_BUFFER);
 8000778:	4b1b      	ldr	r3, [pc, #108]	; (80007e8 <ADC_Setup+0x1c4>)
 800077a:	4a1c      	ldr	r2, [pc, #112]	; (80007ec <ADC_Setup+0x1c8>)
 800077c:	60da      	str	r2, [r3, #12]
	DMA1_Channel2 -> CPAR = (uint32_t) (&(ADC2 -> DR));
 800077e:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <ADC_Setup+0x1c4>)
 8000780:	4a1b      	ldr	r2, [pc, #108]	; (80007f0 <ADC_Setup+0x1cc>)
 8000782:	609a      	str	r2, [r3, #8]

	DMA1_Channel2 -> CCR |= DMA_CCR_EN;
 8000784:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <ADC_Setup+0x1c4>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a17      	ldr	r2, [pc, #92]	; (80007e8 <ADC_Setup+0x1c4>)
 800078a:	f043 0301 	orr.w	r3, r3, #1
 800078e:	6013      	str	r3, [r2, #0]

	//ADC2 -> CR |= ADC_CR_ADVREGEN_1; 		// Disable voltage regulator
	//ADC2 -> CR &= ADC_CR_ADVREGEN_0; 		// Disable voltage regulator


	ADC2 -> CR |= ADC_CR_ADVREGEN_0;
 8000790:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <ADC_Setup+0x1bc>)
 8000792:	689b      	ldr	r3, [r3, #8]
 8000794:	4a12      	ldr	r2, [pc, #72]	; (80007e0 <ADC_Setup+0x1bc>)
 8000796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079a:	6093      	str	r3, [r2, #8]

	HAL_Delay(10);
 800079c:	200a      	movs	r0, #10
 800079e:	f000 fc8d 	bl	80010bc <HAL_Delay>

	ADC2 -> CR &= ~ (ADC_CR_ADCALDIF);
 80007a2:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <ADC_Setup+0x1bc>)
 80007a4:	689b      	ldr	r3, [r3, #8]
 80007a6:	4a0e      	ldr	r2, [pc, #56]	; (80007e0 <ADC_Setup+0x1bc>)
 80007a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80007ac:	6093      	str	r3, [r2, #8]
	ADC2 -> CR |= ADC_CR_ADCAL;
 80007ae:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <ADC_Setup+0x1bc>)
 80007b0:	689b      	ldr	r3, [r3, #8]
 80007b2:	4a0b      	ldr	r2, [pc, #44]	; (80007e0 <ADC_Setup+0x1bc>)
 80007b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007b8:	6093      	str	r3, [r2, #8]
	HAL_Delay(10);
 80007ba:	200a      	movs	r0, #10
 80007bc:	f000 fc7e 	bl	80010bc <HAL_Delay>


	ADC2 -> CR |= ADC_CR_ADEN ; // Enable ADC
 80007c0:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <ADC_Setup+0x1bc>)
 80007c2:	689b      	ldr	r3, [r3, #8]
 80007c4:	4a06      	ldr	r2, [pc, #24]	; (80007e0 <ADC_Setup+0x1bc>)
 80007c6:	f043 0301 	orr.w	r3, r3, #1
 80007ca:	6093      	str	r3, [r2, #8]
	ADC2 -> CR |= ADC_CR_ADSTART;
 80007cc:	4b04      	ldr	r3, [pc, #16]	; (80007e0 <ADC_Setup+0x1bc>)
 80007ce:	689b      	ldr	r3, [r3, #8]
 80007d0:	4a03      	ldr	r2, [pc, #12]	; (80007e0 <ADC_Setup+0x1bc>)
 80007d2:	f043 0304 	orr.w	r3, r3, #4
 80007d6:	6093      	str	r3, [r2, #8]


}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40021000 	.word	0x40021000
 80007e0:	50000100 	.word	0x50000100
 80007e4:	50000300 	.word	0x50000300
 80007e8:	4002001c 	.word	0x4002001c
 80007ec:	2000008c 	.word	0x2000008c
 80007f0:	50000140 	.word	0x50000140

080007f4 <TIM2_settings>:




void TIM2_settings(void){
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0

	// Timer used to trigger Start of Conversion for ADC2

	// PA0 -> TIM2 CH1

	RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 80007f8:	4b19      	ldr	r3, [pc, #100]	; (8000860 <TIM2_settings+0x6c>)
 80007fa:	69db      	ldr	r3, [r3, #28]
 80007fc:	4a18      	ldr	r2, [pc, #96]	; (8000860 <TIM2_settings+0x6c>)
 80007fe:	f043 0301 	orr.w	r3, r3, #1
 8000802:	61d3      	str	r3, [r2, #28]

	// TIM2 -> CR1 |= TIM_CR1_CMS_0;		// triangular carrier
	// TIM2 -> CR1 &= ~TIM_CR1_CMS_1;

	TIM2 -> CR1 &= ~( TIM_CR1_CMS_1 | TIM_CR1_CMS_0);
 8000804:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800080e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000812:	6013      	str	r3, [r2, #0]
	// TIM2 -> CCMR1 &= ~(TIM_CCMR1_OC1M_0 | TIM_CCMR1_OC1M_3);


	//TIM2 -> CCER |= TIM_CCER_CC1E;

	TIM2 -> PSC = 63;
 8000814:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000818:	223f      	movs	r2, #63	; 0x3f
 800081a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2 -> ARR = 10000;
 800081c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000820:	f242 7210 	movw	r2, #10000	; 0x2710
 8000824:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM2 -> CR2 &= ~ (TIM_CR2_MMS_0 | TIM_CR2_MMS_2);
 8000826:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000830:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 8000834:	6053      	str	r3, [r2, #4]
	TIM2 -> CR2 |= TIM_CR2_MMS_1;
 8000836:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000840:	f043 0320 	orr.w	r3, r3, #32
 8000844:	6053      	str	r3, [r2, #4]


	// TIM2 -> DIER |= TIM_DIER_UIE;
	// NVIC_EnableIRQ(TIM2_IRQn);

	TIM2 -> CR1 |= TIM_CR1_CEN;
 8000846:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6013      	str	r3, [r2, #0]



}
 8000856:	bf00      	nop
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	40021000 	.word	0x40021000

08000864 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000868:	f000 fbc2 	bl	8000ff0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800086c:	f000 f836 	bl	80008dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000870:	f000 f9a4 	bl	8000bbc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000874:	f000 f972 	bl	8000b5c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000878:	f000 f888 	bl	800098c <MX_ADC1_Init>
  MX_TIM3_Init();
 800087c:	f000 f8f6 	bl	8000a6c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  ADC_Setup();
 8000880:	f7ff fed0 	bl	8000624 <ADC_Setup>
  TIM2_settings();
 8000884:	f7ff ffb6 	bl	80007f4 <TIM2_settings>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (CNT_debugger > 10) {
 8000888:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <main+0x60>)
 800088a:	881b      	ldrh	r3, [r3, #0]
 800088c:	2b0a      	cmp	r3, #10
 800088e:	d9fb      	bls.n	8000888 <main+0x24>

		  CNT_debugger = 0;
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <main+0x60>)
 8000892:	2200      	movs	r2, #0
 8000894:	801a      	strh	r2, [r3, #0]
		  //sprintf (BUFFER_TX_debug, "ADC READ : %d", pt100_meas);
		  LEN_buffer = sprintf (BUFFER_TX_debug, "ADC READ : %d\n", pt100_meas);
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <main+0x64>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fe4c 	bl	8000538 <__aeabi_f2d>
 80008a0:	4602      	mov	r2, r0
 80008a2:	460b      	mov	r3, r1
 80008a4:	4909      	ldr	r1, [pc, #36]	; (80008cc <main+0x68>)
 80008a6:	480a      	ldr	r0, [pc, #40]	; (80008d0 <main+0x6c>)
 80008a8:	f004 f91e 	bl	8004ae8 <siprintf>
 80008ac:	4603      	mov	r3, r0
 80008ae:	b29a      	uxth	r2, r3
 80008b0:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <main+0x70>)
 80008b2:	801a      	strh	r2, [r3, #0]

		  HAL_UART_Transmit(&huart2, BUFFER_TX_debug, LEN_buffer, 100);
 80008b4:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <main+0x70>)
 80008b6:	881a      	ldrh	r2, [r3, #0]
 80008b8:	2364      	movs	r3, #100	; 0x64
 80008ba:	4905      	ldr	r1, [pc, #20]	; (80008d0 <main+0x6c>)
 80008bc:	4806      	ldr	r0, [pc, #24]	; (80008d8 <main+0x74>)
 80008be:	f003 fd67 	bl	8004390 <HAL_UART_Transmit>
	  if (CNT_debugger > 10) {
 80008c2:	e7e1      	b.n	8000888 <main+0x24>
 80008c4:	20000098 	.word	0x20000098
 80008c8:	20000090 	.word	0x20000090
 80008cc:	0800535c 	.word	0x0800535c
 80008d0:	200001c8 	.word	0x200001c8
 80008d4:	2000009a 	.word	0x2000009a
 80008d8:	20000144 	.word	0x20000144

080008dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b096      	sub	sp, #88	; 0x58
 80008e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008e6:	2228      	movs	r2, #40	; 0x28
 80008e8:	2100      	movs	r1, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f004 f8f4 	bl	8004ad8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	609a      	str	r2, [r3, #8]
 800090a:	60da      	str	r2, [r3, #12]
 800090c:	611a      	str	r2, [r3, #16]
 800090e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000910:	2302      	movs	r3, #2
 8000912:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000914:	2301      	movs	r3, #1
 8000916:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000918:	2310      	movs	r3, #16
 800091a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800091c:	2302      	movs	r3, #2
 800091e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000920:	2300      	movs	r3, #0
 8000922:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000924:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000928:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800092e:	4618      	mov	r0, r3
 8000930:	f001 fbc0 	bl	80020b4 <HAL_RCC_OscConfig>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800093a:	f000 f9bd 	bl	8000cb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800093e:	230f      	movs	r3, #15
 8000940:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000942:	2302      	movs	r3, #2
 8000944:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800094e:	2300      	movs	r3, #0
 8000950:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	2101      	movs	r1, #1
 8000958:	4618      	mov	r0, r3
 800095a:	f002 fab3 	bl	8002ec4 <HAL_RCC_ClockConfig>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000964:	f000 f9a8 	bl	8000cb8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000968:	2380      	movs	r3, #128	; 0x80
 800096a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV8;
 800096c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000970:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	4618      	mov	r0, r3
 8000976:	f002 fcdb 	bl	8003330 <HAL_RCCEx_PeriphCLKConfig>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000980:	f000 f99a 	bl	8000cb8 <Error_Handler>
  }
}
 8000984:	bf00      	nop
 8000986:	3758      	adds	r7, #88	; 0x58
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08a      	sub	sp, #40	; 0x28
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
 80009ac:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80009ae:	4b2e      	ldr	r3, [pc, #184]	; (8000a68 <MX_ADC1_Init+0xdc>)
 80009b0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80009b6:	4b2c      	ldr	r3, [pc, #176]	; (8000a68 <MX_ADC1_Init+0xdc>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009bc:	4b2a      	ldr	r3, [pc, #168]	; (8000a68 <MX_ADC1_Init+0xdc>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009c2:	4b29      	ldr	r3, [pc, #164]	; (8000a68 <MX_ADC1_Init+0xdc>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009c8:	4b27      	ldr	r3, [pc, #156]	; (8000a68 <MX_ADC1_Init+0xdc>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009ce:	4b26      	ldr	r3, [pc, #152]	; (8000a68 <MX_ADC1_Init+0xdc>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009d6:	4b24      	ldr	r3, [pc, #144]	; (8000a68 <MX_ADC1_Init+0xdc>)
 80009d8:	2200      	movs	r2, #0
 80009da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009dc:	4b22      	ldr	r3, [pc, #136]	; (8000a68 <MX_ADC1_Init+0xdc>)
 80009de:	2201      	movs	r2, #1
 80009e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009e2:	4b21      	ldr	r3, [pc, #132]	; (8000a68 <MX_ADC1_Init+0xdc>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80009e8:	4b1f      	ldr	r3, [pc, #124]	; (8000a68 <MX_ADC1_Init+0xdc>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009ee:	4b1e      	ldr	r3, [pc, #120]	; (8000a68 <MX_ADC1_Init+0xdc>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009f6:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <MX_ADC1_Init+0xdc>)
 80009f8:	2204      	movs	r2, #4
 80009fa:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009fc:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <MX_ADC1_Init+0xdc>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000a02:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <MX_ADC1_Init+0xdc>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a08:	4817      	ldr	r0, [pc, #92]	; (8000a68 <MX_ADC1_Init+0xdc>)
 8000a0a:	f000 fb7b 	bl	8001104 <HAL_ADC_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000a14:	f000 f950 	bl	8000cb8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a1c:	f107 031c 	add.w	r3, r7, #28
 8000a20:	4619      	mov	r1, r3
 8000a22:	4811      	ldr	r0, [pc, #68]	; (8000a68 <MX_ADC1_Init+0xdc>)
 8000a24:	f000 ffc2 	bl	80019ac <HAL_ADCEx_MultiModeConfigChannel>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000a2e:	f000 f943 	bl	8000cb8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a32:	2301      	movs	r3, #1
 8000a34:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a36:	2301      	movs	r3, #1
 8000a38:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a42:	2300      	movs	r3, #0
 8000a44:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4806      	ldr	r0, [pc, #24]	; (8000a68 <MX_ADC1_Init+0xdc>)
 8000a50:	f000 fcea 	bl	8001428 <HAL_ADC_ConfigChannel>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000a5a:	f000 f92d 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	3728      	adds	r7, #40	; 0x28
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	200000f4 	.word	0x200000f4

08000a6c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08e      	sub	sp, #56	; 0x38
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]
 8000a9a:	615a      	str	r2, [r3, #20]
 8000a9c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a9e:	4b2d      	ldr	r3, [pc, #180]	; (8000b54 <MX_TIM3_Init+0xe8>)
 8000aa0:	4a2d      	ldr	r2, [pc, #180]	; (8000b58 <MX_TIM3_Init+0xec>)
 8000aa2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000aa4:	4b2b      	ldr	r3, [pc, #172]	; (8000b54 <MX_TIM3_Init+0xe8>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aaa:	4b2a      	ldr	r3, [pc, #168]	; (8000b54 <MX_TIM3_Init+0xe8>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ab0:	4b28      	ldr	r3, [pc, #160]	; (8000b54 <MX_TIM3_Init+0xe8>)
 8000ab2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ab6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab8:	4b26      	ldr	r3, [pc, #152]	; (8000b54 <MX_TIM3_Init+0xe8>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000abe:	4b25      	ldr	r3, [pc, #148]	; (8000b54 <MX_TIM3_Init+0xe8>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ac4:	4823      	ldr	r0, [pc, #140]	; (8000b54 <MX_TIM3_Init+0xe8>)
 8000ac6:	f002 fd59 	bl	800357c <HAL_TIM_Base_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000ad0:	f000 f8f2 	bl	8000cb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ad4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ada:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ade:	4619      	mov	r1, r3
 8000ae0:	481c      	ldr	r0, [pc, #112]	; (8000b54 <MX_TIM3_Init+0xe8>)
 8000ae2:	f002 ff17 	bl	8003914 <HAL_TIM_ConfigClockSource>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000aec:	f000 f8e4 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000af0:	4818      	ldr	r0, [pc, #96]	; (8000b54 <MX_TIM3_Init+0xe8>)
 8000af2:	f002 fd9a 	bl	800362a <HAL_TIM_PWM_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000afc:	f000 f8dc 	bl	8000cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b04:	2300      	movs	r3, #0
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b08:	f107 031c 	add.w	r3, r7, #28
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4811      	ldr	r0, [pc, #68]	; (8000b54 <MX_TIM3_Init+0xe8>)
 8000b10:	f003 fb82 	bl	8004218 <HAL_TIMEx_MasterConfigSynchronization>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000b1a:	f000 f8cd 	bl	8000cb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b1e:	2360      	movs	r3, #96	; 0x60
 8000b20:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b26:	2300      	movs	r3, #0
 8000b28:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b2e:	463b      	mov	r3, r7
 8000b30:	2200      	movs	r2, #0
 8000b32:	4619      	mov	r1, r3
 8000b34:	4807      	ldr	r0, [pc, #28]	; (8000b54 <MX_TIM3_Init+0xe8>)
 8000b36:	f002 fdd9 	bl	80036ec <HAL_TIM_PWM_ConfigChannel>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000b40:	f000 f8ba 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b44:	4803      	ldr	r0, [pc, #12]	; (8000b54 <MX_TIM3_Init+0xe8>)
 8000b46:	f000 f93d 	bl	8000dc4 <HAL_TIM_MspPostInit>

}
 8000b4a:	bf00      	nop
 8000b4c:	3738      	adds	r7, #56	; 0x38
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	200000a8 	.word	0x200000a8
 8000b58:	40000400 	.word	0x40000400

08000b5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b60:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <MX_USART2_UART_Init+0x58>)
 8000b62:	4a15      	ldr	r2, [pc, #84]	; (8000bb8 <MX_USART2_UART_Init+0x5c>)
 8000b64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8000b66:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <MX_USART2_UART_Init+0x58>)
 8000b68:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000b6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6e:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <MX_USART2_UART_Init+0x58>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b74:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <MX_USART2_UART_Init+0x58>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <MX_USART2_UART_Init+0x58>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b80:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <MX_USART2_UART_Init+0x58>)
 8000b82:	220c      	movs	r2, #12
 8000b84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b86:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <MX_USART2_UART_Init+0x58>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b8c:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <MX_USART2_UART_Init+0x58>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b92:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <MX_USART2_UART_Init+0x58>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <MX_USART2_UART_Init+0x58>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b9e:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <MX_USART2_UART_Init+0x58>)
 8000ba0:	f003 fba8 	bl	80042f4 <HAL_UART_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000baa:	f000 f885 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000144 	.word	0x20000144
 8000bb8:	40004400 	.word	0x40004400

08000bbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bc2:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <MX_GPIO_Init+0x44>)
 8000bc4:	695b      	ldr	r3, [r3, #20]
 8000bc6:	4a0e      	ldr	r2, [pc, #56]	; (8000c00 <MX_GPIO_Init+0x44>)
 8000bc8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bcc:	6153      	str	r3, [r2, #20]
 8000bce:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <MX_GPIO_Init+0x44>)
 8000bd0:	695b      	ldr	r3, [r3, #20]
 8000bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <MX_GPIO_Init+0x44>)
 8000bdc:	695b      	ldr	r3, [r3, #20]
 8000bde:	4a08      	ldr	r2, [pc, #32]	; (8000c00 <MX_GPIO_Init+0x44>)
 8000be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be4:	6153      	str	r3, [r2, #20]
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <MX_GPIO_Init+0x44>)
 8000be8:	695b      	ldr	r3, [r3, #20]
 8000bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bee:	603b      	str	r3, [r7, #0]
 8000bf0:	683b      	ldr	r3, [r7, #0]

}
 8000bf2:	bf00      	nop
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	40021000 	.word	0x40021000

08000c04 <ADC1_2_IRQHandler>:

/* USER CODE BEGIN 4 */

void ADC1_2_IRQHandler(void){
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0

	// Clear interrupt flag
	ADC2 -> ISR |= ADC_ISR_EOS;
 8000c08:	4b20      	ldr	r3, [pc, #128]	; (8000c8c <ADC1_2_IRQHandler+0x88>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a1f      	ldr	r2, [pc, #124]	; (8000c8c <ADC1_2_IRQHandler+0x88>)
 8000c0e:	f043 0308 	orr.w	r3, r3, #8
 8000c12:	6013      	str	r3, [r2, #0]

	pt100_mvolt = ADC_BUFFER[0]*(3300.f)/(4095.f);	// [mV]
 8000c14:	4b1e      	ldr	r3, [pc, #120]	; (8000c90 <ADC1_2_IRQHandler+0x8c>)
 8000c16:	881b      	ldrh	r3, [r3, #0]
 8000c18:	ee07 3a90 	vmov	s15, r3
 8000c1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c20:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000c94 <ADC1_2_IRQHandler+0x90>
 8000c24:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c28:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000c98 <ADC1_2_IRQHandler+0x94>
 8000c2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c30:	4b1a      	ldr	r3, [pc, #104]	; (8000c9c <ADC1_2_IRQHandler+0x98>)
 8000c32:	edc3 7a00 	vstr	s15, [r3]
	pt100_meas = (pt100_mvolt -2320.0f)*100.0f /(3060.0f-2320.0f); // °C
 8000c36:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <ADC1_2_IRQHandler+0x98>)
 8000c38:	edd3 7a00 	vldr	s15, [r3]
 8000c3c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000ca0 <ADC1_2_IRQHandler+0x9c>
 8000c40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000c44:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8000ca4 <ADC1_2_IRQHandler+0xa0>
 8000c48:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c4c:	eddf 6a16 	vldr	s13, [pc, #88]	; 8000ca8 <ADC1_2_IRQHandler+0xa4>
 8000c50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c54:	4b15      	ldr	r3, [pc, #84]	; (8000cac <ADC1_2_IRQHandler+0xa8>)
 8000c56:	edc3 7a00 	vstr	s15, [r3]

	if (pt100_mvolt<2300.f){
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <ADC1_2_IRQHandler+0x98>)
 8000c5c:	edd3 7a00 	vldr	s15, [r3]
 8000c60:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000cb0 <ADC1_2_IRQHandler+0xac>
 8000c64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c6c:	d503      	bpl.n	8000c76 <ADC1_2_IRQHandler+0x72>
		pt100_meas = 0.f;
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <ADC1_2_IRQHandler+0xa8>)
 8000c70:	f04f 0200 	mov.w	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
	}
//	if (pt100_mvolt>3060.f){
//		pt100_meas = 100.f;
//	}

	CNT_debugger++;
 8000c76:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <ADC1_2_IRQHandler+0xb0>)
 8000c78:	881b      	ldrh	r3, [r3, #0]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	b29a      	uxth	r2, r3
 8000c7e:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <ADC1_2_IRQHandler+0xb0>)
 8000c80:	801a      	strh	r2, [r3, #0]

}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	50000100 	.word	0x50000100
 8000c90:	2000008c 	.word	0x2000008c
 8000c94:	454e4000 	.word	0x454e4000
 8000c98:	457ff000 	.word	0x457ff000
 8000c9c:	20000094 	.word	0x20000094
 8000ca0:	45110000 	.word	0x45110000
 8000ca4:	42c80000 	.word	0x42c80000
 8000ca8:	44390000 	.word	0x44390000
 8000cac:	20000090 	.word	0x20000090
 8000cb0:	450fc000 	.word	0x450fc000
 8000cb4:	20000098 	.word	0x20000098

08000cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cbc:	b672      	cpsid	i
}
 8000cbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <Error_Handler+0x8>
	...

08000cc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cca:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <HAL_MspInit+0x44>)
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	4a0e      	ldr	r2, [pc, #56]	; (8000d08 <HAL_MspInit+0x44>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	6193      	str	r3, [r2, #24]
 8000cd6:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <HAL_MspInit+0x44>)
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <HAL_MspInit+0x44>)
 8000ce4:	69db      	ldr	r3, [r3, #28]
 8000ce6:	4a08      	ldr	r2, [pc, #32]	; (8000d08 <HAL_MspInit+0x44>)
 8000ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cec:	61d3      	str	r3, [r2, #28]
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <HAL_MspInit+0x44>)
 8000cf0:	69db      	ldr	r3, [r3, #28]
 8000cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf6:	603b      	str	r3, [r7, #0]
 8000cf8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	40021000 	.word	0x40021000

08000d0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08a      	sub	sp, #40	; 0x28
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d2c:	d124      	bne.n	8000d78 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d2e:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <HAL_ADC_MspInit+0x74>)
 8000d30:	695b      	ldr	r3, [r3, #20]
 8000d32:	4a13      	ldr	r2, [pc, #76]	; (8000d80 <HAL_ADC_MspInit+0x74>)
 8000d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d38:	6153      	str	r3, [r2, #20]
 8000d3a:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <HAL_ADC_MspInit+0x74>)
 8000d3c:	695b      	ldr	r3, [r3, #20]
 8000d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <HAL_ADC_MspInit+0x74>)
 8000d48:	695b      	ldr	r3, [r3, #20]
 8000d4a:	4a0d      	ldr	r2, [pc, #52]	; (8000d80 <HAL_ADC_MspInit+0x74>)
 8000d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d50:	6153      	str	r3, [r2, #20]
 8000d52:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <HAL_ADC_MspInit+0x74>)
 8000d54:	695b      	ldr	r3, [r3, #20]
 8000d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d62:	2303      	movs	r3, #3
 8000d64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4619      	mov	r1, r3
 8000d70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d74:	f001 f82c 	bl	8001dd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d78:	bf00      	nop
 8000d7a:	3728      	adds	r7, #40	; 0x28
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40021000 	.word	0x40021000

08000d84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <HAL_TIM_Base_MspInit+0x38>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d10b      	bne.n	8000dae <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d96:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <HAL_TIM_Base_MspInit+0x3c>)
 8000d98:	69db      	ldr	r3, [r3, #28]
 8000d9a:	4a09      	ldr	r2, [pc, #36]	; (8000dc0 <HAL_TIM_Base_MspInit+0x3c>)
 8000d9c:	f043 0302 	orr.w	r3, r3, #2
 8000da0:	61d3      	str	r3, [r2, #28]
 8000da2:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <HAL_TIM_Base_MspInit+0x3c>)
 8000da4:	69db      	ldr	r3, [r3, #28]
 8000da6:	f003 0302 	and.w	r3, r3, #2
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000dae:	bf00      	nop
 8000db0:	3714      	adds	r7, #20
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	40000400 	.word	0x40000400
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b088      	sub	sp, #32
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 030c 	add.w	r3, r7, #12
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a11      	ldr	r2, [pc, #68]	; (8000e28 <HAL_TIM_MspPostInit+0x64>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d11c      	bne.n	8000e20 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de6:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <HAL_TIM_MspPostInit+0x68>)
 8000de8:	695b      	ldr	r3, [r3, #20]
 8000dea:	4a10      	ldr	r2, [pc, #64]	; (8000e2c <HAL_TIM_MspPostInit+0x68>)
 8000dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df0:	6153      	str	r3, [r2, #20]
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <HAL_TIM_MspPostInit+0x68>)
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dfe:	2340      	movs	r3, #64	; 0x40
 8000e00:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e12:	f107 030c 	add.w	r3, r7, #12
 8000e16:	4619      	mov	r1, r3
 8000e18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e1c:	f000 ffd8 	bl	8001dd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000e20:	bf00      	nop
 8000e22:	3720      	adds	r7, #32
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40000400 	.word	0x40000400
 8000e2c:	40021000 	.word	0x40021000

08000e30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	; 0x28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a18      	ldr	r2, [pc, #96]	; (8000eb0 <HAL_UART_MspInit+0x80>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d129      	bne.n	8000ea6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e52:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <HAL_UART_MspInit+0x84>)
 8000e54:	69db      	ldr	r3, [r3, #28]
 8000e56:	4a17      	ldr	r2, [pc, #92]	; (8000eb4 <HAL_UART_MspInit+0x84>)
 8000e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e5c:	61d3      	str	r3, [r2, #28]
 8000e5e:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <HAL_UART_MspInit+0x84>)
 8000e60:	69db      	ldr	r3, [r3, #28]
 8000e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6a:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <HAL_UART_MspInit+0x84>)
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	4a11      	ldr	r2, [pc, #68]	; (8000eb4 <HAL_UART_MspInit+0x84>)
 8000e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e74:	6153      	str	r3, [r2, #20]
 8000e76:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <HAL_UART_MspInit+0x84>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000e82:	f248 0304 	movw	r3, #32772	; 0x8004
 8000e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e90:	2303      	movs	r3, #3
 8000e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e94:	2307      	movs	r3, #7
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea2:	f000 ff95 	bl	8001dd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ea6:	bf00      	nop
 8000ea8:	3728      	adds	r7, #40	; 0x28
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40004400 	.word	0x40004400
 8000eb4:	40021000 	.word	0x40021000

08000eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <NMI_Handler+0x4>

08000ebe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec2:	e7fe      	b.n	8000ec2 <HardFault_Handler+0x4>

08000ec4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <MemManage_Handler+0x4>

08000eca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ece:	e7fe      	b.n	8000ece <BusFault_Handler+0x4>

08000ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <UsageFault_Handler+0x4>

08000ed6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f04:	f000 f8ba 	bl	800107c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f14:	4a14      	ldr	r2, [pc, #80]	; (8000f68 <_sbrk+0x5c>)
 8000f16:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <_sbrk+0x60>)
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f20:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <_sbrk+0x64>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d102      	bne.n	8000f2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f28:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <_sbrk+0x64>)
 8000f2a:	4a12      	ldr	r2, [pc, #72]	; (8000f74 <_sbrk+0x68>)
 8000f2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f2e:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <_sbrk+0x64>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4413      	add	r3, r2
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d207      	bcs.n	8000f4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f3c:	f003 fda2 	bl	8004a84 <__errno>
 8000f40:	4603      	mov	r3, r0
 8000f42:	220c      	movs	r2, #12
 8000f44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f46:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4a:	e009      	b.n	8000f60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f4c:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <_sbrk+0x64>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f52:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <_sbrk+0x64>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4413      	add	r3, r2
 8000f5a:	4a05      	ldr	r2, [pc, #20]	; (8000f70 <_sbrk+0x64>)
 8000f5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3718      	adds	r7, #24
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20003000 	.word	0x20003000
 8000f6c:	00000400 	.word	0x00000400
 8000f70:	2000009c 	.word	0x2000009c
 8000f74:	200002a8 	.word	0x200002a8

08000f78 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <SystemInit+0x20>)
 8000f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f82:	4a05      	ldr	r2, [pc, #20]	; (8000f98 <SystemInit+0x20>)
 8000f84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fd4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fa0:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fa2:	490e      	ldr	r1, [pc, #56]	; (8000fdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fa4:	4a0e      	ldr	r2, [pc, #56]	; (8000fe0 <LoopForever+0xe>)
  movs r3, #0
 8000fa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa8:	e002      	b.n	8000fb0 <LoopCopyDataInit>

08000faa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000faa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fae:	3304      	adds	r3, #4

08000fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb4:	d3f9      	bcc.n	8000faa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fb6:	4a0b      	ldr	r2, [pc, #44]	; (8000fe4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fb8:	4c0b      	ldr	r4, [pc, #44]	; (8000fe8 <LoopForever+0x16>)
  movs r3, #0
 8000fba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fbc:	e001      	b.n	8000fc2 <LoopFillZerobss>

08000fbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc0:	3204      	adds	r2, #4

08000fc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc4:	d3fb      	bcc.n	8000fbe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fc6:	f7ff ffd7 	bl	8000f78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fca:	f003 fd61 	bl	8004a90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fce:	f7ff fc49 	bl	8000864 <main>

08000fd2 <LoopForever>:

LoopForever:
    b LoopForever
 8000fd2:	e7fe      	b.n	8000fd2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fd4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000fd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fdc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000fe0:	080053e0 	.word	0x080053e0
  ldr r2, =_sbss
 8000fe4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000fe8:	200002a4 	.word	0x200002a4

08000fec <CAN_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fec:	e7fe      	b.n	8000fec <CAN_RX0_IRQHandler>
	...

08000ff0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff4:	4b08      	ldr	r3, [pc, #32]	; (8001018 <HAL_Init+0x28>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a07      	ldr	r2, [pc, #28]	; (8001018 <HAL_Init+0x28>)
 8000ffa:	f043 0310 	orr.w	r3, r3, #16
 8000ffe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001000:	2003      	movs	r0, #3
 8001002:	f000 feb1 	bl	8001d68 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001006:	2000      	movs	r0, #0
 8001008:	f000 f808 	bl	800101c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800100c:	f7ff fe5a 	bl	8000cc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40022000 	.word	0x40022000

0800101c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001024:	4b12      	ldr	r3, [pc, #72]	; (8001070 <HAL_InitTick+0x54>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <HAL_InitTick+0x58>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	4619      	mov	r1, r3
 800102e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001032:	fbb3 f3f1 	udiv	r3, r3, r1
 8001036:	fbb2 f3f3 	udiv	r3, r2, r3
 800103a:	4618      	mov	r0, r3
 800103c:	f000 febb 	bl	8001db6 <HAL_SYSTICK_Config>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e00e      	b.n	8001068 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b0f      	cmp	r3, #15
 800104e:	d80a      	bhi.n	8001066 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001050:	2200      	movs	r2, #0
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	f04f 30ff 	mov.w	r0, #4294967295
 8001058:	f000 fe91 	bl	8001d7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800105c:	4a06      	ldr	r2, [pc, #24]	; (8001078 <HAL_InitTick+0x5c>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	e000      	b.n	8001068 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
}
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000000 	.word	0x20000000
 8001074:	20000008 	.word	0x20000008
 8001078:	20000004 	.word	0x20000004

0800107c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <HAL_IncTick+0x20>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	461a      	mov	r2, r3
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <HAL_IncTick+0x24>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4413      	add	r3, r2
 800108c:	4a04      	ldr	r2, [pc, #16]	; (80010a0 <HAL_IncTick+0x24>)
 800108e:	6013      	str	r3, [r2, #0]
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	20000008 	.word	0x20000008
 80010a0:	20000290 	.word	0x20000290

080010a4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return uwTick;  
 80010a8:	4b03      	ldr	r3, [pc, #12]	; (80010b8 <HAL_GetTick+0x14>)
 80010aa:	681b      	ldr	r3, [r3, #0]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	20000290 	.word	0x20000290

080010bc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c4:	f7ff ffee 	bl	80010a4 <HAL_GetTick>
 80010c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d4:	d005      	beq.n	80010e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010d6:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <HAL_Delay+0x44>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	461a      	mov	r2, r3
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4413      	add	r3, r2
 80010e0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80010e2:	bf00      	nop
 80010e4:	f7ff ffde 	bl	80010a4 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d8f7      	bhi.n	80010e4 <HAL_Delay+0x28>
  {
  }
}
 80010f4:	bf00      	nop
 80010f6:	bf00      	nop
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000008 	.word	0x20000008

08001104 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b09a      	sub	sp, #104	; 0x68
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800110c:	2300      	movs	r3, #0
 800110e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001112:	2300      	movs	r3, #0
 8001114:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001116:	2300      	movs	r3, #0
 8001118:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d101      	bne.n	8001124 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	e172      	b.n	800140a <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	691b      	ldr	r3, [r3, #16]
 8001128:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	f003 0310 	and.w	r3, r3, #16
 8001132:	2b00      	cmp	r3, #0
 8001134:	d176      	bne.n	8001224 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	2b00      	cmp	r3, #0
 800113c:	d152      	bne.n	80011e4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff fdd7 	bl	8000d0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d13b      	bne.n	80011e4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f000 fce3 	bl	8001b38 <ADC_Disable>
 8001172:	4603      	mov	r3, r0
 8001174:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117c:	f003 0310 	and.w	r3, r3, #16
 8001180:	2b00      	cmp	r3, #0
 8001182:	d12f      	bne.n	80011e4 <HAL_ADC_Init+0xe0>
 8001184:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001188:	2b00      	cmp	r3, #0
 800118a:	d12b      	bne.n	80011e4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001190:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001194:	f023 0302 	bic.w	r3, r3, #2
 8001198:	f043 0202 	orr.w	r2, r3, #2
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	689a      	ldr	r2, [r3, #8]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80011ae:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	689a      	ldr	r2, [r3, #8]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011be:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011c0:	4b94      	ldr	r3, [pc, #592]	; (8001414 <HAL_ADC_Init+0x310>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a94      	ldr	r2, [pc, #592]	; (8001418 <HAL_ADC_Init+0x314>)
 80011c6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ca:	0c9a      	lsrs	r2, r3, #18
 80011cc:	4613      	mov	r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	4413      	add	r3, r2
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011d6:	e002      	b.n	80011de <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	3b01      	subs	r3, #1
 80011dc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1f9      	bne.n	80011d8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d007      	beq.n	8001202 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80011fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001200:	d110      	bne.n	8001224 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	f023 0312 	bic.w	r3, r3, #18
 800120a:	f043 0210 	orr.w	r2, r3, #16
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	f043 0201 	orr.w	r2, r3, #1
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001228:	f003 0310 	and.w	r3, r3, #16
 800122c:	2b00      	cmp	r3, #0
 800122e:	f040 80df 	bne.w	80013f0 <HAL_ADC_Init+0x2ec>
 8001232:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001236:	2b00      	cmp	r3, #0
 8001238:	f040 80da 	bne.w	80013f0 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001246:	2b00      	cmp	r3, #0
 8001248:	f040 80d2 	bne.w	80013f0 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001250:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001254:	f043 0202 	orr.w	r2, r3, #2
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800125c:	4b6f      	ldr	r3, [pc, #444]	; (800141c <HAL_ADC_Init+0x318>)
 800125e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001268:	d102      	bne.n	8001270 <HAL_ADC_Init+0x16c>
 800126a:	4b6d      	ldr	r3, [pc, #436]	; (8001420 <HAL_ADC_Init+0x31c>)
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	e002      	b.n	8001276 <HAL_ADC_Init+0x172>
 8001270:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001274:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f003 0303 	and.w	r3, r3, #3
 8001280:	2b01      	cmp	r3, #1
 8001282:	d108      	bne.n	8001296 <HAL_ADC_Init+0x192>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	2b01      	cmp	r3, #1
 8001290:	d101      	bne.n	8001296 <HAL_ADC_Init+0x192>
 8001292:	2301      	movs	r3, #1
 8001294:	e000      	b.n	8001298 <HAL_ADC_Init+0x194>
 8001296:	2300      	movs	r3, #0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d11c      	bne.n	80012d6 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800129c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d010      	beq.n	80012c4 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f003 0303 	and.w	r3, r3, #3
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d107      	bne.n	80012be <HAL_ADC_Init+0x1ba>
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d101      	bne.n	80012be <HAL_ADC_Init+0x1ba>
 80012ba:	2301      	movs	r3, #1
 80012bc:	e000      	b.n	80012c0 <HAL_ADC_Init+0x1bc>
 80012be:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d108      	bne.n	80012d6 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80012c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	431a      	orrs	r2, r3
 80012d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012d4:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	7e5b      	ldrb	r3, [r3, #25]
 80012da:	035b      	lsls	r3, r3, #13
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80012e0:	2a01      	cmp	r2, #1
 80012e2:	d002      	beq.n	80012ea <HAL_ADC_Init+0x1e6>
 80012e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012e8:	e000      	b.n	80012ec <HAL_ADC_Init+0x1e8>
 80012ea:	2200      	movs	r2, #0
 80012ec:	431a      	orrs	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	431a      	orrs	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012fc:	4313      	orrs	r3, r2
 80012fe:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d11b      	bne.n	8001342 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	7e5b      	ldrb	r3, [r3, #25]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d109      	bne.n	8001326 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001316:	3b01      	subs	r3, #1
 8001318:	045a      	lsls	r2, r3, #17
 800131a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800131c:	4313      	orrs	r3, r2
 800131e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001322:	663b      	str	r3, [r7, #96]	; 0x60
 8001324:	e00d      	b.n	8001342 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800132e:	f043 0220 	orr.w	r2, r3, #32
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	f043 0201 	orr.w	r2, r3, #1
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001346:	2b01      	cmp	r3, #1
 8001348:	d007      	beq.n	800135a <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001352:	4313      	orrs	r3, r2
 8001354:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001356:	4313      	orrs	r3, r2
 8001358:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f003 030c 	and.w	r3, r3, #12
 8001364:	2b00      	cmp	r3, #0
 8001366:	d114      	bne.n	8001392 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	6812      	ldr	r2, [r2, #0]
 8001372:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001376:	f023 0302 	bic.w	r3, r3, #2
 800137a:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	7e1b      	ldrb	r3, [r3, #24]
 8001380:	039a      	lsls	r2, r3, #14
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	4313      	orrs	r3, r2
 800138c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800138e:	4313      	orrs	r3, r2
 8001390:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	68da      	ldr	r2, [r3, #12]
 8001398:	4b22      	ldr	r3, [pc, #136]	; (8001424 <HAL_ADC_Init+0x320>)
 800139a:	4013      	ands	r3, r2
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	6812      	ldr	r2, [r2, #0]
 80013a0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80013a2:	430b      	orrs	r3, r1
 80013a4:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d10c      	bne.n	80013c8 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b4:	f023 010f 	bic.w	r1, r3, #15
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	69db      	ldr	r3, [r3, #28]
 80013bc:	1e5a      	subs	r2, r3, #1
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	430a      	orrs	r2, r1
 80013c4:	631a      	str	r2, [r3, #48]	; 0x30
 80013c6:	e007      	b.n	80013d8 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f022 020f 	bic.w	r2, r2, #15
 80013d6:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	f023 0303 	bic.w	r3, r3, #3
 80013e6:	f043 0201 	orr.w	r2, r3, #1
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	641a      	str	r2, [r3, #64]	; 0x40
 80013ee:	e00a      	b.n	8001406 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	f023 0312 	bic.w	r3, r3, #18
 80013f8:	f043 0210 	orr.w	r2, r3, #16
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001400:	2301      	movs	r3, #1
 8001402:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001406:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800140a:	4618      	mov	r0, r3
 800140c:	3768      	adds	r7, #104	; 0x68
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000000 	.word	0x20000000
 8001418:	431bde83 	.word	0x431bde83
 800141c:	50000300 	.word	0x50000300
 8001420:	50000100 	.word	0x50000100
 8001424:	fff0c007 	.word	0xfff0c007

08001428 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001428:	b480      	push	{r7}
 800142a:	b09b      	sub	sp, #108	; 0x6c
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001432:	2300      	movs	r3, #0
 8001434:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001438:	2300      	movs	r3, #0
 800143a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001442:	2b01      	cmp	r3, #1
 8001444:	d101      	bne.n	800144a <HAL_ADC_ConfigChannel+0x22>
 8001446:	2302      	movs	r3, #2
 8001448:	e2a5      	b.n	8001996 <HAL_ADC_ConfigChannel+0x56e>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2201      	movs	r2, #1
 800144e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	2b00      	cmp	r3, #0
 800145e:	f040 8289 	bne.w	8001974 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2b04      	cmp	r3, #4
 8001468:	d81c      	bhi.n	80014a4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	4613      	mov	r3, r2
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	4413      	add	r3, r2
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	461a      	mov	r2, r3
 800147e:	231f      	movs	r3, #31
 8001480:	4093      	lsls	r3, r2
 8001482:	43db      	mvns	r3, r3
 8001484:	4019      	ands	r1, r3
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	6818      	ldr	r0, [r3, #0]
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	4613      	mov	r3, r2
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	4413      	add	r3, r2
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	fa00 f203 	lsl.w	r2, r0, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	430a      	orrs	r2, r1
 80014a0:	631a      	str	r2, [r3, #48]	; 0x30
 80014a2:	e063      	b.n	800156c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	2b09      	cmp	r3, #9
 80014aa:	d81e      	bhi.n	80014ea <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	4613      	mov	r3, r2
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	4413      	add	r3, r2
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	3b1e      	subs	r3, #30
 80014c0:	221f      	movs	r2, #31
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43db      	mvns	r3, r3
 80014c8:	4019      	ands	r1, r3
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	6818      	ldr	r0, [r3, #0]
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	4613      	mov	r3, r2
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	4413      	add	r3, r2
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	3b1e      	subs	r3, #30
 80014dc:	fa00 f203 	lsl.w	r2, r0, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	430a      	orrs	r2, r1
 80014e6:	635a      	str	r2, [r3, #52]	; 0x34
 80014e8:	e040      	b.n	800156c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	2b0e      	cmp	r3, #14
 80014f0:	d81e      	bhi.n	8001530 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	4613      	mov	r3, r2
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	4413      	add	r3, r2
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	3b3c      	subs	r3, #60	; 0x3c
 8001506:	221f      	movs	r2, #31
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	4019      	ands	r1, r3
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	6818      	ldr	r0, [r3, #0]
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	4613      	mov	r3, r2
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	4413      	add	r3, r2
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	3b3c      	subs	r3, #60	; 0x3c
 8001522:	fa00 f203 	lsl.w	r2, r0, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	430a      	orrs	r2, r1
 800152c:	639a      	str	r2, [r3, #56]	; 0x38
 800152e:	e01d      	b.n	800156c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685a      	ldr	r2, [r3, #4]
 800153a:	4613      	mov	r3, r2
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	4413      	add	r3, r2
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	3b5a      	subs	r3, #90	; 0x5a
 8001544:	221f      	movs	r2, #31
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43db      	mvns	r3, r3
 800154c:	4019      	ands	r1, r3
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	6818      	ldr	r0, [r3, #0]
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685a      	ldr	r2, [r3, #4]
 8001556:	4613      	mov	r3, r2
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	4413      	add	r3, r2
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	3b5a      	subs	r3, #90	; 0x5a
 8001560:	fa00 f203 	lsl.w	r2, r0, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	430a      	orrs	r2, r1
 800156a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f003 030c 	and.w	r3, r3, #12
 8001576:	2b00      	cmp	r3, #0
 8001578:	f040 80e5 	bne.w	8001746 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b09      	cmp	r3, #9
 8001582:	d91c      	bls.n	80015be <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6999      	ldr	r1, [r3, #24]
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	4613      	mov	r3, r2
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	4413      	add	r3, r2
 8001594:	3b1e      	subs	r3, #30
 8001596:	2207      	movs	r2, #7
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	43db      	mvns	r3, r3
 800159e:	4019      	ands	r1, r3
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	6898      	ldr	r0, [r3, #8]
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4613      	mov	r3, r2
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	4413      	add	r3, r2
 80015ae:	3b1e      	subs	r3, #30
 80015b0:	fa00 f203 	lsl.w	r2, r0, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	430a      	orrs	r2, r1
 80015ba:	619a      	str	r2, [r3, #24]
 80015bc:	e019      	b.n	80015f2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	6959      	ldr	r1, [r3, #20]
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4613      	mov	r3, r2
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	4413      	add	r3, r2
 80015ce:	2207      	movs	r2, #7
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	43db      	mvns	r3, r3
 80015d6:	4019      	ands	r1, r3
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	6898      	ldr	r0, [r3, #8]
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4613      	mov	r3, r2
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	4413      	add	r3, r2
 80015e6:	fa00 f203 	lsl.w	r2, r0, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	430a      	orrs	r2, r1
 80015f0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	695a      	ldr	r2, [r3, #20]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	08db      	lsrs	r3, r3, #3
 80015fe:	f003 0303 	and.w	r3, r3, #3
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	691b      	ldr	r3, [r3, #16]
 800160e:	3b01      	subs	r3, #1
 8001610:	2b03      	cmp	r3, #3
 8001612:	d84f      	bhi.n	80016b4 <HAL_ADC_ConfigChannel+0x28c>
 8001614:	a201      	add	r2, pc, #4	; (adr r2, 800161c <HAL_ADC_ConfigChannel+0x1f4>)
 8001616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800161a:	bf00      	nop
 800161c:	0800162d 	.word	0x0800162d
 8001620:	0800164f 	.word	0x0800164f
 8001624:	08001671 	.word	0x08001671
 8001628:	08001693 	.word	0x08001693
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001632:	4b9e      	ldr	r3, [pc, #632]	; (80018ac <HAL_ADC_ConfigChannel+0x484>)
 8001634:	4013      	ands	r3, r2
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	6812      	ldr	r2, [r2, #0]
 800163a:	0691      	lsls	r1, r2, #26
 800163c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800163e:	430a      	orrs	r2, r1
 8001640:	431a      	orrs	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800164a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800164c:	e07e      	b.n	800174c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001654:	4b95      	ldr	r3, [pc, #596]	; (80018ac <HAL_ADC_ConfigChannel+0x484>)
 8001656:	4013      	ands	r3, r2
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	6812      	ldr	r2, [r2, #0]
 800165c:	0691      	lsls	r1, r2, #26
 800165e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001660:	430a      	orrs	r2, r1
 8001662:	431a      	orrs	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800166c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800166e:	e06d      	b.n	800174c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001676:	4b8d      	ldr	r3, [pc, #564]	; (80018ac <HAL_ADC_ConfigChannel+0x484>)
 8001678:	4013      	ands	r3, r2
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	6812      	ldr	r2, [r2, #0]
 800167e:	0691      	lsls	r1, r2, #26
 8001680:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001682:	430a      	orrs	r2, r1
 8001684:	431a      	orrs	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800168e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001690:	e05c      	b.n	800174c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001698:	4b84      	ldr	r3, [pc, #528]	; (80018ac <HAL_ADC_ConfigChannel+0x484>)
 800169a:	4013      	ands	r3, r2
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	6812      	ldr	r2, [r2, #0]
 80016a0:	0691      	lsls	r1, r2, #26
 80016a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80016a4:	430a      	orrs	r2, r1
 80016a6:	431a      	orrs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80016b0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80016b2:	e04b      	b.n	800174c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	069b      	lsls	r3, r3, #26
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d107      	bne.n	80016d8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80016d6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80016de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	069b      	lsls	r3, r3, #26
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d107      	bne.n	80016fc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80016fa:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001702:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	069b      	lsls	r3, r3, #26
 800170c:	429a      	cmp	r2, r3
 800170e:	d107      	bne.n	8001720 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800171e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001726:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	069b      	lsls	r3, r3, #26
 8001730:	429a      	cmp	r2, r3
 8001732:	d10a      	bne.n	800174a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001742:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001744:	e001      	b.n	800174a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001746:	bf00      	nop
 8001748:	e000      	b.n	800174c <HAL_ADC_ConfigChannel+0x324>
      break;
 800174a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 0303 	and.w	r3, r3, #3
 8001756:	2b01      	cmp	r3, #1
 8001758:	d108      	bne.n	800176c <HAL_ADC_ConfigChannel+0x344>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	2b01      	cmp	r3, #1
 8001766:	d101      	bne.n	800176c <HAL_ADC_ConfigChannel+0x344>
 8001768:	2301      	movs	r3, #1
 800176a:	e000      	b.n	800176e <HAL_ADC_ConfigChannel+0x346>
 800176c:	2300      	movs	r3, #0
 800176e:	2b00      	cmp	r3, #0
 8001770:	f040 810b 	bne.w	800198a <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d00f      	beq.n	800179c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2201      	movs	r2, #1
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43da      	mvns	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	400a      	ands	r2, r1
 8001796:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800179a:	e049      	b.n	8001830 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2201      	movs	r2, #1
 80017aa:	409a      	lsls	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2b09      	cmp	r3, #9
 80017bc:	d91c      	bls.n	80017f8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6999      	ldr	r1, [r3, #24]
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4613      	mov	r3, r2
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	4413      	add	r3, r2
 80017ce:	3b1b      	subs	r3, #27
 80017d0:	2207      	movs	r2, #7
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43db      	mvns	r3, r3
 80017d8:	4019      	ands	r1, r3
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	6898      	ldr	r0, [r3, #8]
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	4613      	mov	r3, r2
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	4413      	add	r3, r2
 80017e8:	3b1b      	subs	r3, #27
 80017ea:	fa00 f203 	lsl.w	r2, r0, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	430a      	orrs	r2, r1
 80017f4:	619a      	str	r2, [r3, #24]
 80017f6:	e01b      	b.n	8001830 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6959      	ldr	r1, [r3, #20]
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	1c5a      	adds	r2, r3, #1
 8001804:	4613      	mov	r3, r2
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	4413      	add	r3, r2
 800180a:	2207      	movs	r2, #7
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	43db      	mvns	r3, r3
 8001812:	4019      	ands	r1, r3
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	6898      	ldr	r0, [r3, #8]
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	1c5a      	adds	r2, r3, #1
 800181e:	4613      	mov	r3, r2
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	4413      	add	r3, r2
 8001824:	fa00 f203 	lsl.w	r2, r0, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	430a      	orrs	r2, r1
 800182e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001830:	4b1f      	ldr	r3, [pc, #124]	; (80018b0 <HAL_ADC_ConfigChannel+0x488>)
 8001832:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b10      	cmp	r3, #16
 800183a:	d105      	bne.n	8001848 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800183c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001844:	2b00      	cmp	r3, #0
 8001846:	d015      	beq.n	8001874 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800184c:	2b11      	cmp	r3, #17
 800184e:	d105      	bne.n	800185c <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001850:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001858:	2b00      	cmp	r3, #0
 800185a:	d00b      	beq.n	8001874 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001860:	2b12      	cmp	r3, #18
 8001862:	f040 8092 	bne.w	800198a <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001866:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800186e:	2b00      	cmp	r3, #0
 8001870:	f040 808b 	bne.w	800198a <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800187c:	d102      	bne.n	8001884 <HAL_ADC_ConfigChannel+0x45c>
 800187e:	4b0d      	ldr	r3, [pc, #52]	; (80018b4 <HAL_ADC_ConfigChannel+0x48c>)
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	e002      	b.n	800188a <HAL_ADC_ConfigChannel+0x462>
 8001884:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001888:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 0303 	and.w	r3, r3, #3
 8001894:	2b01      	cmp	r3, #1
 8001896:	d10f      	bne.n	80018b8 <HAL_ADC_ConfigChannel+0x490>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d108      	bne.n	80018b8 <HAL_ADC_ConfigChannel+0x490>
 80018a6:	2301      	movs	r3, #1
 80018a8:	e007      	b.n	80018ba <HAL_ADC_ConfigChannel+0x492>
 80018aa:	bf00      	nop
 80018ac:	83fff000 	.word	0x83fff000
 80018b0:	50000300 	.word	0x50000300
 80018b4:	50000100 	.word	0x50000100
 80018b8:	2300      	movs	r3, #0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d150      	bne.n	8001960 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80018be:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d010      	beq.n	80018e6 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f003 0303 	and.w	r3, r3, #3
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d107      	bne.n	80018e0 <HAL_ADC_ConfigChannel+0x4b8>
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d101      	bne.n	80018e0 <HAL_ADC_ConfigChannel+0x4b8>
 80018dc:	2301      	movs	r3, #1
 80018de:	e000      	b.n	80018e2 <HAL_ADC_ConfigChannel+0x4ba>
 80018e0:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d13c      	bne.n	8001960 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2b10      	cmp	r3, #16
 80018ec:	d11d      	bne.n	800192a <HAL_ADC_ConfigChannel+0x502>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018f6:	d118      	bne.n	800192a <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80018f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001900:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001902:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001904:	4b27      	ldr	r3, [pc, #156]	; (80019a4 <HAL_ADC_ConfigChannel+0x57c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a27      	ldr	r2, [pc, #156]	; (80019a8 <HAL_ADC_ConfigChannel+0x580>)
 800190a:	fba2 2303 	umull	r2, r3, r2, r3
 800190e:	0c9a      	lsrs	r2, r3, #18
 8001910:	4613      	mov	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800191a:	e002      	b.n	8001922 <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	3b01      	subs	r3, #1
 8001920:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1f9      	bne.n	800191c <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001928:	e02e      	b.n	8001988 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2b11      	cmp	r3, #17
 8001930:	d10b      	bne.n	800194a <HAL_ADC_ConfigChannel+0x522>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800193a:	d106      	bne.n	800194a <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800193c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001944:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001946:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001948:	e01e      	b.n	8001988 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2b12      	cmp	r3, #18
 8001950:	d11a      	bne.n	8001988 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001952:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800195a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800195c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800195e:	e013      	b.n	8001988 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001964:	f043 0220 	orr.w	r2, r3, #32
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001972:	e00a      	b.n	800198a <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001978:	f043 0220 	orr.w	r2, r3, #32
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001986:	e000      	b.n	800198a <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001988:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001992:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001996:	4618      	mov	r0, r3
 8001998:	376c      	adds	r7, #108	; 0x6c
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	20000000 	.word	0x20000000
 80019a8:	431bde83 	.word	0x431bde83

080019ac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b099      	sub	sp, #100	; 0x64
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019b6:	2300      	movs	r3, #0
 80019b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019c4:	d102      	bne.n	80019cc <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80019c6:	4b5a      	ldr	r3, [pc, #360]	; (8001b30 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	e002      	b.n	80019d2 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 80019cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80019d0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d101      	bne.n	80019dc <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e0a2      	b.n	8001b22 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d101      	bne.n	80019ea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80019e6:	2302      	movs	r3, #2
 80019e8:	e09b      	b.n	8001b22 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d17f      	bne.n	8001b00 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d179      	bne.n	8001b00 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a0c:	4b49      	ldr	r3, [pc, #292]	; (8001b34 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001a0e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d040      	beq.n	8001a9a <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001a18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	6859      	ldr	r1, [r3, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a2a:	035b      	lsls	r3, r3, #13
 8001a2c:	430b      	orrs	r3, r1
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a32:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d108      	bne.n	8001a54 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d101      	bne.n	8001a54 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001a50:	2301      	movs	r3, #1
 8001a52:	e000      	b.n	8001a56 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001a54:	2300      	movs	r3, #0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d15c      	bne.n	8001b14 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 0303 	and.w	r3, r3, #3
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d107      	bne.n	8001a76 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d101      	bne.n	8001a76 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001a72:	2301      	movs	r3, #1
 8001a74:	e000      	b.n	8001a78 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001a76:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d14b      	bne.n	8001b14 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001a7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001a84:	f023 030f 	bic.w	r3, r3, #15
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	6811      	ldr	r1, [r2, #0]
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	6892      	ldr	r2, [r2, #8]
 8001a90:	430a      	orrs	r2, r1
 8001a92:	431a      	orrs	r2, r3
 8001a94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a96:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a98:	e03c      	b.n	8001b14 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001a9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001aa2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001aa4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 0303 	and.w	r3, r3, #3
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d108      	bne.n	8001ac6 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d101      	bne.n	8001ac6 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e000      	b.n	8001ac8 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d123      	bne.n	8001b14 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 0303 	and.w	r3, r3, #3
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d107      	bne.n	8001ae8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d101      	bne.n	8001ae8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e000      	b.n	8001aea <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001ae8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d112      	bne.n	8001b14 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001aee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001af6:	f023 030f 	bic.w	r3, r3, #15
 8001afa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001afc:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001afe:	e009      	b.n	8001b14 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b04:	f043 0220 	orr.w	r2, r3, #32
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001b12:	e000      	b.n	8001b16 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b14:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001b1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001b22:	4618      	mov	r0, r3
 8001b24:	3764      	adds	r7, #100	; 0x64
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	50000100 	.word	0x50000100
 8001b34:	50000300 	.word	0x50000300

08001b38 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f003 0303 	and.w	r3, r3, #3
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d108      	bne.n	8001b64 <ADC_Disable+0x2c>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d101      	bne.n	8001b64 <ADC_Disable+0x2c>
 8001b60:	2301      	movs	r3, #1
 8001b62:	e000      	b.n	8001b66 <ADC_Disable+0x2e>
 8001b64:	2300      	movs	r3, #0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d047      	beq.n	8001bfa <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f003 030d 	and.w	r3, r3, #13
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d10f      	bne.n	8001b98 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f042 0202 	orr.w	r2, r2, #2
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2203      	movs	r2, #3
 8001b8e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001b90:	f7ff fa88 	bl	80010a4 <HAL_GetTick>
 8001b94:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b96:	e029      	b.n	8001bec <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9c:	f043 0210 	orr.w	r2, r3, #16
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba8:	f043 0201 	orr.w	r2, r3, #1
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e023      	b.n	8001bfc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001bb4:	f7ff fa76 	bl	80010a4 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d914      	bls.n	8001bec <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d10d      	bne.n	8001bec <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd4:	f043 0210 	orr.w	r2, r3, #16
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be0:	f043 0201 	orr.w	r2, r3, #1
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e007      	b.n	8001bfc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d0dc      	beq.n	8001bb4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <__NVIC_SetPriorityGrouping>:
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c14:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <__NVIC_SetPriorityGrouping+0x44>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c1a:	68ba      	ldr	r2, [r7, #8]
 8001c1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c20:	4013      	ands	r3, r2
 8001c22:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c36:	4a04      	ldr	r2, [pc, #16]	; (8001c48 <__NVIC_SetPriorityGrouping+0x44>)
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	60d3      	str	r3, [r2, #12]
}
 8001c3c:	bf00      	nop
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <__NVIC_GetPriorityGrouping>:
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c50:	4b04      	ldr	r3, [pc, #16]	; (8001c64 <__NVIC_GetPriorityGrouping+0x18>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	0a1b      	lsrs	r3, r3, #8
 8001c56:	f003 0307 	and.w	r3, r3, #7
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	6039      	str	r1, [r7, #0]
 8001c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	db0a      	blt.n	8001c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	b2da      	uxtb	r2, r3
 8001c80:	490c      	ldr	r1, [pc, #48]	; (8001cb4 <__NVIC_SetPriority+0x4c>)
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	0112      	lsls	r2, r2, #4
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	440b      	add	r3, r1
 8001c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c90:	e00a      	b.n	8001ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	4908      	ldr	r1, [pc, #32]	; (8001cb8 <__NVIC_SetPriority+0x50>)
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	3b04      	subs	r3, #4
 8001ca0:	0112      	lsls	r2, r2, #4
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	761a      	strb	r2, [r3, #24]
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	e000e100 	.word	0xe000e100
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b089      	sub	sp, #36	; 0x24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f1c3 0307 	rsb	r3, r3, #7
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	bf28      	it	cs
 8001cda:	2304      	movcs	r3, #4
 8001cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	2b06      	cmp	r3, #6
 8001ce4:	d902      	bls.n	8001cec <NVIC_EncodePriority+0x30>
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	3b03      	subs	r3, #3
 8001cea:	e000      	b.n	8001cee <NVIC_EncodePriority+0x32>
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43da      	mvns	r2, r3
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	401a      	ands	r2, r3
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d04:	f04f 31ff 	mov.w	r1, #4294967295
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0e:	43d9      	mvns	r1, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d14:	4313      	orrs	r3, r2
         );
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3724      	adds	r7, #36	; 0x24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
	...

08001d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d34:	d301      	bcc.n	8001d3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d36:	2301      	movs	r3, #1
 8001d38:	e00f      	b.n	8001d5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d3a:	4a0a      	ldr	r2, [pc, #40]	; (8001d64 <SysTick_Config+0x40>)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d42:	210f      	movs	r1, #15
 8001d44:	f04f 30ff 	mov.w	r0, #4294967295
 8001d48:	f7ff ff8e 	bl	8001c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d4c:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <SysTick_Config+0x40>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d52:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <SysTick_Config+0x40>)
 8001d54:	2207      	movs	r2, #7
 8001d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	e000e010 	.word	0xe000e010

08001d68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7ff ff47 	bl	8001c04 <__NVIC_SetPriorityGrouping>
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b086      	sub	sp, #24
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	4603      	mov	r3, r0
 8001d86:	60b9      	str	r1, [r7, #8]
 8001d88:	607a      	str	r2, [r7, #4]
 8001d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d90:	f7ff ff5c 	bl	8001c4c <__NVIC_GetPriorityGrouping>
 8001d94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	68b9      	ldr	r1, [r7, #8]
 8001d9a:	6978      	ldr	r0, [r7, #20]
 8001d9c:	f7ff ff8e 	bl	8001cbc <NVIC_EncodePriority>
 8001da0:	4602      	mov	r2, r0
 8001da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001da6:	4611      	mov	r1, r2
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ff5d 	bl	8001c68 <__NVIC_SetPriority>
}
 8001dae:	bf00      	nop
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff ffb0 	bl	8001d24 <SysTick_Config>
 8001dc4:	4603      	mov	r3, r0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
	...

08001dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b087      	sub	sp, #28
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dde:	e14e      	b.n	800207e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	2101      	movs	r1, #1
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dec:	4013      	ands	r3, r2
 8001dee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f000 8140 	beq.w	8002078 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 0303 	and.w	r3, r3, #3
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d005      	beq.n	8001e10 <HAL_GPIO_Init+0x40>
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f003 0303 	and.w	r3, r3, #3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d130      	bne.n	8001e72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	4013      	ands	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	68da      	ldr	r2, [r3, #12]
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e46:	2201      	movs	r2, #1
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	4013      	ands	r3, r2
 8001e54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	091b      	lsrs	r3, r3, #4
 8001e5c:	f003 0201 	and.w	r2, r3, #1
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f003 0303 	and.w	r3, r3, #3
 8001e7a:	2b03      	cmp	r3, #3
 8001e7c:	d017      	beq.n	8001eae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	2203      	movs	r2, #3
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	4013      	ands	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	689a      	ldr	r2, [r3, #8]
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d123      	bne.n	8001f02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	08da      	lsrs	r2, r3, #3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	3208      	adds	r2, #8
 8001ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	220f      	movs	r2, #15
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	4013      	ands	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	691a      	ldr	r2, [r3, #16]
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	08da      	lsrs	r2, r3, #3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3208      	adds	r2, #8
 8001efc:	6939      	ldr	r1, [r7, #16]
 8001efe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	2203      	movs	r2, #3
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43db      	mvns	r3, r3
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	4013      	ands	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 0203 	and.w	r2, r3, #3
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 809a 	beq.w	8002078 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f44:	4b55      	ldr	r3, [pc, #340]	; (800209c <HAL_GPIO_Init+0x2cc>)
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	4a54      	ldr	r2, [pc, #336]	; (800209c <HAL_GPIO_Init+0x2cc>)
 8001f4a:	f043 0301 	orr.w	r3, r3, #1
 8001f4e:	6193      	str	r3, [r2, #24]
 8001f50:	4b52      	ldr	r3, [pc, #328]	; (800209c <HAL_GPIO_Init+0x2cc>)
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f5c:	4a50      	ldr	r2, [pc, #320]	; (80020a0 <HAL_GPIO_Init+0x2d0>)
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	089b      	lsrs	r3, r3, #2
 8001f62:	3302      	adds	r3, #2
 8001f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	f003 0303 	and.w	r3, r3, #3
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	220f      	movs	r2, #15
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f86:	d013      	beq.n	8001fb0 <HAL_GPIO_Init+0x1e0>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a46      	ldr	r2, [pc, #280]	; (80020a4 <HAL_GPIO_Init+0x2d4>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d00d      	beq.n	8001fac <HAL_GPIO_Init+0x1dc>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a45      	ldr	r2, [pc, #276]	; (80020a8 <HAL_GPIO_Init+0x2d8>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d007      	beq.n	8001fa8 <HAL_GPIO_Init+0x1d8>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a44      	ldr	r2, [pc, #272]	; (80020ac <HAL_GPIO_Init+0x2dc>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d101      	bne.n	8001fa4 <HAL_GPIO_Init+0x1d4>
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e006      	b.n	8001fb2 <HAL_GPIO_Init+0x1e2>
 8001fa4:	2305      	movs	r3, #5
 8001fa6:	e004      	b.n	8001fb2 <HAL_GPIO_Init+0x1e2>
 8001fa8:	2302      	movs	r3, #2
 8001faa:	e002      	b.n	8001fb2 <HAL_GPIO_Init+0x1e2>
 8001fac:	2301      	movs	r3, #1
 8001fae:	e000      	b.n	8001fb2 <HAL_GPIO_Init+0x1e2>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	697a      	ldr	r2, [r7, #20]
 8001fb4:	f002 0203 	and.w	r2, r2, #3
 8001fb8:	0092      	lsls	r2, r2, #2
 8001fba:	4093      	lsls	r3, r2
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fc2:	4937      	ldr	r1, [pc, #220]	; (80020a0 <HAL_GPIO_Init+0x2d0>)
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	089b      	lsrs	r3, r3, #2
 8001fc8:	3302      	adds	r3, #2
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fd0:	4b37      	ldr	r3, [pc, #220]	; (80020b0 <HAL_GPIO_Init+0x2e0>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ff4:	4a2e      	ldr	r2, [pc, #184]	; (80020b0 <HAL_GPIO_Init+0x2e0>)
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ffa:	4b2d      	ldr	r3, [pc, #180]	; (80020b0 <HAL_GPIO_Init+0x2e0>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	43db      	mvns	r3, r3
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	4013      	ands	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	4313      	orrs	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800201e:	4a24      	ldr	r2, [pc, #144]	; (80020b0 <HAL_GPIO_Init+0x2e0>)
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002024:	4b22      	ldr	r3, [pc, #136]	; (80020b0 <HAL_GPIO_Init+0x2e0>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	43db      	mvns	r3, r3
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	4013      	ands	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	4313      	orrs	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002048:	4a19      	ldr	r2, [pc, #100]	; (80020b0 <HAL_GPIO_Init+0x2e0>)
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800204e:	4b18      	ldr	r3, [pc, #96]	; (80020b0 <HAL_GPIO_Init+0x2e0>)
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	43db      	mvns	r3, r3
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	4013      	ands	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4313      	orrs	r3, r2
 8002070:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002072:	4a0f      	ldr	r2, [pc, #60]	; (80020b0 <HAL_GPIO_Init+0x2e0>)
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	3301      	adds	r3, #1
 800207c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	fa22 f303 	lsr.w	r3, r2, r3
 8002088:	2b00      	cmp	r3, #0
 800208a:	f47f aea9 	bne.w	8001de0 <HAL_GPIO_Init+0x10>
  }
}
 800208e:	bf00      	nop
 8002090:	bf00      	nop
 8002092:	371c      	adds	r7, #28
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	40021000 	.word	0x40021000
 80020a0:	40010000 	.word	0x40010000
 80020a4:	48000400 	.word	0x48000400
 80020a8:	48000800 	.word	0x48000800
 80020ac:	48000c00 	.word	0x48000c00
 80020b0:	40010400 	.word	0x40010400

080020b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	1d3b      	adds	r3, r7, #4
 80020be:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020c0:	1d3b      	adds	r3, r7, #4
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d102      	bne.n	80020ce <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	f000 bef4 	b.w	8002eb6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ce:	1d3b      	adds	r3, r7, #4
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 816a 	beq.w	80023b2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80020de:	4bb3      	ldr	r3, [pc, #716]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f003 030c 	and.w	r3, r3, #12
 80020e6:	2b04      	cmp	r3, #4
 80020e8:	d00c      	beq.n	8002104 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020ea:	4bb0      	ldr	r3, [pc, #704]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f003 030c 	and.w	r3, r3, #12
 80020f2:	2b08      	cmp	r3, #8
 80020f4:	d159      	bne.n	80021aa <HAL_RCC_OscConfig+0xf6>
 80020f6:	4bad      	ldr	r3, [pc, #692]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002102:	d152      	bne.n	80021aa <HAL_RCC_OscConfig+0xf6>
 8002104:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002108:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002110:	fa93 f3a3 	rbit	r3, r3
 8002114:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002118:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800211c:	fab3 f383 	clz	r3, r3
 8002120:	b2db      	uxtb	r3, r3
 8002122:	095b      	lsrs	r3, r3, #5
 8002124:	b2db      	uxtb	r3, r3
 8002126:	f043 0301 	orr.w	r3, r3, #1
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b01      	cmp	r3, #1
 800212e:	d102      	bne.n	8002136 <HAL_RCC_OscConfig+0x82>
 8002130:	4b9e      	ldr	r3, [pc, #632]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	e015      	b.n	8002162 <HAL_RCC_OscConfig+0xae>
 8002136:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800213a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002142:	fa93 f3a3 	rbit	r3, r3
 8002146:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800214a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800214e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002152:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002156:	fa93 f3a3 	rbit	r3, r3
 800215a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800215e:	4b93      	ldr	r3, [pc, #588]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 8002160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002162:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002166:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800216a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800216e:	fa92 f2a2 	rbit	r2, r2
 8002172:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002176:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800217a:	fab2 f282 	clz	r2, r2
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	f042 0220 	orr.w	r2, r2, #32
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	f002 021f 	and.w	r2, r2, #31
 800218a:	2101      	movs	r1, #1
 800218c:	fa01 f202 	lsl.w	r2, r1, r2
 8002190:	4013      	ands	r3, r2
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 810c 	beq.w	80023b0 <HAL_RCC_OscConfig+0x2fc>
 8002198:	1d3b      	adds	r3, r7, #4
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f040 8106 	bne.w	80023b0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	f000 be86 	b.w	8002eb6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021aa:	1d3b      	adds	r3, r7, #4
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021b4:	d106      	bne.n	80021c4 <HAL_RCC_OscConfig+0x110>
 80021b6:	4b7d      	ldr	r3, [pc, #500]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a7c      	ldr	r2, [pc, #496]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 80021bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	e030      	b.n	8002226 <HAL_RCC_OscConfig+0x172>
 80021c4:	1d3b      	adds	r3, r7, #4
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d10c      	bne.n	80021e8 <HAL_RCC_OscConfig+0x134>
 80021ce:	4b77      	ldr	r3, [pc, #476]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a76      	ldr	r2, [pc, #472]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 80021d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	4b74      	ldr	r3, [pc, #464]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a73      	ldr	r2, [pc, #460]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 80021e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	e01e      	b.n	8002226 <HAL_RCC_OscConfig+0x172>
 80021e8:	1d3b      	adds	r3, r7, #4
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021f2:	d10c      	bne.n	800220e <HAL_RCC_OscConfig+0x15a>
 80021f4:	4b6d      	ldr	r3, [pc, #436]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a6c      	ldr	r2, [pc, #432]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 80021fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021fe:	6013      	str	r3, [r2, #0]
 8002200:	4b6a      	ldr	r3, [pc, #424]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a69      	ldr	r2, [pc, #420]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 8002206:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800220a:	6013      	str	r3, [r2, #0]
 800220c:	e00b      	b.n	8002226 <HAL_RCC_OscConfig+0x172>
 800220e:	4b67      	ldr	r3, [pc, #412]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a66      	ldr	r2, [pc, #408]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 8002214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	4b64      	ldr	r3, [pc, #400]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a63      	ldr	r2, [pc, #396]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 8002220:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002224:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002226:	4b61      	ldr	r3, [pc, #388]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 8002228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222a:	f023 020f 	bic.w	r2, r3, #15
 800222e:	1d3b      	adds	r3, r7, #4
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	495d      	ldr	r1, [pc, #372]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 8002236:	4313      	orrs	r3, r2
 8002238:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800223a:	1d3b      	adds	r3, r7, #4
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d059      	beq.n	80022f8 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002244:	f7fe ff2e 	bl	80010a4 <HAL_GetTick>
 8002248:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224c:	e00a      	b.n	8002264 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800224e:	f7fe ff29 	bl	80010a4 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b64      	cmp	r3, #100	; 0x64
 800225c:	d902      	bls.n	8002264 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	f000 be29 	b.w	8002eb6 <HAL_RCC_OscConfig+0xe02>
 8002264:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002268:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002270:	fa93 f3a3 	rbit	r3, r3
 8002274:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002278:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227c:	fab3 f383 	clz	r3, r3
 8002280:	b2db      	uxtb	r3, r3
 8002282:	095b      	lsrs	r3, r3, #5
 8002284:	b2db      	uxtb	r3, r3
 8002286:	f043 0301 	orr.w	r3, r3, #1
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b01      	cmp	r3, #1
 800228e:	d102      	bne.n	8002296 <HAL_RCC_OscConfig+0x1e2>
 8002290:	4b46      	ldr	r3, [pc, #280]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	e015      	b.n	80022c2 <HAL_RCC_OscConfig+0x20e>
 8002296:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800229a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80022a2:	fa93 f3a3 	rbit	r3, r3
 80022a6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80022aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022ae:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80022b2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80022b6:	fa93 f3a3 	rbit	r3, r3
 80022ba:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80022be:	4b3b      	ldr	r3, [pc, #236]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 80022c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022c6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80022ca:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80022ce:	fa92 f2a2 	rbit	r2, r2
 80022d2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80022d6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80022da:	fab2 f282 	clz	r2, r2
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	f042 0220 	orr.w	r2, r2, #32
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	f002 021f 	and.w	r2, r2, #31
 80022ea:	2101      	movs	r1, #1
 80022ec:	fa01 f202 	lsl.w	r2, r1, r2
 80022f0:	4013      	ands	r3, r2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d0ab      	beq.n	800224e <HAL_RCC_OscConfig+0x19a>
 80022f6:	e05c      	b.n	80023b2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f8:	f7fe fed4 	bl	80010a4 <HAL_GetTick>
 80022fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002300:	e00a      	b.n	8002318 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002302:	f7fe fecf 	bl	80010a4 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b64      	cmp	r3, #100	; 0x64
 8002310:	d902      	bls.n	8002318 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	f000 bdcf 	b.w	8002eb6 <HAL_RCC_OscConfig+0xe02>
 8002318:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800231c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002320:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002324:	fa93 f3a3 	rbit	r3, r3
 8002328:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800232c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002330:	fab3 f383 	clz	r3, r3
 8002334:	b2db      	uxtb	r3, r3
 8002336:	095b      	lsrs	r3, r3, #5
 8002338:	b2db      	uxtb	r3, r3
 800233a:	f043 0301 	orr.w	r3, r3, #1
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2b01      	cmp	r3, #1
 8002342:	d102      	bne.n	800234a <HAL_RCC_OscConfig+0x296>
 8002344:	4b19      	ldr	r3, [pc, #100]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	e015      	b.n	8002376 <HAL_RCC_OscConfig+0x2c2>
 800234a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800234e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002352:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002356:	fa93 f3a3 	rbit	r3, r3
 800235a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800235e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002362:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002366:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800236a:	fa93 f3a3 	rbit	r3, r3
 800236e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002372:	4b0e      	ldr	r3, [pc, #56]	; (80023ac <HAL_RCC_OscConfig+0x2f8>)
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800237a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800237e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002382:	fa92 f2a2 	rbit	r2, r2
 8002386:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800238a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800238e:	fab2 f282 	clz	r2, r2
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	f042 0220 	orr.w	r2, r2, #32
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	f002 021f 	and.w	r2, r2, #31
 800239e:	2101      	movs	r1, #1
 80023a0:	fa01 f202 	lsl.w	r2, r1, r2
 80023a4:	4013      	ands	r3, r2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1ab      	bne.n	8002302 <HAL_RCC_OscConfig+0x24e>
 80023aa:	e002      	b.n	80023b2 <HAL_RCC_OscConfig+0x2fe>
 80023ac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023b2:	1d3b      	adds	r3, r7, #4
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f000 816f 	beq.w	80026a0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80023c2:	4bd0      	ldr	r3, [pc, #832]	; (8002704 <HAL_RCC_OscConfig+0x650>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f003 030c 	and.w	r3, r3, #12
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00b      	beq.n	80023e6 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80023ce:	4bcd      	ldr	r3, [pc, #820]	; (8002704 <HAL_RCC_OscConfig+0x650>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f003 030c 	and.w	r3, r3, #12
 80023d6:	2b08      	cmp	r3, #8
 80023d8:	d16c      	bne.n	80024b4 <HAL_RCC_OscConfig+0x400>
 80023da:	4bca      	ldr	r3, [pc, #808]	; (8002704 <HAL_RCC_OscConfig+0x650>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d166      	bne.n	80024b4 <HAL_RCC_OscConfig+0x400>
 80023e6:	2302      	movs	r3, #2
 80023e8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ec:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80023f0:	fa93 f3a3 	rbit	r3, r3
 80023f4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80023f8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023fc:	fab3 f383 	clz	r3, r3
 8002400:	b2db      	uxtb	r3, r3
 8002402:	095b      	lsrs	r3, r3, #5
 8002404:	b2db      	uxtb	r3, r3
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2b01      	cmp	r3, #1
 800240e:	d102      	bne.n	8002416 <HAL_RCC_OscConfig+0x362>
 8002410:	4bbc      	ldr	r3, [pc, #752]	; (8002704 <HAL_RCC_OscConfig+0x650>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	e013      	b.n	800243e <HAL_RCC_OscConfig+0x38a>
 8002416:	2302      	movs	r3, #2
 8002418:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002420:	fa93 f3a3 	rbit	r3, r3
 8002424:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002428:	2302      	movs	r3, #2
 800242a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800242e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002432:	fa93 f3a3 	rbit	r3, r3
 8002436:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800243a:	4bb2      	ldr	r3, [pc, #712]	; (8002704 <HAL_RCC_OscConfig+0x650>)
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	2202      	movs	r2, #2
 8002440:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002444:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002448:	fa92 f2a2 	rbit	r2, r2
 800244c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002450:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002454:	fab2 f282 	clz	r2, r2
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	f042 0220 	orr.w	r2, r2, #32
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	f002 021f 	and.w	r2, r2, #31
 8002464:	2101      	movs	r1, #1
 8002466:	fa01 f202 	lsl.w	r2, r1, r2
 800246a:	4013      	ands	r3, r2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d007      	beq.n	8002480 <HAL_RCC_OscConfig+0x3cc>
 8002470:	1d3b      	adds	r3, r7, #4
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d002      	beq.n	8002480 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	f000 bd1b 	b.w	8002eb6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002480:	4ba0      	ldr	r3, [pc, #640]	; (8002704 <HAL_RCC_OscConfig+0x650>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002488:	1d3b      	adds	r3, r7, #4
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	21f8      	movs	r1, #248	; 0xf8
 8002490:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002494:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002498:	fa91 f1a1 	rbit	r1, r1
 800249c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80024a0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80024a4:	fab1 f181 	clz	r1, r1
 80024a8:	b2c9      	uxtb	r1, r1
 80024aa:	408b      	lsls	r3, r1
 80024ac:	4995      	ldr	r1, [pc, #596]	; (8002704 <HAL_RCC_OscConfig+0x650>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024b2:	e0f5      	b.n	80026a0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024b4:	1d3b      	adds	r3, r7, #4
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f000 8085 	beq.w	80025ca <HAL_RCC_OscConfig+0x516>
 80024c0:	2301      	movs	r3, #1
 80024c2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80024ca:	fa93 f3a3 	rbit	r3, r3
 80024ce:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80024d2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024d6:	fab3 f383 	clz	r3, r3
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	461a      	mov	r2, r3
 80024e8:	2301      	movs	r3, #1
 80024ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ec:	f7fe fdda 	bl	80010a4 <HAL_GetTick>
 80024f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f4:	e00a      	b.n	800250c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024f6:	f7fe fdd5 	bl	80010a4 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d902      	bls.n	800250c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	f000 bcd5 	b.w	8002eb6 <HAL_RCC_OscConfig+0xe02>
 800250c:	2302      	movs	r3, #2
 800250e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002512:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002516:	fa93 f3a3 	rbit	r3, r3
 800251a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800251e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002522:	fab3 f383 	clz	r3, r3
 8002526:	b2db      	uxtb	r3, r3
 8002528:	095b      	lsrs	r3, r3, #5
 800252a:	b2db      	uxtb	r3, r3
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b01      	cmp	r3, #1
 8002534:	d102      	bne.n	800253c <HAL_RCC_OscConfig+0x488>
 8002536:	4b73      	ldr	r3, [pc, #460]	; (8002704 <HAL_RCC_OscConfig+0x650>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	e013      	b.n	8002564 <HAL_RCC_OscConfig+0x4b0>
 800253c:	2302      	movs	r3, #2
 800253e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002542:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002546:	fa93 f3a3 	rbit	r3, r3
 800254a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800254e:	2302      	movs	r3, #2
 8002550:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002554:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002558:	fa93 f3a3 	rbit	r3, r3
 800255c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002560:	4b68      	ldr	r3, [pc, #416]	; (8002704 <HAL_RCC_OscConfig+0x650>)
 8002562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002564:	2202      	movs	r2, #2
 8002566:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800256a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800256e:	fa92 f2a2 	rbit	r2, r2
 8002572:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002576:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800257a:	fab2 f282 	clz	r2, r2
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	f042 0220 	orr.w	r2, r2, #32
 8002584:	b2d2      	uxtb	r2, r2
 8002586:	f002 021f 	and.w	r2, r2, #31
 800258a:	2101      	movs	r1, #1
 800258c:	fa01 f202 	lsl.w	r2, r1, r2
 8002590:	4013      	ands	r3, r2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d0af      	beq.n	80024f6 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002596:	4b5b      	ldr	r3, [pc, #364]	; (8002704 <HAL_RCC_OscConfig+0x650>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800259e:	1d3b      	adds	r3, r7, #4
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	21f8      	movs	r1, #248	; 0xf8
 80025a6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025aa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80025ae:	fa91 f1a1 	rbit	r1, r1
 80025b2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80025b6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80025ba:	fab1 f181 	clz	r1, r1
 80025be:	b2c9      	uxtb	r1, r1
 80025c0:	408b      	lsls	r3, r1
 80025c2:	4950      	ldr	r1, [pc, #320]	; (8002704 <HAL_RCC_OscConfig+0x650>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	600b      	str	r3, [r1, #0]
 80025c8:	e06a      	b.n	80026a0 <HAL_RCC_OscConfig+0x5ec>
 80025ca:	2301      	movs	r3, #1
 80025cc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80025d4:	fa93 f3a3 	rbit	r3, r3
 80025d8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80025dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025e0:	fab3 f383 	clz	r3, r3
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025ea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	461a      	mov	r2, r3
 80025f2:	2300      	movs	r3, #0
 80025f4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f6:	f7fe fd55 	bl	80010a4 <HAL_GetTick>
 80025fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025fe:	e00a      	b.n	8002616 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002600:	f7fe fd50 	bl	80010a4 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d902      	bls.n	8002616 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	f000 bc50 	b.w	8002eb6 <HAL_RCC_OscConfig+0xe02>
 8002616:	2302      	movs	r3, #2
 8002618:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002620:	fa93 f3a3 	rbit	r3, r3
 8002624:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002628:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800262c:	fab3 f383 	clz	r3, r3
 8002630:	b2db      	uxtb	r3, r3
 8002632:	095b      	lsrs	r3, r3, #5
 8002634:	b2db      	uxtb	r3, r3
 8002636:	f043 0301 	orr.w	r3, r3, #1
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b01      	cmp	r3, #1
 800263e:	d102      	bne.n	8002646 <HAL_RCC_OscConfig+0x592>
 8002640:	4b30      	ldr	r3, [pc, #192]	; (8002704 <HAL_RCC_OscConfig+0x650>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	e013      	b.n	800266e <HAL_RCC_OscConfig+0x5ba>
 8002646:	2302      	movs	r3, #2
 8002648:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002650:	fa93 f3a3 	rbit	r3, r3
 8002654:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002658:	2302      	movs	r3, #2
 800265a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800265e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002662:	fa93 f3a3 	rbit	r3, r3
 8002666:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800266a:	4b26      	ldr	r3, [pc, #152]	; (8002704 <HAL_RCC_OscConfig+0x650>)
 800266c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266e:	2202      	movs	r2, #2
 8002670:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002674:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002678:	fa92 f2a2 	rbit	r2, r2
 800267c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002680:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002684:	fab2 f282 	clz	r2, r2
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	f042 0220 	orr.w	r2, r2, #32
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	f002 021f 	and.w	r2, r2, #31
 8002694:	2101      	movs	r1, #1
 8002696:	fa01 f202 	lsl.w	r2, r1, r2
 800269a:	4013      	ands	r3, r2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1af      	bne.n	8002600 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026a0:	1d3b      	adds	r3, r7, #4
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0308 	and.w	r3, r3, #8
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 80da 	beq.w	8002864 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026b0:	1d3b      	adds	r3, r7, #4
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d069      	beq.n	800278e <HAL_RCC_OscConfig+0x6da>
 80026ba:	2301      	movs	r3, #1
 80026bc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80026c4:	fa93 f3a3 	rbit	r3, r3
 80026c8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80026cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026d0:	fab3 f383 	clz	r3, r3
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	461a      	mov	r2, r3
 80026d8:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <HAL_RCC_OscConfig+0x654>)
 80026da:	4413      	add	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	461a      	mov	r2, r3
 80026e0:	2301      	movs	r3, #1
 80026e2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e4:	f7fe fcde 	bl	80010a4 <HAL_GetTick>
 80026e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ec:	e00e      	b.n	800270c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ee:	f7fe fcd9 	bl	80010a4 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d906      	bls.n	800270c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e3d9      	b.n	8002eb6 <HAL_RCC_OscConfig+0xe02>
 8002702:	bf00      	nop
 8002704:	40021000 	.word	0x40021000
 8002708:	10908120 	.word	0x10908120
 800270c:	2302      	movs	r3, #2
 800270e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002712:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002716:	fa93 f3a3 	rbit	r3, r3
 800271a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800271e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002722:	2202      	movs	r2, #2
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	fa93 f2a3 	rbit	r2, r3
 8002730:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800273a:	2202      	movs	r2, #2
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	fa93 f2a3 	rbit	r2, r3
 8002748:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800274c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800274e:	4ba5      	ldr	r3, [pc, #660]	; (80029e4 <HAL_RCC_OscConfig+0x930>)
 8002750:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002752:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002756:	2102      	movs	r1, #2
 8002758:	6019      	str	r1, [r3, #0]
 800275a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	fa93 f1a3 	rbit	r1, r3
 8002764:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002768:	6019      	str	r1, [r3, #0]
  return result;
 800276a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	fab3 f383 	clz	r3, r3
 8002774:	b2db      	uxtb	r3, r3
 8002776:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800277a:	b2db      	uxtb	r3, r3
 800277c:	f003 031f 	and.w	r3, r3, #31
 8002780:	2101      	movs	r1, #1
 8002782:	fa01 f303 	lsl.w	r3, r1, r3
 8002786:	4013      	ands	r3, r2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0b0      	beq.n	80026ee <HAL_RCC_OscConfig+0x63a>
 800278c:	e06a      	b.n	8002864 <HAL_RCC_OscConfig+0x7b0>
 800278e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002792:	2201      	movs	r2, #1
 8002794:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002796:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	fa93 f2a3 	rbit	r2, r3
 80027a0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80027a4:	601a      	str	r2, [r3, #0]
  return result;
 80027a6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80027aa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ac:	fab3 f383 	clz	r3, r3
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	461a      	mov	r2, r3
 80027b4:	4b8c      	ldr	r3, [pc, #560]	; (80029e8 <HAL_RCC_OscConfig+0x934>)
 80027b6:	4413      	add	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	461a      	mov	r2, r3
 80027bc:	2300      	movs	r3, #0
 80027be:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c0:	f7fe fc70 	bl	80010a4 <HAL_GetTick>
 80027c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027c8:	e009      	b.n	80027de <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ca:	f7fe fc6b 	bl	80010a4 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e36b      	b.n	8002eb6 <HAL_RCC_OscConfig+0xe02>
 80027de:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80027e2:	2202      	movs	r2, #2
 80027e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	fa93 f2a3 	rbit	r2, r3
 80027f0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80027fa:	2202      	movs	r2, #2
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	fa93 f2a3 	rbit	r2, r3
 8002808:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002812:	2202      	movs	r2, #2
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	fa93 f2a3 	rbit	r2, r3
 8002820:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002824:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002826:	4b6f      	ldr	r3, [pc, #444]	; (80029e4 <HAL_RCC_OscConfig+0x930>)
 8002828:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800282a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800282e:	2102      	movs	r1, #2
 8002830:	6019      	str	r1, [r3, #0]
 8002832:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	fa93 f1a3 	rbit	r1, r3
 800283c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002840:	6019      	str	r1, [r3, #0]
  return result;
 8002842:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	fab3 f383 	clz	r3, r3
 800284c:	b2db      	uxtb	r3, r3
 800284e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002852:	b2db      	uxtb	r3, r3
 8002854:	f003 031f 	and.w	r3, r3, #31
 8002858:	2101      	movs	r1, #1
 800285a:	fa01 f303 	lsl.w	r3, r1, r3
 800285e:	4013      	ands	r3, r2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1b2      	bne.n	80027ca <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002864:	1d3b      	adds	r3, r7, #4
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0304 	and.w	r3, r3, #4
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 8158 	beq.w	8002b24 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002874:	2300      	movs	r3, #0
 8002876:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800287a:	4b5a      	ldr	r3, [pc, #360]	; (80029e4 <HAL_RCC_OscConfig+0x930>)
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d112      	bne.n	80028ac <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002886:	4b57      	ldr	r3, [pc, #348]	; (80029e4 <HAL_RCC_OscConfig+0x930>)
 8002888:	69db      	ldr	r3, [r3, #28]
 800288a:	4a56      	ldr	r2, [pc, #344]	; (80029e4 <HAL_RCC_OscConfig+0x930>)
 800288c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002890:	61d3      	str	r3, [r2, #28]
 8002892:	4b54      	ldr	r3, [pc, #336]	; (80029e4 <HAL_RCC_OscConfig+0x930>)
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800289a:	f107 0308 	add.w	r3, r7, #8
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	f107 0308 	add.w	r3, r7, #8
 80028a4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80028a6:	2301      	movs	r3, #1
 80028a8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ac:	4b4f      	ldr	r3, [pc, #316]	; (80029ec <HAL_RCC_OscConfig+0x938>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d11a      	bne.n	80028ee <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028b8:	4b4c      	ldr	r3, [pc, #304]	; (80029ec <HAL_RCC_OscConfig+0x938>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a4b      	ldr	r2, [pc, #300]	; (80029ec <HAL_RCC_OscConfig+0x938>)
 80028be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028c4:	f7fe fbee 	bl	80010a4 <HAL_GetTick>
 80028c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028cc:	e009      	b.n	80028e2 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ce:	f7fe fbe9 	bl	80010a4 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b64      	cmp	r3, #100	; 0x64
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e2e9      	b.n	8002eb6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e2:	4b42      	ldr	r3, [pc, #264]	; (80029ec <HAL_RCC_OscConfig+0x938>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0ef      	beq.n	80028ce <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028ee:	1d3b      	adds	r3, r7, #4
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d106      	bne.n	8002906 <HAL_RCC_OscConfig+0x852>
 80028f8:	4b3a      	ldr	r3, [pc, #232]	; (80029e4 <HAL_RCC_OscConfig+0x930>)
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	4a39      	ldr	r2, [pc, #228]	; (80029e4 <HAL_RCC_OscConfig+0x930>)
 80028fe:	f043 0301 	orr.w	r3, r3, #1
 8002902:	6213      	str	r3, [r2, #32]
 8002904:	e02f      	b.n	8002966 <HAL_RCC_OscConfig+0x8b2>
 8002906:	1d3b      	adds	r3, r7, #4
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10c      	bne.n	800292a <HAL_RCC_OscConfig+0x876>
 8002910:	4b34      	ldr	r3, [pc, #208]	; (80029e4 <HAL_RCC_OscConfig+0x930>)
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	4a33      	ldr	r2, [pc, #204]	; (80029e4 <HAL_RCC_OscConfig+0x930>)
 8002916:	f023 0301 	bic.w	r3, r3, #1
 800291a:	6213      	str	r3, [r2, #32]
 800291c:	4b31      	ldr	r3, [pc, #196]	; (80029e4 <HAL_RCC_OscConfig+0x930>)
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	4a30      	ldr	r2, [pc, #192]	; (80029e4 <HAL_RCC_OscConfig+0x930>)
 8002922:	f023 0304 	bic.w	r3, r3, #4
 8002926:	6213      	str	r3, [r2, #32]
 8002928:	e01d      	b.n	8002966 <HAL_RCC_OscConfig+0x8b2>
 800292a:	1d3b      	adds	r3, r7, #4
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	2b05      	cmp	r3, #5
 8002932:	d10c      	bne.n	800294e <HAL_RCC_OscConfig+0x89a>
 8002934:	4b2b      	ldr	r3, [pc, #172]	; (80029e4 <HAL_RCC_OscConfig+0x930>)
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	4a2a      	ldr	r2, [pc, #168]	; (80029e4 <HAL_RCC_OscConfig+0x930>)
 800293a:	f043 0304 	orr.w	r3, r3, #4
 800293e:	6213      	str	r3, [r2, #32]
 8002940:	4b28      	ldr	r3, [pc, #160]	; (80029e4 <HAL_RCC_OscConfig+0x930>)
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	4a27      	ldr	r2, [pc, #156]	; (80029e4 <HAL_RCC_OscConfig+0x930>)
 8002946:	f043 0301 	orr.w	r3, r3, #1
 800294a:	6213      	str	r3, [r2, #32]
 800294c:	e00b      	b.n	8002966 <HAL_RCC_OscConfig+0x8b2>
 800294e:	4b25      	ldr	r3, [pc, #148]	; (80029e4 <HAL_RCC_OscConfig+0x930>)
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	4a24      	ldr	r2, [pc, #144]	; (80029e4 <HAL_RCC_OscConfig+0x930>)
 8002954:	f023 0301 	bic.w	r3, r3, #1
 8002958:	6213      	str	r3, [r2, #32]
 800295a:	4b22      	ldr	r3, [pc, #136]	; (80029e4 <HAL_RCC_OscConfig+0x930>)
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	4a21      	ldr	r2, [pc, #132]	; (80029e4 <HAL_RCC_OscConfig+0x930>)
 8002960:	f023 0304 	bic.w	r3, r3, #4
 8002964:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002966:	1d3b      	adds	r3, r7, #4
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d06b      	beq.n	8002a48 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002970:	f7fe fb98 	bl	80010a4 <HAL_GetTick>
 8002974:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002978:	e00b      	b.n	8002992 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800297a:	f7fe fb93 	bl	80010a4 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	f241 3288 	movw	r2, #5000	; 0x1388
 800298a:	4293      	cmp	r3, r2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e291      	b.n	8002eb6 <HAL_RCC_OscConfig+0xe02>
 8002992:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002996:	2202      	movs	r2, #2
 8002998:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	fa93 f2a3 	rbit	r2, r3
 80029a4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80029ae:	2202      	movs	r2, #2
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	fa93 f2a3 	rbit	r2, r3
 80029bc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80029c0:	601a      	str	r2, [r3, #0]
  return result;
 80029c2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80029c6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c8:	fab3 f383 	clz	r3, r3
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	095b      	lsrs	r3, r3, #5
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	f043 0302 	orr.w	r3, r3, #2
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d109      	bne.n	80029f0 <HAL_RCC_OscConfig+0x93c>
 80029dc:	4b01      	ldr	r3, [pc, #4]	; (80029e4 <HAL_RCC_OscConfig+0x930>)
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	e014      	b.n	8002a0c <HAL_RCC_OscConfig+0x958>
 80029e2:	bf00      	nop
 80029e4:	40021000 	.word	0x40021000
 80029e8:	10908120 	.word	0x10908120
 80029ec:	40007000 	.word	0x40007000
 80029f0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80029f4:	2202      	movs	r2, #2
 80029f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	fa93 f2a3 	rbit	r2, r3
 8002a02:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	4bbb      	ldr	r3, [pc, #748]	; (8002cf8 <HAL_RCC_OscConfig+0xc44>)
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002a10:	2102      	movs	r1, #2
 8002a12:	6011      	str	r1, [r2, #0]
 8002a14:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002a18:	6812      	ldr	r2, [r2, #0]
 8002a1a:	fa92 f1a2 	rbit	r1, r2
 8002a1e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002a22:	6011      	str	r1, [r2, #0]
  return result;
 8002a24:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002a28:	6812      	ldr	r2, [r2, #0]
 8002a2a:	fab2 f282 	clz	r2, r2
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a34:	b2d2      	uxtb	r2, r2
 8002a36:	f002 021f 	and.w	r2, r2, #31
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a40:	4013      	ands	r3, r2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d099      	beq.n	800297a <HAL_RCC_OscConfig+0x8c6>
 8002a46:	e063      	b.n	8002b10 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a48:	f7fe fb2c 	bl	80010a4 <HAL_GetTick>
 8002a4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a50:	e00b      	b.n	8002a6a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a52:	f7fe fb27 	bl	80010a4 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e225      	b.n	8002eb6 <HAL_RCC_OscConfig+0xe02>
 8002a6a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002a6e:	2202      	movs	r2, #2
 8002a70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a72:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	fa93 f2a3 	rbit	r2, r3
 8002a7c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002a86:	2202      	movs	r2, #2
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	fa93 f2a3 	rbit	r2, r3
 8002a94:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002a98:	601a      	str	r2, [r3, #0]
  return result;
 8002a9a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002a9e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aa0:	fab3 f383 	clz	r3, r3
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	095b      	lsrs	r3, r3, #5
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	f043 0302 	orr.w	r3, r3, #2
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d102      	bne.n	8002aba <HAL_RCC_OscConfig+0xa06>
 8002ab4:	4b90      	ldr	r3, [pc, #576]	; (8002cf8 <HAL_RCC_OscConfig+0xc44>)
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	e00d      	b.n	8002ad6 <HAL_RCC_OscConfig+0xa22>
 8002aba:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002abe:	2202      	movs	r2, #2
 8002ac0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	fa93 f2a3 	rbit	r2, r3
 8002acc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	4b89      	ldr	r3, [pc, #548]	; (8002cf8 <HAL_RCC_OscConfig+0xc44>)
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002ada:	2102      	movs	r1, #2
 8002adc:	6011      	str	r1, [r2, #0]
 8002ade:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002ae2:	6812      	ldr	r2, [r2, #0]
 8002ae4:	fa92 f1a2 	rbit	r1, r2
 8002ae8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002aec:	6011      	str	r1, [r2, #0]
  return result;
 8002aee:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002af2:	6812      	ldr	r2, [r2, #0]
 8002af4:	fab2 f282 	clz	r2, r2
 8002af8:	b2d2      	uxtb	r2, r2
 8002afa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	f002 021f 	and.w	r2, r2, #31
 8002b04:	2101      	movs	r1, #1
 8002b06:	fa01 f202 	lsl.w	r2, r1, r2
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1a0      	bne.n	8002a52 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b10:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d105      	bne.n	8002b24 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b18:	4b77      	ldr	r3, [pc, #476]	; (8002cf8 <HAL_RCC_OscConfig+0xc44>)
 8002b1a:	69db      	ldr	r3, [r3, #28]
 8002b1c:	4a76      	ldr	r2, [pc, #472]	; (8002cf8 <HAL_RCC_OscConfig+0xc44>)
 8002b1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b22:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b24:	1d3b      	adds	r3, r7, #4
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f000 81c2 	beq.w	8002eb4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b30:	4b71      	ldr	r3, [pc, #452]	; (8002cf8 <HAL_RCC_OscConfig+0xc44>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f003 030c 	and.w	r3, r3, #12
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	f000 819c 	beq.w	8002e76 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b3e:	1d3b      	adds	r3, r7, #4
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	69db      	ldr	r3, [r3, #28]
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	f040 8114 	bne.w	8002d72 <HAL_RCC_OscConfig+0xcbe>
 8002b4a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002b4e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b54:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	fa93 f2a3 	rbit	r2, r3
 8002b5e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002b62:	601a      	str	r2, [r3, #0]
  return result;
 8002b64:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002b68:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b6a:	fab3 f383 	clz	r3, r3
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b74:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b80:	f7fe fa90 	bl	80010a4 <HAL_GetTick>
 8002b84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b88:	e009      	b.n	8002b9e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b8a:	f7fe fa8b 	bl	80010a4 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e18b      	b.n	8002eb6 <HAL_RCC_OscConfig+0xe02>
 8002b9e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002ba2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ba6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	fa93 f2a3 	rbit	r2, r3
 8002bb2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002bb6:	601a      	str	r2, [r3, #0]
  return result;
 8002bb8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002bbc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bbe:	fab3 f383 	clz	r3, r3
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	095b      	lsrs	r3, r3, #5
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d102      	bne.n	8002bd8 <HAL_RCC_OscConfig+0xb24>
 8002bd2:	4b49      	ldr	r3, [pc, #292]	; (8002cf8 <HAL_RCC_OscConfig+0xc44>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	e01b      	b.n	8002c10 <HAL_RCC_OscConfig+0xb5c>
 8002bd8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002bdc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002be0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	fa93 f2a3 	rbit	r2, r3
 8002bec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002bf6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	fa93 f2a3 	rbit	r2, r3
 8002c06:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	4b3a      	ldr	r3, [pc, #232]	; (8002cf8 <HAL_RCC_OscConfig+0xc44>)
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002c14:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c18:	6011      	str	r1, [r2, #0]
 8002c1a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002c1e:	6812      	ldr	r2, [r2, #0]
 8002c20:	fa92 f1a2 	rbit	r1, r2
 8002c24:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002c28:	6011      	str	r1, [r2, #0]
  return result;
 8002c2a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002c2e:	6812      	ldr	r2, [r2, #0]
 8002c30:	fab2 f282 	clz	r2, r2
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	f042 0220 	orr.w	r2, r2, #32
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	f002 021f 	and.w	r2, r2, #31
 8002c40:	2101      	movs	r1, #1
 8002c42:	fa01 f202 	lsl.w	r2, r1, r2
 8002c46:	4013      	ands	r3, r2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d19e      	bne.n	8002b8a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c4c:	4b2a      	ldr	r3, [pc, #168]	; (8002cf8 <HAL_RCC_OscConfig+0xc44>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c54:	1d3b      	adds	r3, r7, #4
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002c5a:	1d3b      	adds	r3, r7, #4
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	430b      	orrs	r3, r1
 8002c62:	4925      	ldr	r1, [pc, #148]	; (8002cf8 <HAL_RCC_OscConfig+0xc44>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	604b      	str	r3, [r1, #4]
 8002c68:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002c6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c72:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	fa93 f2a3 	rbit	r2, r3
 8002c7c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c80:	601a      	str	r2, [r3, #0]
  return result;
 8002c82:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c86:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c88:	fab3 f383 	clz	r3, r3
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c92:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	461a      	mov	r2, r3
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9e:	f7fe fa01 	bl	80010a4 <HAL_GetTick>
 8002ca2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ca6:	e009      	b.n	8002cbc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ca8:	f7fe f9fc 	bl	80010a4 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e0fc      	b.n	8002eb6 <HAL_RCC_OscConfig+0xe02>
 8002cbc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002cc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	fa93 f2a3 	rbit	r2, r3
 8002cd0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002cd4:	601a      	str	r2, [r3, #0]
  return result;
 8002cd6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002cda:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cdc:	fab3 f383 	clz	r3, r3
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	095b      	lsrs	r3, r3, #5
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	f043 0301 	orr.w	r3, r3, #1
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d105      	bne.n	8002cfc <HAL_RCC_OscConfig+0xc48>
 8002cf0:	4b01      	ldr	r3, [pc, #4]	; (8002cf8 <HAL_RCC_OscConfig+0xc44>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	e01e      	b.n	8002d34 <HAL_RCC_OscConfig+0xc80>
 8002cf6:	bf00      	nop
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002d00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d06:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	fa93 f2a3 	rbit	r2, r3
 8002d10:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	fa93 f2a3 	rbit	r2, r3
 8002d2a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	4b63      	ldr	r3, [pc, #396]	; (8002ec0 <HAL_RCC_OscConfig+0xe0c>)
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002d38:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d3c:	6011      	str	r1, [r2, #0]
 8002d3e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002d42:	6812      	ldr	r2, [r2, #0]
 8002d44:	fa92 f1a2 	rbit	r1, r2
 8002d48:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002d4c:	6011      	str	r1, [r2, #0]
  return result;
 8002d4e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002d52:	6812      	ldr	r2, [r2, #0]
 8002d54:	fab2 f282 	clz	r2, r2
 8002d58:	b2d2      	uxtb	r2, r2
 8002d5a:	f042 0220 	orr.w	r2, r2, #32
 8002d5e:	b2d2      	uxtb	r2, r2
 8002d60:	f002 021f 	and.w	r2, r2, #31
 8002d64:	2101      	movs	r1, #1
 8002d66:	fa01 f202 	lsl.w	r2, r1, r2
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d09b      	beq.n	8002ca8 <HAL_RCC_OscConfig+0xbf4>
 8002d70:	e0a0      	b.n	8002eb4 <HAL_RCC_OscConfig+0xe00>
 8002d72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d76:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	fa93 f2a3 	rbit	r2, r3
 8002d86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d8a:	601a      	str	r2, [r3, #0]
  return result;
 8002d8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d90:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d92:	fab3 f383 	clz	r3, r3
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d9c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	461a      	mov	r2, r3
 8002da4:	2300      	movs	r3, #0
 8002da6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da8:	f7fe f97c 	bl	80010a4 <HAL_GetTick>
 8002dac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002db0:	e009      	b.n	8002dc6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db2:	f7fe f977 	bl	80010a4 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e077      	b.n	8002eb6 <HAL_RCC_OscConfig+0xe02>
 8002dc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	fa93 f2a3 	rbit	r2, r3
 8002dda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dde:	601a      	str	r2, [r3, #0]
  return result;
 8002de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002de4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002de6:	fab3 f383 	clz	r3, r3
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	095b      	lsrs	r3, r3, #5
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	f043 0301 	orr.w	r3, r3, #1
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d102      	bne.n	8002e00 <HAL_RCC_OscConfig+0xd4c>
 8002dfa:	4b31      	ldr	r3, [pc, #196]	; (8002ec0 <HAL_RCC_OscConfig+0xe0c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	e01b      	b.n	8002e38 <HAL_RCC_OscConfig+0xd84>
 8002e00:	f107 0320 	add.w	r3, r7, #32
 8002e04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0a:	f107 0320 	add.w	r3, r7, #32
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	fa93 f2a3 	rbit	r2, r3
 8002e14:	f107 031c 	add.w	r3, r7, #28
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	f107 0318 	add.w	r3, r7, #24
 8002e1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	f107 0318 	add.w	r3, r7, #24
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	fa93 f2a3 	rbit	r2, r3
 8002e2e:	f107 0314 	add.w	r3, r7, #20
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	4b22      	ldr	r3, [pc, #136]	; (8002ec0 <HAL_RCC_OscConfig+0xe0c>)
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	f107 0210 	add.w	r2, r7, #16
 8002e3c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e40:	6011      	str	r1, [r2, #0]
 8002e42:	f107 0210 	add.w	r2, r7, #16
 8002e46:	6812      	ldr	r2, [r2, #0]
 8002e48:	fa92 f1a2 	rbit	r1, r2
 8002e4c:	f107 020c 	add.w	r2, r7, #12
 8002e50:	6011      	str	r1, [r2, #0]
  return result;
 8002e52:	f107 020c 	add.w	r2, r7, #12
 8002e56:	6812      	ldr	r2, [r2, #0]
 8002e58:	fab2 f282 	clz	r2, r2
 8002e5c:	b2d2      	uxtb	r2, r2
 8002e5e:	f042 0220 	orr.w	r2, r2, #32
 8002e62:	b2d2      	uxtb	r2, r2
 8002e64:	f002 021f 	and.w	r2, r2, #31
 8002e68:	2101      	movs	r1, #1
 8002e6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e6e:	4013      	ands	r3, r2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d19e      	bne.n	8002db2 <HAL_RCC_OscConfig+0xcfe>
 8002e74:	e01e      	b.n	8002eb4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e76:	1d3b      	adds	r3, r7, #4
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d101      	bne.n	8002e84 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e018      	b.n	8002eb6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e84:	4b0e      	ldr	r3, [pc, #56]	; (8002ec0 <HAL_RCC_OscConfig+0xe0c>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e8c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002e90:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e94:	1d3b      	adds	r3, r7, #4
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d108      	bne.n	8002eb0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002e9e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002ea2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ea6:	1d3b      	adds	r3, r7, #4
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d001      	beq.n	8002eb4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e000      	b.n	8002eb6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40021000 	.word	0x40021000

08002ec4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b09e      	sub	sp, #120	; 0x78
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e162      	b.n	80031a2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002edc:	4b90      	ldr	r3, [pc, #576]	; (8003120 <HAL_RCC_ClockConfig+0x25c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d910      	bls.n	8002f0c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eea:	4b8d      	ldr	r3, [pc, #564]	; (8003120 <HAL_RCC_ClockConfig+0x25c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f023 0207 	bic.w	r2, r3, #7
 8002ef2:	498b      	ldr	r1, [pc, #556]	; (8003120 <HAL_RCC_ClockConfig+0x25c>)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efa:	4b89      	ldr	r3, [pc, #548]	; (8003120 <HAL_RCC_ClockConfig+0x25c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d001      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e14a      	b.n	80031a2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d008      	beq.n	8002f2a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f18:	4b82      	ldr	r3, [pc, #520]	; (8003124 <HAL_RCC_ClockConfig+0x260>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	497f      	ldr	r1, [pc, #508]	; (8003124 <HAL_RCC_ClockConfig+0x260>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f000 80dc 	beq.w	80030f0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d13c      	bne.n	8002fba <HAL_RCC_ClockConfig+0xf6>
 8002f40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f44:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f48:	fa93 f3a3 	rbit	r3, r3
 8002f4c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f50:	fab3 f383 	clz	r3, r3
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	095b      	lsrs	r3, r3, #5
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	f043 0301 	orr.w	r3, r3, #1
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d102      	bne.n	8002f6a <HAL_RCC_ClockConfig+0xa6>
 8002f64:	4b6f      	ldr	r3, [pc, #444]	; (8003124 <HAL_RCC_ClockConfig+0x260>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	e00f      	b.n	8002f8a <HAL_RCC_ClockConfig+0xc6>
 8002f6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f6e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f72:	fa93 f3a3 	rbit	r3, r3
 8002f76:	667b      	str	r3, [r7, #100]	; 0x64
 8002f78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f7c:	663b      	str	r3, [r7, #96]	; 0x60
 8002f7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f80:	fa93 f3a3 	rbit	r3, r3
 8002f84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f86:	4b67      	ldr	r3, [pc, #412]	; (8003124 <HAL_RCC_ClockConfig+0x260>)
 8002f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f8e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f92:	fa92 f2a2 	rbit	r2, r2
 8002f96:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002f98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f9a:	fab2 f282 	clz	r2, r2
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	f042 0220 	orr.w	r2, r2, #32
 8002fa4:	b2d2      	uxtb	r2, r2
 8002fa6:	f002 021f 	and.w	r2, r2, #31
 8002faa:	2101      	movs	r1, #1
 8002fac:	fa01 f202 	lsl.w	r2, r1, r2
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d17b      	bne.n	80030ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e0f3      	b.n	80031a2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d13c      	bne.n	800303c <HAL_RCC_ClockConfig+0x178>
 8002fc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fc6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fca:	fa93 f3a3 	rbit	r3, r3
 8002fce:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002fd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd2:	fab3 f383 	clz	r3, r3
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	095b      	lsrs	r3, r3, #5
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	f043 0301 	orr.w	r3, r3, #1
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d102      	bne.n	8002fec <HAL_RCC_ClockConfig+0x128>
 8002fe6:	4b4f      	ldr	r3, [pc, #316]	; (8003124 <HAL_RCC_ClockConfig+0x260>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	e00f      	b.n	800300c <HAL_RCC_ClockConfig+0x148>
 8002fec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ff0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ff4:	fa93 f3a3 	rbit	r3, r3
 8002ff8:	647b      	str	r3, [r7, #68]	; 0x44
 8002ffa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ffe:	643b      	str	r3, [r7, #64]	; 0x40
 8003000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003002:	fa93 f3a3 	rbit	r3, r3
 8003006:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003008:	4b46      	ldr	r3, [pc, #280]	; (8003124 <HAL_RCC_ClockConfig+0x260>)
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003010:	63ba      	str	r2, [r7, #56]	; 0x38
 8003012:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003014:	fa92 f2a2 	rbit	r2, r2
 8003018:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800301a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800301c:	fab2 f282 	clz	r2, r2
 8003020:	b2d2      	uxtb	r2, r2
 8003022:	f042 0220 	orr.w	r2, r2, #32
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	f002 021f 	and.w	r2, r2, #31
 800302c:	2101      	movs	r1, #1
 800302e:	fa01 f202 	lsl.w	r2, r1, r2
 8003032:	4013      	ands	r3, r2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d13a      	bne.n	80030ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e0b2      	b.n	80031a2 <HAL_RCC_ClockConfig+0x2de>
 800303c:	2302      	movs	r3, #2
 800303e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003042:	fa93 f3a3 	rbit	r3, r3
 8003046:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800304a:	fab3 f383 	clz	r3, r3
 800304e:	b2db      	uxtb	r3, r3
 8003050:	095b      	lsrs	r3, r3, #5
 8003052:	b2db      	uxtb	r3, r3
 8003054:	f043 0301 	orr.w	r3, r3, #1
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b01      	cmp	r3, #1
 800305c:	d102      	bne.n	8003064 <HAL_RCC_ClockConfig+0x1a0>
 800305e:	4b31      	ldr	r3, [pc, #196]	; (8003124 <HAL_RCC_ClockConfig+0x260>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	e00d      	b.n	8003080 <HAL_RCC_ClockConfig+0x1bc>
 8003064:	2302      	movs	r3, #2
 8003066:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306a:	fa93 f3a3 	rbit	r3, r3
 800306e:	627b      	str	r3, [r7, #36]	; 0x24
 8003070:	2302      	movs	r3, #2
 8003072:	623b      	str	r3, [r7, #32]
 8003074:	6a3b      	ldr	r3, [r7, #32]
 8003076:	fa93 f3a3 	rbit	r3, r3
 800307a:	61fb      	str	r3, [r7, #28]
 800307c:	4b29      	ldr	r3, [pc, #164]	; (8003124 <HAL_RCC_ClockConfig+0x260>)
 800307e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003080:	2202      	movs	r2, #2
 8003082:	61ba      	str	r2, [r7, #24]
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	fa92 f2a2 	rbit	r2, r2
 800308a:	617a      	str	r2, [r7, #20]
  return result;
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	fab2 f282 	clz	r2, r2
 8003092:	b2d2      	uxtb	r2, r2
 8003094:	f042 0220 	orr.w	r2, r2, #32
 8003098:	b2d2      	uxtb	r2, r2
 800309a:	f002 021f 	and.w	r2, r2, #31
 800309e:	2101      	movs	r1, #1
 80030a0:	fa01 f202 	lsl.w	r2, r1, r2
 80030a4:	4013      	ands	r3, r2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e079      	b.n	80031a2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030ae:	4b1d      	ldr	r3, [pc, #116]	; (8003124 <HAL_RCC_ClockConfig+0x260>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f023 0203 	bic.w	r2, r3, #3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	491a      	ldr	r1, [pc, #104]	; (8003124 <HAL_RCC_ClockConfig+0x260>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030c0:	f7fd fff0 	bl	80010a4 <HAL_GetTick>
 80030c4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c6:	e00a      	b.n	80030de <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c8:	f7fd ffec 	bl	80010a4 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e061      	b.n	80031a2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030de:	4b11      	ldr	r3, [pc, #68]	; (8003124 <HAL_RCC_ClockConfig+0x260>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f003 020c 	and.w	r2, r3, #12
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d1eb      	bne.n	80030c8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030f0:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <HAL_RCC_ClockConfig+0x25c>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d214      	bcs.n	8003128 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030fe:	4b08      	ldr	r3, [pc, #32]	; (8003120 <HAL_RCC_ClockConfig+0x25c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f023 0207 	bic.w	r2, r3, #7
 8003106:	4906      	ldr	r1, [pc, #24]	; (8003120 <HAL_RCC_ClockConfig+0x25c>)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	4313      	orrs	r3, r2
 800310c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800310e:	4b04      	ldr	r3, [pc, #16]	; (8003120 <HAL_RCC_ClockConfig+0x25c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	429a      	cmp	r2, r3
 800311a:	d005      	beq.n	8003128 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e040      	b.n	80031a2 <HAL_RCC_ClockConfig+0x2de>
 8003120:	40022000 	.word	0x40022000
 8003124:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b00      	cmp	r3, #0
 8003132:	d008      	beq.n	8003146 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003134:	4b1d      	ldr	r3, [pc, #116]	; (80031ac <HAL_RCC_ClockConfig+0x2e8>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	491a      	ldr	r1, [pc, #104]	; (80031ac <HAL_RCC_ClockConfig+0x2e8>)
 8003142:	4313      	orrs	r3, r2
 8003144:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0308 	and.w	r3, r3, #8
 800314e:	2b00      	cmp	r3, #0
 8003150:	d009      	beq.n	8003166 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003152:	4b16      	ldr	r3, [pc, #88]	; (80031ac <HAL_RCC_ClockConfig+0x2e8>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	4912      	ldr	r1, [pc, #72]	; (80031ac <HAL_RCC_ClockConfig+0x2e8>)
 8003162:	4313      	orrs	r3, r2
 8003164:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003166:	f000 f829 	bl	80031bc <HAL_RCC_GetSysClockFreq>
 800316a:	4601      	mov	r1, r0
 800316c:	4b0f      	ldr	r3, [pc, #60]	; (80031ac <HAL_RCC_ClockConfig+0x2e8>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003174:	22f0      	movs	r2, #240	; 0xf0
 8003176:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	fa92 f2a2 	rbit	r2, r2
 800317e:	60fa      	str	r2, [r7, #12]
  return result;
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	fab2 f282 	clz	r2, r2
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	40d3      	lsrs	r3, r2
 800318a:	4a09      	ldr	r2, [pc, #36]	; (80031b0 <HAL_RCC_ClockConfig+0x2ec>)
 800318c:	5cd3      	ldrb	r3, [r2, r3]
 800318e:	fa21 f303 	lsr.w	r3, r1, r3
 8003192:	4a08      	ldr	r2, [pc, #32]	; (80031b4 <HAL_RCC_ClockConfig+0x2f0>)
 8003194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003196:	4b08      	ldr	r3, [pc, #32]	; (80031b8 <HAL_RCC_ClockConfig+0x2f4>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4618      	mov	r0, r3
 800319c:	f7fd ff3e 	bl	800101c <HAL_InitTick>
  
  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3778      	adds	r7, #120	; 0x78
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	40021000 	.word	0x40021000
 80031b0:	0800536c 	.word	0x0800536c
 80031b4:	20000000 	.word	0x20000000
 80031b8:	20000004 	.word	0x20000004

080031bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	b08b      	sub	sp, #44	; 0x2c
 80031c0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031c2:	2300      	movs	r3, #0
 80031c4:	61fb      	str	r3, [r7, #28]
 80031c6:	2300      	movs	r3, #0
 80031c8:	61bb      	str	r3, [r7, #24]
 80031ca:	2300      	movs	r3, #0
 80031cc:	627b      	str	r3, [r7, #36]	; 0x24
 80031ce:	2300      	movs	r3, #0
 80031d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80031d2:	2300      	movs	r3, #0
 80031d4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80031d6:	4b29      	ldr	r3, [pc, #164]	; (800327c <HAL_RCC_GetSysClockFreq+0xc0>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	f003 030c 	and.w	r3, r3, #12
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d002      	beq.n	80031ec <HAL_RCC_GetSysClockFreq+0x30>
 80031e6:	2b08      	cmp	r3, #8
 80031e8:	d003      	beq.n	80031f2 <HAL_RCC_GetSysClockFreq+0x36>
 80031ea:	e03c      	b.n	8003266 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031ec:	4b24      	ldr	r3, [pc, #144]	; (8003280 <HAL_RCC_GetSysClockFreq+0xc4>)
 80031ee:	623b      	str	r3, [r7, #32]
      break;
 80031f0:	e03c      	b.n	800326c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80031f8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80031fc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	fa92 f2a2 	rbit	r2, r2
 8003204:	607a      	str	r2, [r7, #4]
  return result;
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	fab2 f282 	clz	r2, r2
 800320c:	b2d2      	uxtb	r2, r2
 800320e:	40d3      	lsrs	r3, r2
 8003210:	4a1c      	ldr	r2, [pc, #112]	; (8003284 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003212:	5cd3      	ldrb	r3, [r2, r3]
 8003214:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003216:	4b19      	ldr	r3, [pc, #100]	; (800327c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	220f      	movs	r2, #15
 8003220:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	fa92 f2a2 	rbit	r2, r2
 8003228:	60fa      	str	r2, [r7, #12]
  return result;
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	fab2 f282 	clz	r2, r2
 8003230:	b2d2      	uxtb	r2, r2
 8003232:	40d3      	lsrs	r3, r2
 8003234:	4a14      	ldr	r2, [pc, #80]	; (8003288 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003236:	5cd3      	ldrb	r3, [r2, r3]
 8003238:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d008      	beq.n	8003256 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003244:	4a0e      	ldr	r2, [pc, #56]	; (8003280 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	fbb2 f2f3 	udiv	r2, r2, r3
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	fb02 f303 	mul.w	r3, r2, r3
 8003252:	627b      	str	r3, [r7, #36]	; 0x24
 8003254:	e004      	b.n	8003260 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	4a0c      	ldr	r2, [pc, #48]	; (800328c <HAL_RCC_GetSysClockFreq+0xd0>)
 800325a:	fb02 f303 	mul.w	r3, r2, r3
 800325e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	623b      	str	r3, [r7, #32]
      break;
 8003264:	e002      	b.n	800326c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003266:	4b06      	ldr	r3, [pc, #24]	; (8003280 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003268:	623b      	str	r3, [r7, #32]
      break;
 800326a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800326c:	6a3b      	ldr	r3, [r7, #32]
}
 800326e:	4618      	mov	r0, r3
 8003270:	372c      	adds	r7, #44	; 0x2c
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	40021000 	.word	0x40021000
 8003280:	007a1200 	.word	0x007a1200
 8003284:	08005384 	.word	0x08005384
 8003288:	08005394 	.word	0x08005394
 800328c:	003d0900 	.word	0x003d0900

08003290 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003294:	4b03      	ldr	r3, [pc, #12]	; (80032a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003296:	681b      	ldr	r3, [r3, #0]
}
 8003298:	4618      	mov	r0, r3
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	20000000 	.word	0x20000000

080032a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80032ae:	f7ff ffef 	bl	8003290 <HAL_RCC_GetHCLKFreq>
 80032b2:	4601      	mov	r1, r0
 80032b4:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80032bc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80032c0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	fa92 f2a2 	rbit	r2, r2
 80032c8:	603a      	str	r2, [r7, #0]
  return result;
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	fab2 f282 	clz	r2, r2
 80032d0:	b2d2      	uxtb	r2, r2
 80032d2:	40d3      	lsrs	r3, r2
 80032d4:	4a04      	ldr	r2, [pc, #16]	; (80032e8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80032d6:	5cd3      	ldrb	r3, [r2, r3]
 80032d8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80032dc:	4618      	mov	r0, r3
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40021000 	.word	0x40021000
 80032e8:	0800537c 	.word	0x0800537c

080032ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80032f2:	f7ff ffcd 	bl	8003290 <HAL_RCC_GetHCLKFreq>
 80032f6:	4601      	mov	r1, r0
 80032f8:	4b0b      	ldr	r3, [pc, #44]	; (8003328 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003300:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003304:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	fa92 f2a2 	rbit	r2, r2
 800330c:	603a      	str	r2, [r7, #0]
  return result;
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	fab2 f282 	clz	r2, r2
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	40d3      	lsrs	r3, r2
 8003318:	4a04      	ldr	r2, [pc, #16]	; (800332c <HAL_RCC_GetPCLK2Freq+0x40>)
 800331a:	5cd3      	ldrb	r3, [r2, r3]
 800331c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003320:	4618      	mov	r0, r3
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40021000 	.word	0x40021000
 800332c:	0800537c 	.word	0x0800537c

08003330 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b092      	sub	sp, #72	; 0x48
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003338:	2300      	movs	r3, #0
 800333a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800333c:	2300      	movs	r3, #0
 800333e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003340:	2300      	movs	r3, #0
 8003342:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800334e:	2b00      	cmp	r3, #0
 8003350:	f000 80cd 	beq.w	80034ee <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003354:	4b86      	ldr	r3, [pc, #536]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003356:	69db      	ldr	r3, [r3, #28]
 8003358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d10e      	bne.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003360:	4b83      	ldr	r3, [pc, #524]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003362:	69db      	ldr	r3, [r3, #28]
 8003364:	4a82      	ldr	r2, [pc, #520]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003366:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800336a:	61d3      	str	r3, [r2, #28]
 800336c:	4b80      	ldr	r3, [pc, #512]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003374:	60bb      	str	r3, [r7, #8]
 8003376:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003378:	2301      	movs	r3, #1
 800337a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800337e:	4b7d      	ldr	r3, [pc, #500]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003386:	2b00      	cmp	r3, #0
 8003388:	d118      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800338a:	4b7a      	ldr	r3, [pc, #488]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a79      	ldr	r2, [pc, #484]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003394:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003396:	f7fd fe85 	bl	80010a4 <HAL_GetTick>
 800339a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800339c:	e008      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800339e:	f7fd fe81 	bl	80010a4 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b64      	cmp	r3, #100	; 0x64
 80033aa:	d901      	bls.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e0db      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b0:	4b70      	ldr	r3, [pc, #448]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d0f0      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033bc:	4b6c      	ldr	r3, [pc, #432]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d07d      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d076      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033da:	4b65      	ldr	r3, [pc, #404]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033e8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ec:	fa93 f3a3 	rbit	r3, r3
 80033f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80033f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033f4:	fab3 f383 	clz	r3, r3
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	461a      	mov	r2, r3
 80033fc:	4b5e      	ldr	r3, [pc, #376]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80033fe:	4413      	add	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	461a      	mov	r2, r3
 8003404:	2301      	movs	r3, #1
 8003406:	6013      	str	r3, [r2, #0]
 8003408:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800340c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003410:	fa93 f3a3 	rbit	r3, r3
 8003414:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003418:	fab3 f383 	clz	r3, r3
 800341c:	b2db      	uxtb	r3, r3
 800341e:	461a      	mov	r2, r3
 8003420:	4b55      	ldr	r3, [pc, #340]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003422:	4413      	add	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	461a      	mov	r2, r3
 8003428:	2300      	movs	r3, #0
 800342a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800342c:	4a50      	ldr	r2, [pc, #320]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800342e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003430:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b00      	cmp	r3, #0
 800343a:	d045      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343c:	f7fd fe32 	bl	80010a4 <HAL_GetTick>
 8003440:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003442:	e00a      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003444:	f7fd fe2e 	bl	80010a4 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003452:	4293      	cmp	r3, r2
 8003454:	d901      	bls.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e086      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800345a:	2302      	movs	r3, #2
 800345c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003460:	fa93 f3a3 	rbit	r3, r3
 8003464:	627b      	str	r3, [r7, #36]	; 0x24
 8003466:	2302      	movs	r3, #2
 8003468:	623b      	str	r3, [r7, #32]
 800346a:	6a3b      	ldr	r3, [r7, #32]
 800346c:	fa93 f3a3 	rbit	r3, r3
 8003470:	61fb      	str	r3, [r7, #28]
  return result;
 8003472:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003474:	fab3 f383 	clz	r3, r3
 8003478:	b2db      	uxtb	r3, r3
 800347a:	095b      	lsrs	r3, r3, #5
 800347c:	b2db      	uxtb	r3, r3
 800347e:	f043 0302 	orr.w	r3, r3, #2
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d102      	bne.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003488:	4b39      	ldr	r3, [pc, #228]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	e007      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800348e:	2302      	movs	r3, #2
 8003490:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	fa93 f3a3 	rbit	r3, r3
 8003498:	617b      	str	r3, [r7, #20]
 800349a:	4b35      	ldr	r3, [pc, #212]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	2202      	movs	r2, #2
 80034a0:	613a      	str	r2, [r7, #16]
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	fa92 f2a2 	rbit	r2, r2
 80034a8:	60fa      	str	r2, [r7, #12]
  return result;
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	fab2 f282 	clz	r2, r2
 80034b0:	b2d2      	uxtb	r2, r2
 80034b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	f002 021f 	and.w	r2, r2, #31
 80034bc:	2101      	movs	r1, #1
 80034be:	fa01 f202 	lsl.w	r2, r1, r2
 80034c2:	4013      	ands	r3, r2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0bd      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80034c8:	4b29      	ldr	r3, [pc, #164]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	4926      	ldr	r1, [pc, #152]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034da:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d105      	bne.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034e2:	4b23      	ldr	r3, [pc, #140]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	4a22      	ldr	r2, [pc, #136]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ec:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d008      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034fa:	4b1d      	ldr	r3, [pc, #116]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	f023 0203 	bic.w	r2, r3, #3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	491a      	ldr	r1, [pc, #104]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003508:	4313      	orrs	r3, r2
 800350a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0320 	and.w	r3, r3, #32
 8003514:	2b00      	cmp	r3, #0
 8003516:	d008      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003518:	4b15      	ldr	r3, [pc, #84]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800351a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351c:	f023 0210 	bic.w	r2, r3, #16
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	4912      	ldr	r1, [pc, #72]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003526:	4313      	orrs	r3, r2
 8003528:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003532:	2b00      	cmp	r3, #0
 8003534:	d008      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003536:	4b0e      	ldr	r3, [pc, #56]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	490b      	ldr	r1, [pc, #44]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003544:	4313      	orrs	r3, r2
 8003546:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d008      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003554:	4b06      	ldr	r3, [pc, #24]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003558:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	4903      	ldr	r1, [pc, #12]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003562:	4313      	orrs	r3, r2
 8003564:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3748      	adds	r7, #72	; 0x48
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	40021000 	.word	0x40021000
 8003574:	40007000 	.word	0x40007000
 8003578:	10908100 	.word	0x10908100

0800357c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e049      	b.n	8003622 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d106      	bne.n	80035a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7fd fbee 	bl	8000d84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2202      	movs	r2, #2
 80035ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3304      	adds	r3, #4
 80035b8:	4619      	mov	r1, r3
 80035ba:	4610      	mov	r0, r2
 80035bc:	f000 fa74 	bl	8003aa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b082      	sub	sp, #8
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d101      	bne.n	800363c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e049      	b.n	80036d0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	d106      	bne.n	8003656 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 f841 	bl	80036d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2202      	movs	r2, #2
 800365a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	3304      	adds	r3, #4
 8003666:	4619      	mov	r1, r3
 8003668:	4610      	mov	r0, r2
 800366a:	f000 fa1d 	bl	8003aa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3708      	adds	r7, #8
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036f8:	2300      	movs	r3, #0
 80036fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003702:	2b01      	cmp	r3, #1
 8003704:	d101      	bne.n	800370a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003706:	2302      	movs	r3, #2
 8003708:	e0ff      	b.n	800390a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b14      	cmp	r3, #20
 8003716:	f200 80f0 	bhi.w	80038fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800371a:	a201      	add	r2, pc, #4	; (adr r2, 8003720 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800371c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003720:	08003775 	.word	0x08003775
 8003724:	080038fb 	.word	0x080038fb
 8003728:	080038fb 	.word	0x080038fb
 800372c:	080038fb 	.word	0x080038fb
 8003730:	080037b5 	.word	0x080037b5
 8003734:	080038fb 	.word	0x080038fb
 8003738:	080038fb 	.word	0x080038fb
 800373c:	080038fb 	.word	0x080038fb
 8003740:	080037f7 	.word	0x080037f7
 8003744:	080038fb 	.word	0x080038fb
 8003748:	080038fb 	.word	0x080038fb
 800374c:	080038fb 	.word	0x080038fb
 8003750:	08003837 	.word	0x08003837
 8003754:	080038fb 	.word	0x080038fb
 8003758:	080038fb 	.word	0x080038fb
 800375c:	080038fb 	.word	0x080038fb
 8003760:	08003879 	.word	0x08003879
 8003764:	080038fb 	.word	0x080038fb
 8003768:	080038fb 	.word	0x080038fb
 800376c:	080038fb 	.word	0x080038fb
 8003770:	080038b9 	.word	0x080038b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68b9      	ldr	r1, [r7, #8]
 800377a:	4618      	mov	r0, r3
 800377c:	f000 fa0c 	bl	8003b98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	699a      	ldr	r2, [r3, #24]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0208 	orr.w	r2, r2, #8
 800378e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	699a      	ldr	r2, [r3, #24]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 0204 	bic.w	r2, r2, #4
 800379e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6999      	ldr	r1, [r3, #24]
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	691a      	ldr	r2, [r3, #16]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	619a      	str	r2, [r3, #24]
      break;
 80037b2:	e0a5      	b.n	8003900 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68b9      	ldr	r1, [r7, #8]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 fa72 	bl	8003ca4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	699a      	ldr	r2, [r3, #24]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	699a      	ldr	r2, [r3, #24]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6999      	ldr	r1, [r3, #24]
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	021a      	lsls	r2, r3, #8
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	430a      	orrs	r2, r1
 80037f2:	619a      	str	r2, [r3, #24]
      break;
 80037f4:	e084      	b.n	8003900 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68b9      	ldr	r1, [r7, #8]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f000 fad1 	bl	8003da4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	69da      	ldr	r2, [r3, #28]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f042 0208 	orr.w	r2, r2, #8
 8003810:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	69da      	ldr	r2, [r3, #28]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 0204 	bic.w	r2, r2, #4
 8003820:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	69d9      	ldr	r1, [r3, #28]
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	691a      	ldr	r2, [r3, #16]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	430a      	orrs	r2, r1
 8003832:	61da      	str	r2, [r3, #28]
      break;
 8003834:	e064      	b.n	8003900 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68b9      	ldr	r1, [r7, #8]
 800383c:	4618      	mov	r0, r3
 800383e:	f000 fb2f 	bl	8003ea0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	69da      	ldr	r2, [r3, #28]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003850:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	69da      	ldr	r2, [r3, #28]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003860:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	69d9      	ldr	r1, [r3, #28]
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	021a      	lsls	r2, r3, #8
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	430a      	orrs	r2, r1
 8003874:	61da      	str	r2, [r3, #28]
      break;
 8003876:	e043      	b.n	8003900 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68b9      	ldr	r1, [r7, #8]
 800387e:	4618      	mov	r0, r3
 8003880:	f000 fb72 	bl	8003f68 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0208 	orr.w	r2, r2, #8
 8003892:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0204 	bic.w	r2, r2, #4
 80038a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	691a      	ldr	r2, [r3, #16]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80038b6:	e023      	b.n	8003900 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68b9      	ldr	r1, [r7, #8]
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 fbb0 	bl	8004024 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	021a      	lsls	r2, r3, #8
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80038f8:	e002      	b.n	8003900 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	75fb      	strb	r3, [r7, #23]
      break;
 80038fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003908:	7dfb      	ldrb	r3, [r7, #23]
}
 800390a:	4618      	mov	r0, r3
 800390c:	3718      	adds	r7, #24
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop

08003914 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800391e:	2300      	movs	r3, #0
 8003920:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003928:	2b01      	cmp	r3, #1
 800392a:	d101      	bne.n	8003930 <HAL_TIM_ConfigClockSource+0x1c>
 800392c:	2302      	movs	r3, #2
 800392e:	e0b6      	b.n	8003a9e <HAL_TIM_ConfigClockSource+0x18a>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2202      	movs	r2, #2
 800393c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800394e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003952:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800395a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800396c:	d03e      	beq.n	80039ec <HAL_TIM_ConfigClockSource+0xd8>
 800396e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003972:	f200 8087 	bhi.w	8003a84 <HAL_TIM_ConfigClockSource+0x170>
 8003976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800397a:	f000 8086 	beq.w	8003a8a <HAL_TIM_ConfigClockSource+0x176>
 800397e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003982:	d87f      	bhi.n	8003a84 <HAL_TIM_ConfigClockSource+0x170>
 8003984:	2b70      	cmp	r3, #112	; 0x70
 8003986:	d01a      	beq.n	80039be <HAL_TIM_ConfigClockSource+0xaa>
 8003988:	2b70      	cmp	r3, #112	; 0x70
 800398a:	d87b      	bhi.n	8003a84 <HAL_TIM_ConfigClockSource+0x170>
 800398c:	2b60      	cmp	r3, #96	; 0x60
 800398e:	d050      	beq.n	8003a32 <HAL_TIM_ConfigClockSource+0x11e>
 8003990:	2b60      	cmp	r3, #96	; 0x60
 8003992:	d877      	bhi.n	8003a84 <HAL_TIM_ConfigClockSource+0x170>
 8003994:	2b50      	cmp	r3, #80	; 0x50
 8003996:	d03c      	beq.n	8003a12 <HAL_TIM_ConfigClockSource+0xfe>
 8003998:	2b50      	cmp	r3, #80	; 0x50
 800399a:	d873      	bhi.n	8003a84 <HAL_TIM_ConfigClockSource+0x170>
 800399c:	2b40      	cmp	r3, #64	; 0x40
 800399e:	d058      	beq.n	8003a52 <HAL_TIM_ConfigClockSource+0x13e>
 80039a0:	2b40      	cmp	r3, #64	; 0x40
 80039a2:	d86f      	bhi.n	8003a84 <HAL_TIM_ConfigClockSource+0x170>
 80039a4:	2b30      	cmp	r3, #48	; 0x30
 80039a6:	d064      	beq.n	8003a72 <HAL_TIM_ConfigClockSource+0x15e>
 80039a8:	2b30      	cmp	r3, #48	; 0x30
 80039aa:	d86b      	bhi.n	8003a84 <HAL_TIM_ConfigClockSource+0x170>
 80039ac:	2b20      	cmp	r3, #32
 80039ae:	d060      	beq.n	8003a72 <HAL_TIM_ConfigClockSource+0x15e>
 80039b0:	2b20      	cmp	r3, #32
 80039b2:	d867      	bhi.n	8003a84 <HAL_TIM_ConfigClockSource+0x170>
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d05c      	beq.n	8003a72 <HAL_TIM_ConfigClockSource+0x15e>
 80039b8:	2b10      	cmp	r3, #16
 80039ba:	d05a      	beq.n	8003a72 <HAL_TIM_ConfigClockSource+0x15e>
 80039bc:	e062      	b.n	8003a84 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6818      	ldr	r0, [r3, #0]
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	6899      	ldr	r1, [r3, #8]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	f000 fc03 	bl	80041d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80039e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	609a      	str	r2, [r3, #8]
      break;
 80039ea:	e04f      	b.n	8003a8c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6818      	ldr	r0, [r3, #0]
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	6899      	ldr	r1, [r3, #8]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	f000 fbec 	bl	80041d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689a      	ldr	r2, [r3, #8]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a0e:	609a      	str	r2, [r3, #8]
      break;
 8003a10:	e03c      	b.n	8003a8c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6818      	ldr	r0, [r3, #0]
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	6859      	ldr	r1, [r3, #4]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	f000 fb60 	bl	80040e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2150      	movs	r1, #80	; 0x50
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 fbb9 	bl	80041a2 <TIM_ITRx_SetConfig>
      break;
 8003a30:	e02c      	b.n	8003a8c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6818      	ldr	r0, [r3, #0]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	6859      	ldr	r1, [r3, #4]
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	f000 fb7f 	bl	8004142 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2160      	movs	r1, #96	; 0x60
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 fba9 	bl	80041a2 <TIM_ITRx_SetConfig>
      break;
 8003a50:	e01c      	b.n	8003a8c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6818      	ldr	r0, [r3, #0]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	6859      	ldr	r1, [r3, #4]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	f000 fb40 	bl	80040e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2140      	movs	r1, #64	; 0x40
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f000 fb99 	bl	80041a2 <TIM_ITRx_SetConfig>
      break;
 8003a70:	e00c      	b.n	8003a8c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	4610      	mov	r0, r2
 8003a7e:	f000 fb90 	bl	80041a2 <TIM_ITRx_SetConfig>
      break;
 8003a82:	e003      	b.n	8003a8c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	73fb      	strb	r3, [r7, #15]
      break;
 8003a88:	e000      	b.n	8003a8c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003a8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
	...

08003aa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a32      	ldr	r2, [pc, #200]	; (8003b84 <TIM_Base_SetConfig+0xdc>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d007      	beq.n	8003ad0 <TIM_Base_SetConfig+0x28>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac6:	d003      	beq.n	8003ad0 <TIM_Base_SetConfig+0x28>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a2f      	ldr	r2, [pc, #188]	; (8003b88 <TIM_Base_SetConfig+0xe0>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d108      	bne.n	8003ae2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ad6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a27      	ldr	r2, [pc, #156]	; (8003b84 <TIM_Base_SetConfig+0xdc>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d013      	beq.n	8003b12 <TIM_Base_SetConfig+0x6a>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003af0:	d00f      	beq.n	8003b12 <TIM_Base_SetConfig+0x6a>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a24      	ldr	r2, [pc, #144]	; (8003b88 <TIM_Base_SetConfig+0xe0>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d00b      	beq.n	8003b12 <TIM_Base_SetConfig+0x6a>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a23      	ldr	r2, [pc, #140]	; (8003b8c <TIM_Base_SetConfig+0xe4>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d007      	beq.n	8003b12 <TIM_Base_SetConfig+0x6a>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a22      	ldr	r2, [pc, #136]	; (8003b90 <TIM_Base_SetConfig+0xe8>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d003      	beq.n	8003b12 <TIM_Base_SetConfig+0x6a>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a21      	ldr	r2, [pc, #132]	; (8003b94 <TIM_Base_SetConfig+0xec>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d108      	bne.n	8003b24 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	689a      	ldr	r2, [r3, #8]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a0e      	ldr	r2, [pc, #56]	; (8003b84 <TIM_Base_SetConfig+0xdc>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d00b      	beq.n	8003b68 <TIM_Base_SetConfig+0xc0>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a0e      	ldr	r2, [pc, #56]	; (8003b8c <TIM_Base_SetConfig+0xe4>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d007      	beq.n	8003b68 <TIM_Base_SetConfig+0xc0>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a0d      	ldr	r2, [pc, #52]	; (8003b90 <TIM_Base_SetConfig+0xe8>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d003      	beq.n	8003b68 <TIM_Base_SetConfig+0xc0>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a0c      	ldr	r2, [pc, #48]	; (8003b94 <TIM_Base_SetConfig+0xec>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d103      	bne.n	8003b70 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	691a      	ldr	r2, [r3, #16]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	615a      	str	r2, [r3, #20]
}
 8003b76:	bf00      	nop
 8003b78:	3714      	adds	r7, #20
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	40012c00 	.word	0x40012c00
 8003b88:	40000400 	.word	0x40000400
 8003b8c:	40014000 	.word	0x40014000
 8003b90:	40014400 	.word	0x40014400
 8003b94:	40014800 	.word	0x40014800

08003b98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b087      	sub	sp, #28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	f023 0201 	bic.w	r2, r3, #1
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f023 0303 	bic.w	r3, r3, #3
 8003bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f023 0302 	bic.w	r3, r3, #2
 8003be4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a28      	ldr	r2, [pc, #160]	; (8003c94 <TIM_OC1_SetConfig+0xfc>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d00b      	beq.n	8003c10 <TIM_OC1_SetConfig+0x78>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a27      	ldr	r2, [pc, #156]	; (8003c98 <TIM_OC1_SetConfig+0x100>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d007      	beq.n	8003c10 <TIM_OC1_SetConfig+0x78>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a26      	ldr	r2, [pc, #152]	; (8003c9c <TIM_OC1_SetConfig+0x104>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d003      	beq.n	8003c10 <TIM_OC1_SetConfig+0x78>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a25      	ldr	r2, [pc, #148]	; (8003ca0 <TIM_OC1_SetConfig+0x108>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d10c      	bne.n	8003c2a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	f023 0308 	bic.w	r3, r3, #8
 8003c16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f023 0304 	bic.w	r3, r3, #4
 8003c28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a19      	ldr	r2, [pc, #100]	; (8003c94 <TIM_OC1_SetConfig+0xfc>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d00b      	beq.n	8003c4a <TIM_OC1_SetConfig+0xb2>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a18      	ldr	r2, [pc, #96]	; (8003c98 <TIM_OC1_SetConfig+0x100>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d007      	beq.n	8003c4a <TIM_OC1_SetConfig+0xb2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a17      	ldr	r2, [pc, #92]	; (8003c9c <TIM_OC1_SetConfig+0x104>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d003      	beq.n	8003c4a <TIM_OC1_SetConfig+0xb2>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a16      	ldr	r2, [pc, #88]	; (8003ca0 <TIM_OC1_SetConfig+0x108>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d111      	bne.n	8003c6e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	621a      	str	r2, [r3, #32]
}
 8003c88:	bf00      	nop
 8003c8a:	371c      	adds	r7, #28
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr
 8003c94:	40012c00 	.word	0x40012c00
 8003c98:	40014000 	.word	0x40014000
 8003c9c:	40014400 	.word	0x40014400
 8003ca0:	40014800 	.word	0x40014800

08003ca4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b087      	sub	sp, #28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	f023 0210 	bic.w	r2, r3, #16
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	021b      	lsls	r3, r3, #8
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	f023 0320 	bic.w	r3, r3, #32
 8003cf2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	011b      	lsls	r3, r3, #4
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a24      	ldr	r2, [pc, #144]	; (8003d94 <TIM_OC2_SetConfig+0xf0>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d10d      	bne.n	8003d24 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	011b      	lsls	r3, r3, #4
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a1b      	ldr	r2, [pc, #108]	; (8003d94 <TIM_OC2_SetConfig+0xf0>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d00b      	beq.n	8003d44 <TIM_OC2_SetConfig+0xa0>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a1a      	ldr	r2, [pc, #104]	; (8003d98 <TIM_OC2_SetConfig+0xf4>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d007      	beq.n	8003d44 <TIM_OC2_SetConfig+0xa0>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a19      	ldr	r2, [pc, #100]	; (8003d9c <TIM_OC2_SetConfig+0xf8>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d003      	beq.n	8003d44 <TIM_OC2_SetConfig+0xa0>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a18      	ldr	r2, [pc, #96]	; (8003da0 <TIM_OC2_SetConfig+0xfc>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d113      	bne.n	8003d6c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d4a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d52:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	621a      	str	r2, [r3, #32]
}
 8003d86:	bf00      	nop
 8003d88:	371c      	adds	r7, #28
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	40012c00 	.word	0x40012c00
 8003d98:	40014000 	.word	0x40014000
 8003d9c:	40014400 	.word	0x40014400
 8003da0:	40014800 	.word	0x40014800

08003da4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b087      	sub	sp, #28
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f023 0303 	bic.w	r3, r3, #3
 8003dde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003df0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	021b      	lsls	r3, r3, #8
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a23      	ldr	r2, [pc, #140]	; (8003e90 <TIM_OC3_SetConfig+0xec>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d10d      	bne.n	8003e22 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	021b      	lsls	r3, r3, #8
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e20:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a1a      	ldr	r2, [pc, #104]	; (8003e90 <TIM_OC3_SetConfig+0xec>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d00b      	beq.n	8003e42 <TIM_OC3_SetConfig+0x9e>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a19      	ldr	r2, [pc, #100]	; (8003e94 <TIM_OC3_SetConfig+0xf0>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d007      	beq.n	8003e42 <TIM_OC3_SetConfig+0x9e>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a18      	ldr	r2, [pc, #96]	; (8003e98 <TIM_OC3_SetConfig+0xf4>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d003      	beq.n	8003e42 <TIM_OC3_SetConfig+0x9e>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a17      	ldr	r2, [pc, #92]	; (8003e9c <TIM_OC3_SetConfig+0xf8>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d113      	bne.n	8003e6a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	011b      	lsls	r3, r3, #4
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	621a      	str	r2, [r3, #32]
}
 8003e84:	bf00      	nop
 8003e86:	371c      	adds	r7, #28
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr
 8003e90:	40012c00 	.word	0x40012c00
 8003e94:	40014000 	.word	0x40014000
 8003e98:	40014400 	.word	0x40014400
 8003e9c:	40014800 	.word	0x40014800

08003ea0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b087      	sub	sp, #28
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ece:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ed2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	021b      	lsls	r3, r3, #8
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003eee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	031b      	lsls	r3, r3, #12
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a16      	ldr	r2, [pc, #88]	; (8003f58 <TIM_OC4_SetConfig+0xb8>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d00b      	beq.n	8003f1c <TIM_OC4_SetConfig+0x7c>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a15      	ldr	r2, [pc, #84]	; (8003f5c <TIM_OC4_SetConfig+0xbc>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d007      	beq.n	8003f1c <TIM_OC4_SetConfig+0x7c>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a14      	ldr	r2, [pc, #80]	; (8003f60 <TIM_OC4_SetConfig+0xc0>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d003      	beq.n	8003f1c <TIM_OC4_SetConfig+0x7c>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a13      	ldr	r2, [pc, #76]	; (8003f64 <TIM_OC4_SetConfig+0xc4>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d109      	bne.n	8003f30 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	019b      	lsls	r3, r3, #6
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	621a      	str	r2, [r3, #32]
}
 8003f4a:	bf00      	nop
 8003f4c:	371c      	adds	r7, #28
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	40012c00 	.word	0x40012c00
 8003f5c:	40014000 	.word	0x40014000
 8003f60:	40014400 	.word	0x40014400
 8003f64:	40014800 	.word	0x40014800

08003f68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003fac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	041b      	lsls	r3, r3, #16
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a15      	ldr	r2, [pc, #84]	; (8004014 <TIM_OC5_SetConfig+0xac>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d00b      	beq.n	8003fda <TIM_OC5_SetConfig+0x72>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a14      	ldr	r2, [pc, #80]	; (8004018 <TIM_OC5_SetConfig+0xb0>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d007      	beq.n	8003fda <TIM_OC5_SetConfig+0x72>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a13      	ldr	r2, [pc, #76]	; (800401c <TIM_OC5_SetConfig+0xb4>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d003      	beq.n	8003fda <TIM_OC5_SetConfig+0x72>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a12      	ldr	r2, [pc, #72]	; (8004020 <TIM_OC5_SetConfig+0xb8>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d109      	bne.n	8003fee <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fe0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	021b      	lsls	r3, r3, #8
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	621a      	str	r2, [r3, #32]
}
 8004008:	bf00      	nop
 800400a:	371c      	adds	r7, #28
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr
 8004014:	40012c00 	.word	0x40012c00
 8004018:	40014000 	.word	0x40014000
 800401c:	40014400 	.word	0x40014400
 8004020:	40014800 	.word	0x40014800

08004024 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004024:	b480      	push	{r7}
 8004026:	b087      	sub	sp, #28
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800404a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004052:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	021b      	lsls	r3, r3, #8
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	4313      	orrs	r3, r2
 8004062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800406a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	051b      	lsls	r3, r3, #20
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	4313      	orrs	r3, r2
 8004076:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a16      	ldr	r2, [pc, #88]	; (80040d4 <TIM_OC6_SetConfig+0xb0>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d00b      	beq.n	8004098 <TIM_OC6_SetConfig+0x74>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a15      	ldr	r2, [pc, #84]	; (80040d8 <TIM_OC6_SetConfig+0xb4>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d007      	beq.n	8004098 <TIM_OC6_SetConfig+0x74>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a14      	ldr	r2, [pc, #80]	; (80040dc <TIM_OC6_SetConfig+0xb8>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d003      	beq.n	8004098 <TIM_OC6_SetConfig+0x74>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a13      	ldr	r2, [pc, #76]	; (80040e0 <TIM_OC6_SetConfig+0xbc>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d109      	bne.n	80040ac <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800409e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	029b      	lsls	r3, r3, #10
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	621a      	str	r2, [r3, #32]
}
 80040c6:	bf00      	nop
 80040c8:	371c      	adds	r7, #28
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	40012c00 	.word	0x40012c00
 80040d8:	40014000 	.word	0x40014000
 80040dc:	40014400 	.word	0x40014400
 80040e0:	40014800 	.word	0x40014800

080040e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b087      	sub	sp, #28
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	f023 0201 	bic.w	r2, r3, #1
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800410e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	011b      	lsls	r3, r3, #4
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	4313      	orrs	r3, r2
 8004118:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	f023 030a 	bic.w	r3, r3, #10
 8004120:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	4313      	orrs	r3, r2
 8004128:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	621a      	str	r2, [r3, #32]
}
 8004136:	bf00      	nop
 8004138:	371c      	adds	r7, #28
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004142:	b480      	push	{r7}
 8004144:	b087      	sub	sp, #28
 8004146:	af00      	add	r7, sp, #0
 8004148:	60f8      	str	r0, [r7, #12]
 800414a:	60b9      	str	r1, [r7, #8]
 800414c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	f023 0210 	bic.w	r2, r3, #16
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800416c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	031b      	lsls	r3, r3, #12
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	4313      	orrs	r3, r2
 8004176:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800417e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	011b      	lsls	r3, r3, #4
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	4313      	orrs	r3, r2
 8004188:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	621a      	str	r2, [r3, #32]
}
 8004196:	bf00      	nop
 8004198:	371c      	adds	r7, #28
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041a2:	b480      	push	{r7}
 80041a4:	b085      	sub	sp, #20
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
 80041aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	4313      	orrs	r3, r2
 80041c0:	f043 0307 	orr.w	r3, r3, #7
 80041c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	609a      	str	r2, [r3, #8]
}
 80041cc:	bf00      	nop
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
 80041e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	021a      	lsls	r2, r3, #8
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	431a      	orrs	r2, r3
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	4313      	orrs	r3, r2
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	4313      	orrs	r3, r2
 8004204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	609a      	str	r2, [r3, #8]
}
 800420c:	bf00      	nop
 800420e:	371c      	adds	r7, #28
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004228:	2b01      	cmp	r3, #1
 800422a:	d101      	bne.n	8004230 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800422c:	2302      	movs	r3, #2
 800422e:	e054      	b.n	80042da <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2202      	movs	r2, #2
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a24      	ldr	r2, [pc, #144]	; (80042e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d108      	bne.n	800426c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004260:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	4313      	orrs	r3, r2
 800426a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004272:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	4313      	orrs	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a17      	ldr	r2, [pc, #92]	; (80042e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d00e      	beq.n	80042ae <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004298:	d009      	beq.n	80042ae <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a13      	ldr	r2, [pc, #76]	; (80042ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d004      	beq.n	80042ae <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a11      	ldr	r2, [pc, #68]	; (80042f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d10c      	bne.n	80042c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	4313      	orrs	r3, r2
 80042be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3714      	adds	r7, #20
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	40012c00 	.word	0x40012c00
 80042ec:	40000400 	.word	0x40000400
 80042f0:	40014000 	.word	0x40014000

080042f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e040      	b.n	8004388 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800430a:	2b00      	cmp	r3, #0
 800430c:	d106      	bne.n	800431c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7fc fd8a 	bl	8000e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2224      	movs	r2, #36	; 0x24
 8004320:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f022 0201 	bic.w	r2, r2, #1
 8004330:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 f8c0 	bl	80044b8 <UART_SetConfig>
 8004338:	4603      	mov	r3, r0
 800433a:	2b01      	cmp	r3, #1
 800433c:	d101      	bne.n	8004342 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e022      	b.n	8004388 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004346:	2b00      	cmp	r3, #0
 8004348:	d002      	beq.n	8004350 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f9ea 	bl	8004724 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685a      	ldr	r2, [r3, #4]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800435e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689a      	ldr	r2, [r3, #8]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800436e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f042 0201 	orr.w	r2, r2, #1
 800437e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 fa71 	bl	8004868 <UART_CheckIdleState>
 8004386:	4603      	mov	r3, r0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3708      	adds	r7, #8
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b08a      	sub	sp, #40	; 0x28
 8004394:	af02      	add	r7, sp, #8
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	603b      	str	r3, [r7, #0]
 800439c:	4613      	mov	r3, r2
 800439e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043a4:	2b20      	cmp	r3, #32
 80043a6:	f040 8082 	bne.w	80044ae <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d002      	beq.n	80043b6 <HAL_UART_Transmit+0x26>
 80043b0:	88fb      	ldrh	r3, [r7, #6]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e07a      	b.n	80044b0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d101      	bne.n	80043c8 <HAL_UART_Transmit+0x38>
 80043c4:	2302      	movs	r3, #2
 80043c6:	e073      	b.n	80044b0 <HAL_UART_Transmit+0x120>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2221      	movs	r2, #33	; 0x21
 80043dc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043de:	f7fc fe61 	bl	80010a4 <HAL_GetTick>
 80043e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	88fa      	ldrh	r2, [r7, #6]
 80043e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	88fa      	ldrh	r2, [r7, #6]
 80043f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043fc:	d108      	bne.n	8004410 <HAL_UART_Transmit+0x80>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d104      	bne.n	8004410 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004406:	2300      	movs	r3, #0
 8004408:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	61bb      	str	r3, [r7, #24]
 800440e:	e003      	b.n	8004418 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004414:	2300      	movs	r3, #0
 8004416:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004420:	e02d      	b.n	800447e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	2200      	movs	r2, #0
 800442a:	2180      	movs	r1, #128	; 0x80
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f000 fa64 	bl	80048fa <UART_WaitOnFlagUntilTimeout>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e039      	b.n	80044b0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10b      	bne.n	800445a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	881a      	ldrh	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800444e:	b292      	uxth	r2, r2
 8004450:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	3302      	adds	r3, #2
 8004456:	61bb      	str	r3, [r7, #24]
 8004458:	e008      	b.n	800446c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	781a      	ldrb	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	b292      	uxth	r2, r2
 8004464:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	3301      	adds	r3, #1
 800446a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004472:	b29b      	uxth	r3, r3
 8004474:	3b01      	subs	r3, #1
 8004476:	b29a      	uxth	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004484:	b29b      	uxth	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1cb      	bne.n	8004422 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	2200      	movs	r2, #0
 8004492:	2140      	movs	r1, #64	; 0x40
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f000 fa30 	bl	80048fa <UART_WaitOnFlagUntilTimeout>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e005      	b.n	80044b0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2220      	movs	r2, #32
 80044a8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	e000      	b.n	80044b0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80044ae:	2302      	movs	r3, #2
  }
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3720      	adds	r7, #32
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b088      	sub	sp, #32
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044c0:	2300      	movs	r3, #0
 80044c2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689a      	ldr	r2, [r3, #8]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	431a      	orrs	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	431a      	orrs	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	69db      	ldr	r3, [r3, #28]
 80044d8:	4313      	orrs	r3, r2
 80044da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	4b8a      	ldr	r3, [pc, #552]	; (800470c <UART_SetConfig+0x254>)
 80044e4:	4013      	ands	r3, r2
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	6812      	ldr	r2, [r2, #0]
 80044ea:	6979      	ldr	r1, [r7, #20]
 80044ec:	430b      	orrs	r3, r1
 80044ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68da      	ldr	r2, [r3, #12]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	4313      	orrs	r3, r2
 8004514:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	430a      	orrs	r2, r1
 8004528:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a78      	ldr	r2, [pc, #480]	; (8004710 <UART_SetConfig+0x258>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d120      	bne.n	8004576 <UART_SetConfig+0xbe>
 8004534:	4b77      	ldr	r3, [pc, #476]	; (8004714 <UART_SetConfig+0x25c>)
 8004536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004538:	f003 0303 	and.w	r3, r3, #3
 800453c:	2b03      	cmp	r3, #3
 800453e:	d817      	bhi.n	8004570 <UART_SetConfig+0xb8>
 8004540:	a201      	add	r2, pc, #4	; (adr r2, 8004548 <UART_SetConfig+0x90>)
 8004542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004546:	bf00      	nop
 8004548:	08004559 	.word	0x08004559
 800454c:	08004565 	.word	0x08004565
 8004550:	0800456b 	.word	0x0800456b
 8004554:	0800455f 	.word	0x0800455f
 8004558:	2300      	movs	r3, #0
 800455a:	77fb      	strb	r3, [r7, #31]
 800455c:	e01d      	b.n	800459a <UART_SetConfig+0xe2>
 800455e:	2302      	movs	r3, #2
 8004560:	77fb      	strb	r3, [r7, #31]
 8004562:	e01a      	b.n	800459a <UART_SetConfig+0xe2>
 8004564:	2304      	movs	r3, #4
 8004566:	77fb      	strb	r3, [r7, #31]
 8004568:	e017      	b.n	800459a <UART_SetConfig+0xe2>
 800456a:	2308      	movs	r3, #8
 800456c:	77fb      	strb	r3, [r7, #31]
 800456e:	e014      	b.n	800459a <UART_SetConfig+0xe2>
 8004570:	2310      	movs	r3, #16
 8004572:	77fb      	strb	r3, [r7, #31]
 8004574:	e011      	b.n	800459a <UART_SetConfig+0xe2>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a67      	ldr	r2, [pc, #412]	; (8004718 <UART_SetConfig+0x260>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d102      	bne.n	8004586 <UART_SetConfig+0xce>
 8004580:	2300      	movs	r3, #0
 8004582:	77fb      	strb	r3, [r7, #31]
 8004584:	e009      	b.n	800459a <UART_SetConfig+0xe2>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a64      	ldr	r2, [pc, #400]	; (800471c <UART_SetConfig+0x264>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d102      	bne.n	8004596 <UART_SetConfig+0xde>
 8004590:	2300      	movs	r3, #0
 8004592:	77fb      	strb	r3, [r7, #31]
 8004594:	e001      	b.n	800459a <UART_SetConfig+0xe2>
 8004596:	2310      	movs	r3, #16
 8004598:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045a2:	d15b      	bne.n	800465c <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 80045a4:	7ffb      	ldrb	r3, [r7, #31]
 80045a6:	2b08      	cmp	r3, #8
 80045a8:	d827      	bhi.n	80045fa <UART_SetConfig+0x142>
 80045aa:	a201      	add	r2, pc, #4	; (adr r2, 80045b0 <UART_SetConfig+0xf8>)
 80045ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b0:	080045d5 	.word	0x080045d5
 80045b4:	080045dd 	.word	0x080045dd
 80045b8:	080045e5 	.word	0x080045e5
 80045bc:	080045fb 	.word	0x080045fb
 80045c0:	080045eb 	.word	0x080045eb
 80045c4:	080045fb 	.word	0x080045fb
 80045c8:	080045fb 	.word	0x080045fb
 80045cc:	080045fb 	.word	0x080045fb
 80045d0:	080045f3 	.word	0x080045f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045d4:	f7fe fe68 	bl	80032a8 <HAL_RCC_GetPCLK1Freq>
 80045d8:	61b8      	str	r0, [r7, #24]
        break;
 80045da:	e013      	b.n	8004604 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045dc:	f7fe fe86 	bl	80032ec <HAL_RCC_GetPCLK2Freq>
 80045e0:	61b8      	str	r0, [r7, #24]
        break;
 80045e2:	e00f      	b.n	8004604 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045e4:	4b4e      	ldr	r3, [pc, #312]	; (8004720 <UART_SetConfig+0x268>)
 80045e6:	61bb      	str	r3, [r7, #24]
        break;
 80045e8:	e00c      	b.n	8004604 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045ea:	f7fe fde7 	bl	80031bc <HAL_RCC_GetSysClockFreq>
 80045ee:	61b8      	str	r0, [r7, #24]
        break;
 80045f0:	e008      	b.n	8004604 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045f6:	61bb      	str	r3, [r7, #24]
        break;
 80045f8:	e004      	b.n	8004604 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80045fa:	2300      	movs	r3, #0
 80045fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	77bb      	strb	r3, [r7, #30]
        break;
 8004602:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d074      	beq.n	80046f4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	005a      	lsls	r2, r3, #1
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	085b      	lsrs	r3, r3, #1
 8004614:	441a      	add	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	fbb2 f3f3 	udiv	r3, r2, r3
 800461e:	b29b      	uxth	r3, r3
 8004620:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	2b0f      	cmp	r3, #15
 8004626:	d916      	bls.n	8004656 <UART_SetConfig+0x19e>
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800462e:	d212      	bcs.n	8004656 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	b29b      	uxth	r3, r3
 8004634:	f023 030f 	bic.w	r3, r3, #15
 8004638:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	085b      	lsrs	r3, r3, #1
 800463e:	b29b      	uxth	r3, r3
 8004640:	f003 0307 	and.w	r3, r3, #7
 8004644:	b29a      	uxth	r2, r3
 8004646:	89fb      	ldrh	r3, [r7, #14]
 8004648:	4313      	orrs	r3, r2
 800464a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	89fa      	ldrh	r2, [r7, #14]
 8004652:	60da      	str	r2, [r3, #12]
 8004654:	e04e      	b.n	80046f4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	77bb      	strb	r3, [r7, #30]
 800465a:	e04b      	b.n	80046f4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800465c:	7ffb      	ldrb	r3, [r7, #31]
 800465e:	2b08      	cmp	r3, #8
 8004660:	d827      	bhi.n	80046b2 <UART_SetConfig+0x1fa>
 8004662:	a201      	add	r2, pc, #4	; (adr r2, 8004668 <UART_SetConfig+0x1b0>)
 8004664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004668:	0800468d 	.word	0x0800468d
 800466c:	08004695 	.word	0x08004695
 8004670:	0800469d 	.word	0x0800469d
 8004674:	080046b3 	.word	0x080046b3
 8004678:	080046a3 	.word	0x080046a3
 800467c:	080046b3 	.word	0x080046b3
 8004680:	080046b3 	.word	0x080046b3
 8004684:	080046b3 	.word	0x080046b3
 8004688:	080046ab 	.word	0x080046ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800468c:	f7fe fe0c 	bl	80032a8 <HAL_RCC_GetPCLK1Freq>
 8004690:	61b8      	str	r0, [r7, #24]
        break;
 8004692:	e013      	b.n	80046bc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004694:	f7fe fe2a 	bl	80032ec <HAL_RCC_GetPCLK2Freq>
 8004698:	61b8      	str	r0, [r7, #24]
        break;
 800469a:	e00f      	b.n	80046bc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800469c:	4b20      	ldr	r3, [pc, #128]	; (8004720 <UART_SetConfig+0x268>)
 800469e:	61bb      	str	r3, [r7, #24]
        break;
 80046a0:	e00c      	b.n	80046bc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046a2:	f7fe fd8b 	bl	80031bc <HAL_RCC_GetSysClockFreq>
 80046a6:	61b8      	str	r0, [r7, #24]
        break;
 80046a8:	e008      	b.n	80046bc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046ae:	61bb      	str	r3, [r7, #24]
        break;
 80046b0:	e004      	b.n	80046bc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80046b2:	2300      	movs	r3, #0
 80046b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	77bb      	strb	r3, [r7, #30]
        break;
 80046ba:	bf00      	nop
    }

    if (pclk != 0U)
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d018      	beq.n	80046f4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	085a      	lsrs	r2, r3, #1
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	441a      	add	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	2b0f      	cmp	r3, #15
 80046dc:	d908      	bls.n	80046f0 <UART_SetConfig+0x238>
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046e4:	d204      	bcs.n	80046f0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	60da      	str	r2, [r3, #12]
 80046ee:	e001      	b.n	80046f4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004700:	7fbb      	ldrb	r3, [r7, #30]
}
 8004702:	4618      	mov	r0, r3
 8004704:	3720      	adds	r7, #32
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	efff69f3 	.word	0xefff69f3
 8004710:	40013800 	.word	0x40013800
 8004714:	40021000 	.word	0x40021000
 8004718:	40004400 	.word	0x40004400
 800471c:	40004800 	.word	0x40004800
 8004720:	007a1200 	.word	0x007a1200

08004724 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00a      	beq.n	800474e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	430a      	orrs	r2, r1
 800474c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00a      	beq.n	8004770 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	430a      	orrs	r2, r1
 800476e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	f003 0304 	and.w	r3, r3, #4
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00a      	beq.n	8004792 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	430a      	orrs	r2, r1
 8004790:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004796:	f003 0308 	and.w	r3, r3, #8
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00a      	beq.n	80047b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	430a      	orrs	r2, r1
 80047b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b8:	f003 0310 	and.w	r3, r3, #16
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00a      	beq.n	80047d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047da:	f003 0320 	and.w	r3, r3, #32
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00a      	beq.n	80047f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	430a      	orrs	r2, r1
 80047f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004800:	2b00      	cmp	r3, #0
 8004802:	d01a      	beq.n	800483a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004822:	d10a      	bne.n	800483a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	430a      	orrs	r2, r1
 8004838:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00a      	beq.n	800485c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	430a      	orrs	r2, r1
 800485a:	605a      	str	r2, [r3, #4]
  }
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af02      	add	r7, sp, #8
 800486e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004878:	f7fc fc14 	bl	80010a4 <HAL_GetTick>
 800487c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0308 	and.w	r3, r3, #8
 8004888:	2b08      	cmp	r3, #8
 800488a:	d10e      	bne.n	80048aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800488c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004890:	9300      	str	r3, [sp, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 f82d 	bl	80048fa <UART_WaitOnFlagUntilTimeout>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d001      	beq.n	80048aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e023      	b.n	80048f2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0304 	and.w	r3, r3, #4
 80048b4:	2b04      	cmp	r3, #4
 80048b6:	d10e      	bne.n	80048d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048bc:	9300      	str	r3, [sp, #0]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f817 	bl	80048fa <UART_WaitOnFlagUntilTimeout>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e00d      	b.n	80048f2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2220      	movs	r2, #32
 80048da:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2220      	movs	r2, #32
 80048e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b09c      	sub	sp, #112	; 0x70
 80048fe:	af00      	add	r7, sp, #0
 8004900:	60f8      	str	r0, [r7, #12]
 8004902:	60b9      	str	r1, [r7, #8]
 8004904:	603b      	str	r3, [r7, #0]
 8004906:	4613      	mov	r3, r2
 8004908:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800490a:	e0a5      	b.n	8004a58 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800490c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800490e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004912:	f000 80a1 	beq.w	8004a58 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004916:	f7fc fbc5 	bl	80010a4 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004922:	429a      	cmp	r2, r3
 8004924:	d302      	bcc.n	800492c <UART_WaitOnFlagUntilTimeout+0x32>
 8004926:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004928:	2b00      	cmp	r3, #0
 800492a:	d13e      	bne.n	80049aa <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004934:	e853 3f00 	ldrex	r3, [r3]
 8004938:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800493a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800493c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004940:	667b      	str	r3, [r7, #100]	; 0x64
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	461a      	mov	r2, r3
 8004948:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800494a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800494c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004950:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004952:	e841 2300 	strex	r3, r2, [r1]
 8004956:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004958:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1e6      	bne.n	800492c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	3308      	adds	r3, #8
 8004964:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004968:	e853 3f00 	ldrex	r3, [r3]
 800496c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800496e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004970:	f023 0301 	bic.w	r3, r3, #1
 8004974:	663b      	str	r3, [r7, #96]	; 0x60
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	3308      	adds	r3, #8
 800497c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800497e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004980:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004982:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004984:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004986:	e841 2300 	strex	r3, r2, [r1]
 800498a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800498c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1e5      	bne.n	800495e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2220      	movs	r2, #32
 8004996:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2220      	movs	r2, #32
 800499c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e067      	b.n	8004a7a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0304 	and.w	r3, r3, #4
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d04f      	beq.n	8004a58 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049c6:	d147      	bne.n	8004a58 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049d0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049da:	e853 3f00 	ldrex	r3, [r3]
 80049de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	461a      	mov	r2, r3
 80049ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049f0:	637b      	str	r3, [r7, #52]	; 0x34
 80049f2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049f8:	e841 2300 	strex	r3, r2, [r1]
 80049fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80049fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d1e6      	bne.n	80049d2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	3308      	adds	r3, #8
 8004a0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	e853 3f00 	ldrex	r3, [r3]
 8004a12:	613b      	str	r3, [r7, #16]
   return(result);
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	f023 0301 	bic.w	r3, r3, #1
 8004a1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	3308      	adds	r3, #8
 8004a22:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004a24:	623a      	str	r2, [r7, #32]
 8004a26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a28:	69f9      	ldr	r1, [r7, #28]
 8004a2a:	6a3a      	ldr	r2, [r7, #32]
 8004a2c:	e841 2300 	strex	r3, r2, [r1]
 8004a30:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1e5      	bne.n	8004a04 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2220      	movs	r2, #32
 8004a42:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2220      	movs	r2, #32
 8004a48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e010      	b.n	8004a7a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	69da      	ldr	r2, [r3, #28]
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	4013      	ands	r3, r2
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	bf0c      	ite	eq
 8004a68:	2301      	moveq	r3, #1
 8004a6a:	2300      	movne	r3, #0
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	461a      	mov	r2, r3
 8004a70:	79fb      	ldrb	r3, [r7, #7]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	f43f af4a 	beq.w	800490c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3770      	adds	r7, #112	; 0x70
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
	...

08004a84 <__errno>:
 8004a84:	4b01      	ldr	r3, [pc, #4]	; (8004a8c <__errno+0x8>)
 8004a86:	6818      	ldr	r0, [r3, #0]
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	2000000c 	.word	0x2000000c

08004a90 <__libc_init_array>:
 8004a90:	b570      	push	{r4, r5, r6, lr}
 8004a92:	4d0d      	ldr	r5, [pc, #52]	; (8004ac8 <__libc_init_array+0x38>)
 8004a94:	4c0d      	ldr	r4, [pc, #52]	; (8004acc <__libc_init_array+0x3c>)
 8004a96:	1b64      	subs	r4, r4, r5
 8004a98:	10a4      	asrs	r4, r4, #2
 8004a9a:	2600      	movs	r6, #0
 8004a9c:	42a6      	cmp	r6, r4
 8004a9e:	d109      	bne.n	8004ab4 <__libc_init_array+0x24>
 8004aa0:	4d0b      	ldr	r5, [pc, #44]	; (8004ad0 <__libc_init_array+0x40>)
 8004aa2:	4c0c      	ldr	r4, [pc, #48]	; (8004ad4 <__libc_init_array+0x44>)
 8004aa4:	f000 fc4e 	bl	8005344 <_init>
 8004aa8:	1b64      	subs	r4, r4, r5
 8004aaa:	10a4      	asrs	r4, r4, #2
 8004aac:	2600      	movs	r6, #0
 8004aae:	42a6      	cmp	r6, r4
 8004ab0:	d105      	bne.n	8004abe <__libc_init_array+0x2e>
 8004ab2:	bd70      	pop	{r4, r5, r6, pc}
 8004ab4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ab8:	4798      	blx	r3
 8004aba:	3601      	adds	r6, #1
 8004abc:	e7ee      	b.n	8004a9c <__libc_init_array+0xc>
 8004abe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ac2:	4798      	blx	r3
 8004ac4:	3601      	adds	r6, #1
 8004ac6:	e7f2      	b.n	8004aae <__libc_init_array+0x1e>
 8004ac8:	080053d8 	.word	0x080053d8
 8004acc:	080053d8 	.word	0x080053d8
 8004ad0:	080053d8 	.word	0x080053d8
 8004ad4:	080053dc 	.word	0x080053dc

08004ad8 <memset>:
 8004ad8:	4402      	add	r2, r0
 8004ada:	4603      	mov	r3, r0
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d100      	bne.n	8004ae2 <memset+0xa>
 8004ae0:	4770      	bx	lr
 8004ae2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ae6:	e7f9      	b.n	8004adc <memset+0x4>

08004ae8 <siprintf>:
 8004ae8:	b40e      	push	{r1, r2, r3}
 8004aea:	b500      	push	{lr}
 8004aec:	b09c      	sub	sp, #112	; 0x70
 8004aee:	ab1d      	add	r3, sp, #116	; 0x74
 8004af0:	9002      	str	r0, [sp, #8]
 8004af2:	9006      	str	r0, [sp, #24]
 8004af4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004af8:	4809      	ldr	r0, [pc, #36]	; (8004b20 <siprintf+0x38>)
 8004afa:	9107      	str	r1, [sp, #28]
 8004afc:	9104      	str	r1, [sp, #16]
 8004afe:	4909      	ldr	r1, [pc, #36]	; (8004b24 <siprintf+0x3c>)
 8004b00:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b04:	9105      	str	r1, [sp, #20]
 8004b06:	6800      	ldr	r0, [r0, #0]
 8004b08:	9301      	str	r3, [sp, #4]
 8004b0a:	a902      	add	r1, sp, #8
 8004b0c:	f000 f868 	bl	8004be0 <_svfiprintf_r>
 8004b10:	9b02      	ldr	r3, [sp, #8]
 8004b12:	2200      	movs	r2, #0
 8004b14:	701a      	strb	r2, [r3, #0]
 8004b16:	b01c      	add	sp, #112	; 0x70
 8004b18:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b1c:	b003      	add	sp, #12
 8004b1e:	4770      	bx	lr
 8004b20:	2000000c 	.word	0x2000000c
 8004b24:	ffff0208 	.word	0xffff0208

08004b28 <__ssputs_r>:
 8004b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b2c:	688e      	ldr	r6, [r1, #8]
 8004b2e:	429e      	cmp	r6, r3
 8004b30:	4682      	mov	sl, r0
 8004b32:	460c      	mov	r4, r1
 8004b34:	4690      	mov	r8, r2
 8004b36:	461f      	mov	r7, r3
 8004b38:	d838      	bhi.n	8004bac <__ssputs_r+0x84>
 8004b3a:	898a      	ldrh	r2, [r1, #12]
 8004b3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004b40:	d032      	beq.n	8004ba8 <__ssputs_r+0x80>
 8004b42:	6825      	ldr	r5, [r4, #0]
 8004b44:	6909      	ldr	r1, [r1, #16]
 8004b46:	eba5 0901 	sub.w	r9, r5, r1
 8004b4a:	6965      	ldr	r5, [r4, #20]
 8004b4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b54:	3301      	adds	r3, #1
 8004b56:	444b      	add	r3, r9
 8004b58:	106d      	asrs	r5, r5, #1
 8004b5a:	429d      	cmp	r5, r3
 8004b5c:	bf38      	it	cc
 8004b5e:	461d      	movcc	r5, r3
 8004b60:	0553      	lsls	r3, r2, #21
 8004b62:	d531      	bpl.n	8004bc8 <__ssputs_r+0xa0>
 8004b64:	4629      	mov	r1, r5
 8004b66:	f000 fb47 	bl	80051f8 <_malloc_r>
 8004b6a:	4606      	mov	r6, r0
 8004b6c:	b950      	cbnz	r0, 8004b84 <__ssputs_r+0x5c>
 8004b6e:	230c      	movs	r3, #12
 8004b70:	f8ca 3000 	str.w	r3, [sl]
 8004b74:	89a3      	ldrh	r3, [r4, #12]
 8004b76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b7a:	81a3      	strh	r3, [r4, #12]
 8004b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b84:	6921      	ldr	r1, [r4, #16]
 8004b86:	464a      	mov	r2, r9
 8004b88:	f000 fabe 	bl	8005108 <memcpy>
 8004b8c:	89a3      	ldrh	r3, [r4, #12]
 8004b8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b96:	81a3      	strh	r3, [r4, #12]
 8004b98:	6126      	str	r6, [r4, #16]
 8004b9a:	6165      	str	r5, [r4, #20]
 8004b9c:	444e      	add	r6, r9
 8004b9e:	eba5 0509 	sub.w	r5, r5, r9
 8004ba2:	6026      	str	r6, [r4, #0]
 8004ba4:	60a5      	str	r5, [r4, #8]
 8004ba6:	463e      	mov	r6, r7
 8004ba8:	42be      	cmp	r6, r7
 8004baa:	d900      	bls.n	8004bae <__ssputs_r+0x86>
 8004bac:	463e      	mov	r6, r7
 8004bae:	4632      	mov	r2, r6
 8004bb0:	6820      	ldr	r0, [r4, #0]
 8004bb2:	4641      	mov	r1, r8
 8004bb4:	f000 fab6 	bl	8005124 <memmove>
 8004bb8:	68a3      	ldr	r3, [r4, #8]
 8004bba:	6822      	ldr	r2, [r4, #0]
 8004bbc:	1b9b      	subs	r3, r3, r6
 8004bbe:	4432      	add	r2, r6
 8004bc0:	60a3      	str	r3, [r4, #8]
 8004bc2:	6022      	str	r2, [r4, #0]
 8004bc4:	2000      	movs	r0, #0
 8004bc6:	e7db      	b.n	8004b80 <__ssputs_r+0x58>
 8004bc8:	462a      	mov	r2, r5
 8004bca:	f000 fb6f 	bl	80052ac <_realloc_r>
 8004bce:	4606      	mov	r6, r0
 8004bd0:	2800      	cmp	r0, #0
 8004bd2:	d1e1      	bne.n	8004b98 <__ssputs_r+0x70>
 8004bd4:	6921      	ldr	r1, [r4, #16]
 8004bd6:	4650      	mov	r0, sl
 8004bd8:	f000 fabe 	bl	8005158 <_free_r>
 8004bdc:	e7c7      	b.n	8004b6e <__ssputs_r+0x46>
	...

08004be0 <_svfiprintf_r>:
 8004be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004be4:	4698      	mov	r8, r3
 8004be6:	898b      	ldrh	r3, [r1, #12]
 8004be8:	061b      	lsls	r3, r3, #24
 8004bea:	b09d      	sub	sp, #116	; 0x74
 8004bec:	4607      	mov	r7, r0
 8004bee:	460d      	mov	r5, r1
 8004bf0:	4614      	mov	r4, r2
 8004bf2:	d50e      	bpl.n	8004c12 <_svfiprintf_r+0x32>
 8004bf4:	690b      	ldr	r3, [r1, #16]
 8004bf6:	b963      	cbnz	r3, 8004c12 <_svfiprintf_r+0x32>
 8004bf8:	2140      	movs	r1, #64	; 0x40
 8004bfa:	f000 fafd 	bl	80051f8 <_malloc_r>
 8004bfe:	6028      	str	r0, [r5, #0]
 8004c00:	6128      	str	r0, [r5, #16]
 8004c02:	b920      	cbnz	r0, 8004c0e <_svfiprintf_r+0x2e>
 8004c04:	230c      	movs	r3, #12
 8004c06:	603b      	str	r3, [r7, #0]
 8004c08:	f04f 30ff 	mov.w	r0, #4294967295
 8004c0c:	e0d1      	b.n	8004db2 <_svfiprintf_r+0x1d2>
 8004c0e:	2340      	movs	r3, #64	; 0x40
 8004c10:	616b      	str	r3, [r5, #20]
 8004c12:	2300      	movs	r3, #0
 8004c14:	9309      	str	r3, [sp, #36]	; 0x24
 8004c16:	2320      	movs	r3, #32
 8004c18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c20:	2330      	movs	r3, #48	; 0x30
 8004c22:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004dcc <_svfiprintf_r+0x1ec>
 8004c26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c2a:	f04f 0901 	mov.w	r9, #1
 8004c2e:	4623      	mov	r3, r4
 8004c30:	469a      	mov	sl, r3
 8004c32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c36:	b10a      	cbz	r2, 8004c3c <_svfiprintf_r+0x5c>
 8004c38:	2a25      	cmp	r2, #37	; 0x25
 8004c3a:	d1f9      	bne.n	8004c30 <_svfiprintf_r+0x50>
 8004c3c:	ebba 0b04 	subs.w	fp, sl, r4
 8004c40:	d00b      	beq.n	8004c5a <_svfiprintf_r+0x7a>
 8004c42:	465b      	mov	r3, fp
 8004c44:	4622      	mov	r2, r4
 8004c46:	4629      	mov	r1, r5
 8004c48:	4638      	mov	r0, r7
 8004c4a:	f7ff ff6d 	bl	8004b28 <__ssputs_r>
 8004c4e:	3001      	adds	r0, #1
 8004c50:	f000 80aa 	beq.w	8004da8 <_svfiprintf_r+0x1c8>
 8004c54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c56:	445a      	add	r2, fp
 8004c58:	9209      	str	r2, [sp, #36]	; 0x24
 8004c5a:	f89a 3000 	ldrb.w	r3, [sl]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f000 80a2 	beq.w	8004da8 <_svfiprintf_r+0x1c8>
 8004c64:	2300      	movs	r3, #0
 8004c66:	f04f 32ff 	mov.w	r2, #4294967295
 8004c6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c6e:	f10a 0a01 	add.w	sl, sl, #1
 8004c72:	9304      	str	r3, [sp, #16]
 8004c74:	9307      	str	r3, [sp, #28]
 8004c76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c7a:	931a      	str	r3, [sp, #104]	; 0x68
 8004c7c:	4654      	mov	r4, sl
 8004c7e:	2205      	movs	r2, #5
 8004c80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c84:	4851      	ldr	r0, [pc, #324]	; (8004dcc <_svfiprintf_r+0x1ec>)
 8004c86:	f7fb faa3 	bl	80001d0 <memchr>
 8004c8a:	9a04      	ldr	r2, [sp, #16]
 8004c8c:	b9d8      	cbnz	r0, 8004cc6 <_svfiprintf_r+0xe6>
 8004c8e:	06d0      	lsls	r0, r2, #27
 8004c90:	bf44      	itt	mi
 8004c92:	2320      	movmi	r3, #32
 8004c94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c98:	0711      	lsls	r1, r2, #28
 8004c9a:	bf44      	itt	mi
 8004c9c:	232b      	movmi	r3, #43	; 0x2b
 8004c9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ca2:	f89a 3000 	ldrb.w	r3, [sl]
 8004ca6:	2b2a      	cmp	r3, #42	; 0x2a
 8004ca8:	d015      	beq.n	8004cd6 <_svfiprintf_r+0xf6>
 8004caa:	9a07      	ldr	r2, [sp, #28]
 8004cac:	4654      	mov	r4, sl
 8004cae:	2000      	movs	r0, #0
 8004cb0:	f04f 0c0a 	mov.w	ip, #10
 8004cb4:	4621      	mov	r1, r4
 8004cb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cba:	3b30      	subs	r3, #48	; 0x30
 8004cbc:	2b09      	cmp	r3, #9
 8004cbe:	d94e      	bls.n	8004d5e <_svfiprintf_r+0x17e>
 8004cc0:	b1b0      	cbz	r0, 8004cf0 <_svfiprintf_r+0x110>
 8004cc2:	9207      	str	r2, [sp, #28]
 8004cc4:	e014      	b.n	8004cf0 <_svfiprintf_r+0x110>
 8004cc6:	eba0 0308 	sub.w	r3, r0, r8
 8004cca:	fa09 f303 	lsl.w	r3, r9, r3
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	9304      	str	r3, [sp, #16]
 8004cd2:	46a2      	mov	sl, r4
 8004cd4:	e7d2      	b.n	8004c7c <_svfiprintf_r+0x9c>
 8004cd6:	9b03      	ldr	r3, [sp, #12]
 8004cd8:	1d19      	adds	r1, r3, #4
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	9103      	str	r1, [sp, #12]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	bfbb      	ittet	lt
 8004ce2:	425b      	neglt	r3, r3
 8004ce4:	f042 0202 	orrlt.w	r2, r2, #2
 8004ce8:	9307      	strge	r3, [sp, #28]
 8004cea:	9307      	strlt	r3, [sp, #28]
 8004cec:	bfb8      	it	lt
 8004cee:	9204      	strlt	r2, [sp, #16]
 8004cf0:	7823      	ldrb	r3, [r4, #0]
 8004cf2:	2b2e      	cmp	r3, #46	; 0x2e
 8004cf4:	d10c      	bne.n	8004d10 <_svfiprintf_r+0x130>
 8004cf6:	7863      	ldrb	r3, [r4, #1]
 8004cf8:	2b2a      	cmp	r3, #42	; 0x2a
 8004cfa:	d135      	bne.n	8004d68 <_svfiprintf_r+0x188>
 8004cfc:	9b03      	ldr	r3, [sp, #12]
 8004cfe:	1d1a      	adds	r2, r3, #4
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	9203      	str	r2, [sp, #12]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	bfb8      	it	lt
 8004d08:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d0c:	3402      	adds	r4, #2
 8004d0e:	9305      	str	r3, [sp, #20]
 8004d10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004ddc <_svfiprintf_r+0x1fc>
 8004d14:	7821      	ldrb	r1, [r4, #0]
 8004d16:	2203      	movs	r2, #3
 8004d18:	4650      	mov	r0, sl
 8004d1a:	f7fb fa59 	bl	80001d0 <memchr>
 8004d1e:	b140      	cbz	r0, 8004d32 <_svfiprintf_r+0x152>
 8004d20:	2340      	movs	r3, #64	; 0x40
 8004d22:	eba0 000a 	sub.w	r0, r0, sl
 8004d26:	fa03 f000 	lsl.w	r0, r3, r0
 8004d2a:	9b04      	ldr	r3, [sp, #16]
 8004d2c:	4303      	orrs	r3, r0
 8004d2e:	3401      	adds	r4, #1
 8004d30:	9304      	str	r3, [sp, #16]
 8004d32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d36:	4826      	ldr	r0, [pc, #152]	; (8004dd0 <_svfiprintf_r+0x1f0>)
 8004d38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d3c:	2206      	movs	r2, #6
 8004d3e:	f7fb fa47 	bl	80001d0 <memchr>
 8004d42:	2800      	cmp	r0, #0
 8004d44:	d038      	beq.n	8004db8 <_svfiprintf_r+0x1d8>
 8004d46:	4b23      	ldr	r3, [pc, #140]	; (8004dd4 <_svfiprintf_r+0x1f4>)
 8004d48:	bb1b      	cbnz	r3, 8004d92 <_svfiprintf_r+0x1b2>
 8004d4a:	9b03      	ldr	r3, [sp, #12]
 8004d4c:	3307      	adds	r3, #7
 8004d4e:	f023 0307 	bic.w	r3, r3, #7
 8004d52:	3308      	adds	r3, #8
 8004d54:	9303      	str	r3, [sp, #12]
 8004d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d58:	4433      	add	r3, r6
 8004d5a:	9309      	str	r3, [sp, #36]	; 0x24
 8004d5c:	e767      	b.n	8004c2e <_svfiprintf_r+0x4e>
 8004d5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d62:	460c      	mov	r4, r1
 8004d64:	2001      	movs	r0, #1
 8004d66:	e7a5      	b.n	8004cb4 <_svfiprintf_r+0xd4>
 8004d68:	2300      	movs	r3, #0
 8004d6a:	3401      	adds	r4, #1
 8004d6c:	9305      	str	r3, [sp, #20]
 8004d6e:	4619      	mov	r1, r3
 8004d70:	f04f 0c0a 	mov.w	ip, #10
 8004d74:	4620      	mov	r0, r4
 8004d76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d7a:	3a30      	subs	r2, #48	; 0x30
 8004d7c:	2a09      	cmp	r2, #9
 8004d7e:	d903      	bls.n	8004d88 <_svfiprintf_r+0x1a8>
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0c5      	beq.n	8004d10 <_svfiprintf_r+0x130>
 8004d84:	9105      	str	r1, [sp, #20]
 8004d86:	e7c3      	b.n	8004d10 <_svfiprintf_r+0x130>
 8004d88:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d8c:	4604      	mov	r4, r0
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e7f0      	b.n	8004d74 <_svfiprintf_r+0x194>
 8004d92:	ab03      	add	r3, sp, #12
 8004d94:	9300      	str	r3, [sp, #0]
 8004d96:	462a      	mov	r2, r5
 8004d98:	4b0f      	ldr	r3, [pc, #60]	; (8004dd8 <_svfiprintf_r+0x1f8>)
 8004d9a:	a904      	add	r1, sp, #16
 8004d9c:	4638      	mov	r0, r7
 8004d9e:	f3af 8000 	nop.w
 8004da2:	1c42      	adds	r2, r0, #1
 8004da4:	4606      	mov	r6, r0
 8004da6:	d1d6      	bne.n	8004d56 <_svfiprintf_r+0x176>
 8004da8:	89ab      	ldrh	r3, [r5, #12]
 8004daa:	065b      	lsls	r3, r3, #25
 8004dac:	f53f af2c 	bmi.w	8004c08 <_svfiprintf_r+0x28>
 8004db0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004db2:	b01d      	add	sp, #116	; 0x74
 8004db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004db8:	ab03      	add	r3, sp, #12
 8004dba:	9300      	str	r3, [sp, #0]
 8004dbc:	462a      	mov	r2, r5
 8004dbe:	4b06      	ldr	r3, [pc, #24]	; (8004dd8 <_svfiprintf_r+0x1f8>)
 8004dc0:	a904      	add	r1, sp, #16
 8004dc2:	4638      	mov	r0, r7
 8004dc4:	f000 f87a 	bl	8004ebc <_printf_i>
 8004dc8:	e7eb      	b.n	8004da2 <_svfiprintf_r+0x1c2>
 8004dca:	bf00      	nop
 8004dcc:	080053a4 	.word	0x080053a4
 8004dd0:	080053ae 	.word	0x080053ae
 8004dd4:	00000000 	.word	0x00000000
 8004dd8:	08004b29 	.word	0x08004b29
 8004ddc:	080053aa 	.word	0x080053aa

08004de0 <_printf_common>:
 8004de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004de4:	4616      	mov	r6, r2
 8004de6:	4699      	mov	r9, r3
 8004de8:	688a      	ldr	r2, [r1, #8]
 8004dea:	690b      	ldr	r3, [r1, #16]
 8004dec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004df0:	4293      	cmp	r3, r2
 8004df2:	bfb8      	it	lt
 8004df4:	4613      	movlt	r3, r2
 8004df6:	6033      	str	r3, [r6, #0]
 8004df8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004dfc:	4607      	mov	r7, r0
 8004dfe:	460c      	mov	r4, r1
 8004e00:	b10a      	cbz	r2, 8004e06 <_printf_common+0x26>
 8004e02:	3301      	adds	r3, #1
 8004e04:	6033      	str	r3, [r6, #0]
 8004e06:	6823      	ldr	r3, [r4, #0]
 8004e08:	0699      	lsls	r1, r3, #26
 8004e0a:	bf42      	ittt	mi
 8004e0c:	6833      	ldrmi	r3, [r6, #0]
 8004e0e:	3302      	addmi	r3, #2
 8004e10:	6033      	strmi	r3, [r6, #0]
 8004e12:	6825      	ldr	r5, [r4, #0]
 8004e14:	f015 0506 	ands.w	r5, r5, #6
 8004e18:	d106      	bne.n	8004e28 <_printf_common+0x48>
 8004e1a:	f104 0a19 	add.w	sl, r4, #25
 8004e1e:	68e3      	ldr	r3, [r4, #12]
 8004e20:	6832      	ldr	r2, [r6, #0]
 8004e22:	1a9b      	subs	r3, r3, r2
 8004e24:	42ab      	cmp	r3, r5
 8004e26:	dc26      	bgt.n	8004e76 <_printf_common+0x96>
 8004e28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e2c:	1e13      	subs	r3, r2, #0
 8004e2e:	6822      	ldr	r2, [r4, #0]
 8004e30:	bf18      	it	ne
 8004e32:	2301      	movne	r3, #1
 8004e34:	0692      	lsls	r2, r2, #26
 8004e36:	d42b      	bmi.n	8004e90 <_printf_common+0xb0>
 8004e38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e3c:	4649      	mov	r1, r9
 8004e3e:	4638      	mov	r0, r7
 8004e40:	47c0      	blx	r8
 8004e42:	3001      	adds	r0, #1
 8004e44:	d01e      	beq.n	8004e84 <_printf_common+0xa4>
 8004e46:	6823      	ldr	r3, [r4, #0]
 8004e48:	68e5      	ldr	r5, [r4, #12]
 8004e4a:	6832      	ldr	r2, [r6, #0]
 8004e4c:	f003 0306 	and.w	r3, r3, #6
 8004e50:	2b04      	cmp	r3, #4
 8004e52:	bf08      	it	eq
 8004e54:	1aad      	subeq	r5, r5, r2
 8004e56:	68a3      	ldr	r3, [r4, #8]
 8004e58:	6922      	ldr	r2, [r4, #16]
 8004e5a:	bf0c      	ite	eq
 8004e5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e60:	2500      	movne	r5, #0
 8004e62:	4293      	cmp	r3, r2
 8004e64:	bfc4      	itt	gt
 8004e66:	1a9b      	subgt	r3, r3, r2
 8004e68:	18ed      	addgt	r5, r5, r3
 8004e6a:	2600      	movs	r6, #0
 8004e6c:	341a      	adds	r4, #26
 8004e6e:	42b5      	cmp	r5, r6
 8004e70:	d11a      	bne.n	8004ea8 <_printf_common+0xc8>
 8004e72:	2000      	movs	r0, #0
 8004e74:	e008      	b.n	8004e88 <_printf_common+0xa8>
 8004e76:	2301      	movs	r3, #1
 8004e78:	4652      	mov	r2, sl
 8004e7a:	4649      	mov	r1, r9
 8004e7c:	4638      	mov	r0, r7
 8004e7e:	47c0      	blx	r8
 8004e80:	3001      	adds	r0, #1
 8004e82:	d103      	bne.n	8004e8c <_printf_common+0xac>
 8004e84:	f04f 30ff 	mov.w	r0, #4294967295
 8004e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e8c:	3501      	adds	r5, #1
 8004e8e:	e7c6      	b.n	8004e1e <_printf_common+0x3e>
 8004e90:	18e1      	adds	r1, r4, r3
 8004e92:	1c5a      	adds	r2, r3, #1
 8004e94:	2030      	movs	r0, #48	; 0x30
 8004e96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e9a:	4422      	add	r2, r4
 8004e9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ea0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ea4:	3302      	adds	r3, #2
 8004ea6:	e7c7      	b.n	8004e38 <_printf_common+0x58>
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	4622      	mov	r2, r4
 8004eac:	4649      	mov	r1, r9
 8004eae:	4638      	mov	r0, r7
 8004eb0:	47c0      	blx	r8
 8004eb2:	3001      	adds	r0, #1
 8004eb4:	d0e6      	beq.n	8004e84 <_printf_common+0xa4>
 8004eb6:	3601      	adds	r6, #1
 8004eb8:	e7d9      	b.n	8004e6e <_printf_common+0x8e>
	...

08004ebc <_printf_i>:
 8004ebc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ec0:	460c      	mov	r4, r1
 8004ec2:	4691      	mov	r9, r2
 8004ec4:	7e27      	ldrb	r7, [r4, #24]
 8004ec6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004ec8:	2f78      	cmp	r7, #120	; 0x78
 8004eca:	4680      	mov	r8, r0
 8004ecc:	469a      	mov	sl, r3
 8004ece:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ed2:	d807      	bhi.n	8004ee4 <_printf_i+0x28>
 8004ed4:	2f62      	cmp	r7, #98	; 0x62
 8004ed6:	d80a      	bhi.n	8004eee <_printf_i+0x32>
 8004ed8:	2f00      	cmp	r7, #0
 8004eda:	f000 80d8 	beq.w	800508e <_printf_i+0x1d2>
 8004ede:	2f58      	cmp	r7, #88	; 0x58
 8004ee0:	f000 80a3 	beq.w	800502a <_printf_i+0x16e>
 8004ee4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ee8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004eec:	e03a      	b.n	8004f64 <_printf_i+0xa8>
 8004eee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ef2:	2b15      	cmp	r3, #21
 8004ef4:	d8f6      	bhi.n	8004ee4 <_printf_i+0x28>
 8004ef6:	a001      	add	r0, pc, #4	; (adr r0, 8004efc <_printf_i+0x40>)
 8004ef8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004efc:	08004f55 	.word	0x08004f55
 8004f00:	08004f69 	.word	0x08004f69
 8004f04:	08004ee5 	.word	0x08004ee5
 8004f08:	08004ee5 	.word	0x08004ee5
 8004f0c:	08004ee5 	.word	0x08004ee5
 8004f10:	08004ee5 	.word	0x08004ee5
 8004f14:	08004f69 	.word	0x08004f69
 8004f18:	08004ee5 	.word	0x08004ee5
 8004f1c:	08004ee5 	.word	0x08004ee5
 8004f20:	08004ee5 	.word	0x08004ee5
 8004f24:	08004ee5 	.word	0x08004ee5
 8004f28:	08005075 	.word	0x08005075
 8004f2c:	08004f99 	.word	0x08004f99
 8004f30:	08005057 	.word	0x08005057
 8004f34:	08004ee5 	.word	0x08004ee5
 8004f38:	08004ee5 	.word	0x08004ee5
 8004f3c:	08005097 	.word	0x08005097
 8004f40:	08004ee5 	.word	0x08004ee5
 8004f44:	08004f99 	.word	0x08004f99
 8004f48:	08004ee5 	.word	0x08004ee5
 8004f4c:	08004ee5 	.word	0x08004ee5
 8004f50:	0800505f 	.word	0x0800505f
 8004f54:	680b      	ldr	r3, [r1, #0]
 8004f56:	1d1a      	adds	r2, r3, #4
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	600a      	str	r2, [r1, #0]
 8004f5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004f60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f64:	2301      	movs	r3, #1
 8004f66:	e0a3      	b.n	80050b0 <_printf_i+0x1f4>
 8004f68:	6825      	ldr	r5, [r4, #0]
 8004f6a:	6808      	ldr	r0, [r1, #0]
 8004f6c:	062e      	lsls	r6, r5, #24
 8004f6e:	f100 0304 	add.w	r3, r0, #4
 8004f72:	d50a      	bpl.n	8004f8a <_printf_i+0xce>
 8004f74:	6805      	ldr	r5, [r0, #0]
 8004f76:	600b      	str	r3, [r1, #0]
 8004f78:	2d00      	cmp	r5, #0
 8004f7a:	da03      	bge.n	8004f84 <_printf_i+0xc8>
 8004f7c:	232d      	movs	r3, #45	; 0x2d
 8004f7e:	426d      	negs	r5, r5
 8004f80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f84:	485e      	ldr	r0, [pc, #376]	; (8005100 <_printf_i+0x244>)
 8004f86:	230a      	movs	r3, #10
 8004f88:	e019      	b.n	8004fbe <_printf_i+0x102>
 8004f8a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004f8e:	6805      	ldr	r5, [r0, #0]
 8004f90:	600b      	str	r3, [r1, #0]
 8004f92:	bf18      	it	ne
 8004f94:	b22d      	sxthne	r5, r5
 8004f96:	e7ef      	b.n	8004f78 <_printf_i+0xbc>
 8004f98:	680b      	ldr	r3, [r1, #0]
 8004f9a:	6825      	ldr	r5, [r4, #0]
 8004f9c:	1d18      	adds	r0, r3, #4
 8004f9e:	6008      	str	r0, [r1, #0]
 8004fa0:	0628      	lsls	r0, r5, #24
 8004fa2:	d501      	bpl.n	8004fa8 <_printf_i+0xec>
 8004fa4:	681d      	ldr	r5, [r3, #0]
 8004fa6:	e002      	b.n	8004fae <_printf_i+0xf2>
 8004fa8:	0669      	lsls	r1, r5, #25
 8004faa:	d5fb      	bpl.n	8004fa4 <_printf_i+0xe8>
 8004fac:	881d      	ldrh	r5, [r3, #0]
 8004fae:	4854      	ldr	r0, [pc, #336]	; (8005100 <_printf_i+0x244>)
 8004fb0:	2f6f      	cmp	r7, #111	; 0x6f
 8004fb2:	bf0c      	ite	eq
 8004fb4:	2308      	moveq	r3, #8
 8004fb6:	230a      	movne	r3, #10
 8004fb8:	2100      	movs	r1, #0
 8004fba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004fbe:	6866      	ldr	r6, [r4, #4]
 8004fc0:	60a6      	str	r6, [r4, #8]
 8004fc2:	2e00      	cmp	r6, #0
 8004fc4:	bfa2      	ittt	ge
 8004fc6:	6821      	ldrge	r1, [r4, #0]
 8004fc8:	f021 0104 	bicge.w	r1, r1, #4
 8004fcc:	6021      	strge	r1, [r4, #0]
 8004fce:	b90d      	cbnz	r5, 8004fd4 <_printf_i+0x118>
 8004fd0:	2e00      	cmp	r6, #0
 8004fd2:	d04d      	beq.n	8005070 <_printf_i+0x1b4>
 8004fd4:	4616      	mov	r6, r2
 8004fd6:	fbb5 f1f3 	udiv	r1, r5, r3
 8004fda:	fb03 5711 	mls	r7, r3, r1, r5
 8004fde:	5dc7      	ldrb	r7, [r0, r7]
 8004fe0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004fe4:	462f      	mov	r7, r5
 8004fe6:	42bb      	cmp	r3, r7
 8004fe8:	460d      	mov	r5, r1
 8004fea:	d9f4      	bls.n	8004fd6 <_printf_i+0x11a>
 8004fec:	2b08      	cmp	r3, #8
 8004fee:	d10b      	bne.n	8005008 <_printf_i+0x14c>
 8004ff0:	6823      	ldr	r3, [r4, #0]
 8004ff2:	07df      	lsls	r7, r3, #31
 8004ff4:	d508      	bpl.n	8005008 <_printf_i+0x14c>
 8004ff6:	6923      	ldr	r3, [r4, #16]
 8004ff8:	6861      	ldr	r1, [r4, #4]
 8004ffa:	4299      	cmp	r1, r3
 8004ffc:	bfde      	ittt	le
 8004ffe:	2330      	movle	r3, #48	; 0x30
 8005000:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005004:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005008:	1b92      	subs	r2, r2, r6
 800500a:	6122      	str	r2, [r4, #16]
 800500c:	f8cd a000 	str.w	sl, [sp]
 8005010:	464b      	mov	r3, r9
 8005012:	aa03      	add	r2, sp, #12
 8005014:	4621      	mov	r1, r4
 8005016:	4640      	mov	r0, r8
 8005018:	f7ff fee2 	bl	8004de0 <_printf_common>
 800501c:	3001      	adds	r0, #1
 800501e:	d14c      	bne.n	80050ba <_printf_i+0x1fe>
 8005020:	f04f 30ff 	mov.w	r0, #4294967295
 8005024:	b004      	add	sp, #16
 8005026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800502a:	4835      	ldr	r0, [pc, #212]	; (8005100 <_printf_i+0x244>)
 800502c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005030:	6823      	ldr	r3, [r4, #0]
 8005032:	680e      	ldr	r6, [r1, #0]
 8005034:	061f      	lsls	r7, r3, #24
 8005036:	f856 5b04 	ldr.w	r5, [r6], #4
 800503a:	600e      	str	r6, [r1, #0]
 800503c:	d514      	bpl.n	8005068 <_printf_i+0x1ac>
 800503e:	07d9      	lsls	r1, r3, #31
 8005040:	bf44      	itt	mi
 8005042:	f043 0320 	orrmi.w	r3, r3, #32
 8005046:	6023      	strmi	r3, [r4, #0]
 8005048:	b91d      	cbnz	r5, 8005052 <_printf_i+0x196>
 800504a:	6823      	ldr	r3, [r4, #0]
 800504c:	f023 0320 	bic.w	r3, r3, #32
 8005050:	6023      	str	r3, [r4, #0]
 8005052:	2310      	movs	r3, #16
 8005054:	e7b0      	b.n	8004fb8 <_printf_i+0xfc>
 8005056:	6823      	ldr	r3, [r4, #0]
 8005058:	f043 0320 	orr.w	r3, r3, #32
 800505c:	6023      	str	r3, [r4, #0]
 800505e:	2378      	movs	r3, #120	; 0x78
 8005060:	4828      	ldr	r0, [pc, #160]	; (8005104 <_printf_i+0x248>)
 8005062:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005066:	e7e3      	b.n	8005030 <_printf_i+0x174>
 8005068:	065e      	lsls	r6, r3, #25
 800506a:	bf48      	it	mi
 800506c:	b2ad      	uxthmi	r5, r5
 800506e:	e7e6      	b.n	800503e <_printf_i+0x182>
 8005070:	4616      	mov	r6, r2
 8005072:	e7bb      	b.n	8004fec <_printf_i+0x130>
 8005074:	680b      	ldr	r3, [r1, #0]
 8005076:	6826      	ldr	r6, [r4, #0]
 8005078:	6960      	ldr	r0, [r4, #20]
 800507a:	1d1d      	adds	r5, r3, #4
 800507c:	600d      	str	r5, [r1, #0]
 800507e:	0635      	lsls	r5, r6, #24
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	d501      	bpl.n	8005088 <_printf_i+0x1cc>
 8005084:	6018      	str	r0, [r3, #0]
 8005086:	e002      	b.n	800508e <_printf_i+0x1d2>
 8005088:	0671      	lsls	r1, r6, #25
 800508a:	d5fb      	bpl.n	8005084 <_printf_i+0x1c8>
 800508c:	8018      	strh	r0, [r3, #0]
 800508e:	2300      	movs	r3, #0
 8005090:	6123      	str	r3, [r4, #16]
 8005092:	4616      	mov	r6, r2
 8005094:	e7ba      	b.n	800500c <_printf_i+0x150>
 8005096:	680b      	ldr	r3, [r1, #0]
 8005098:	1d1a      	adds	r2, r3, #4
 800509a:	600a      	str	r2, [r1, #0]
 800509c:	681e      	ldr	r6, [r3, #0]
 800509e:	6862      	ldr	r2, [r4, #4]
 80050a0:	2100      	movs	r1, #0
 80050a2:	4630      	mov	r0, r6
 80050a4:	f7fb f894 	bl	80001d0 <memchr>
 80050a8:	b108      	cbz	r0, 80050ae <_printf_i+0x1f2>
 80050aa:	1b80      	subs	r0, r0, r6
 80050ac:	6060      	str	r0, [r4, #4]
 80050ae:	6863      	ldr	r3, [r4, #4]
 80050b0:	6123      	str	r3, [r4, #16]
 80050b2:	2300      	movs	r3, #0
 80050b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050b8:	e7a8      	b.n	800500c <_printf_i+0x150>
 80050ba:	6923      	ldr	r3, [r4, #16]
 80050bc:	4632      	mov	r2, r6
 80050be:	4649      	mov	r1, r9
 80050c0:	4640      	mov	r0, r8
 80050c2:	47d0      	blx	sl
 80050c4:	3001      	adds	r0, #1
 80050c6:	d0ab      	beq.n	8005020 <_printf_i+0x164>
 80050c8:	6823      	ldr	r3, [r4, #0]
 80050ca:	079b      	lsls	r3, r3, #30
 80050cc:	d413      	bmi.n	80050f6 <_printf_i+0x23a>
 80050ce:	68e0      	ldr	r0, [r4, #12]
 80050d0:	9b03      	ldr	r3, [sp, #12]
 80050d2:	4298      	cmp	r0, r3
 80050d4:	bfb8      	it	lt
 80050d6:	4618      	movlt	r0, r3
 80050d8:	e7a4      	b.n	8005024 <_printf_i+0x168>
 80050da:	2301      	movs	r3, #1
 80050dc:	4632      	mov	r2, r6
 80050de:	4649      	mov	r1, r9
 80050e0:	4640      	mov	r0, r8
 80050e2:	47d0      	blx	sl
 80050e4:	3001      	adds	r0, #1
 80050e6:	d09b      	beq.n	8005020 <_printf_i+0x164>
 80050e8:	3501      	adds	r5, #1
 80050ea:	68e3      	ldr	r3, [r4, #12]
 80050ec:	9903      	ldr	r1, [sp, #12]
 80050ee:	1a5b      	subs	r3, r3, r1
 80050f0:	42ab      	cmp	r3, r5
 80050f2:	dcf2      	bgt.n	80050da <_printf_i+0x21e>
 80050f4:	e7eb      	b.n	80050ce <_printf_i+0x212>
 80050f6:	2500      	movs	r5, #0
 80050f8:	f104 0619 	add.w	r6, r4, #25
 80050fc:	e7f5      	b.n	80050ea <_printf_i+0x22e>
 80050fe:	bf00      	nop
 8005100:	080053b5 	.word	0x080053b5
 8005104:	080053c6 	.word	0x080053c6

08005108 <memcpy>:
 8005108:	440a      	add	r2, r1
 800510a:	4291      	cmp	r1, r2
 800510c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005110:	d100      	bne.n	8005114 <memcpy+0xc>
 8005112:	4770      	bx	lr
 8005114:	b510      	push	{r4, lr}
 8005116:	f811 4b01 	ldrb.w	r4, [r1], #1
 800511a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800511e:	4291      	cmp	r1, r2
 8005120:	d1f9      	bne.n	8005116 <memcpy+0xe>
 8005122:	bd10      	pop	{r4, pc}

08005124 <memmove>:
 8005124:	4288      	cmp	r0, r1
 8005126:	b510      	push	{r4, lr}
 8005128:	eb01 0402 	add.w	r4, r1, r2
 800512c:	d902      	bls.n	8005134 <memmove+0x10>
 800512e:	4284      	cmp	r4, r0
 8005130:	4623      	mov	r3, r4
 8005132:	d807      	bhi.n	8005144 <memmove+0x20>
 8005134:	1e43      	subs	r3, r0, #1
 8005136:	42a1      	cmp	r1, r4
 8005138:	d008      	beq.n	800514c <memmove+0x28>
 800513a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800513e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005142:	e7f8      	b.n	8005136 <memmove+0x12>
 8005144:	4402      	add	r2, r0
 8005146:	4601      	mov	r1, r0
 8005148:	428a      	cmp	r2, r1
 800514a:	d100      	bne.n	800514e <memmove+0x2a>
 800514c:	bd10      	pop	{r4, pc}
 800514e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005152:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005156:	e7f7      	b.n	8005148 <memmove+0x24>

08005158 <_free_r>:
 8005158:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800515a:	2900      	cmp	r1, #0
 800515c:	d048      	beq.n	80051f0 <_free_r+0x98>
 800515e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005162:	9001      	str	r0, [sp, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	f1a1 0404 	sub.w	r4, r1, #4
 800516a:	bfb8      	it	lt
 800516c:	18e4      	addlt	r4, r4, r3
 800516e:	f000 f8d3 	bl	8005318 <__malloc_lock>
 8005172:	4a20      	ldr	r2, [pc, #128]	; (80051f4 <_free_r+0x9c>)
 8005174:	9801      	ldr	r0, [sp, #4]
 8005176:	6813      	ldr	r3, [r2, #0]
 8005178:	4615      	mov	r5, r2
 800517a:	b933      	cbnz	r3, 800518a <_free_r+0x32>
 800517c:	6063      	str	r3, [r4, #4]
 800517e:	6014      	str	r4, [r2, #0]
 8005180:	b003      	add	sp, #12
 8005182:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005186:	f000 b8cd 	b.w	8005324 <__malloc_unlock>
 800518a:	42a3      	cmp	r3, r4
 800518c:	d90b      	bls.n	80051a6 <_free_r+0x4e>
 800518e:	6821      	ldr	r1, [r4, #0]
 8005190:	1862      	adds	r2, r4, r1
 8005192:	4293      	cmp	r3, r2
 8005194:	bf04      	itt	eq
 8005196:	681a      	ldreq	r2, [r3, #0]
 8005198:	685b      	ldreq	r3, [r3, #4]
 800519a:	6063      	str	r3, [r4, #4]
 800519c:	bf04      	itt	eq
 800519e:	1852      	addeq	r2, r2, r1
 80051a0:	6022      	streq	r2, [r4, #0]
 80051a2:	602c      	str	r4, [r5, #0]
 80051a4:	e7ec      	b.n	8005180 <_free_r+0x28>
 80051a6:	461a      	mov	r2, r3
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	b10b      	cbz	r3, 80051b0 <_free_r+0x58>
 80051ac:	42a3      	cmp	r3, r4
 80051ae:	d9fa      	bls.n	80051a6 <_free_r+0x4e>
 80051b0:	6811      	ldr	r1, [r2, #0]
 80051b2:	1855      	adds	r5, r2, r1
 80051b4:	42a5      	cmp	r5, r4
 80051b6:	d10b      	bne.n	80051d0 <_free_r+0x78>
 80051b8:	6824      	ldr	r4, [r4, #0]
 80051ba:	4421      	add	r1, r4
 80051bc:	1854      	adds	r4, r2, r1
 80051be:	42a3      	cmp	r3, r4
 80051c0:	6011      	str	r1, [r2, #0]
 80051c2:	d1dd      	bne.n	8005180 <_free_r+0x28>
 80051c4:	681c      	ldr	r4, [r3, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	6053      	str	r3, [r2, #4]
 80051ca:	4421      	add	r1, r4
 80051cc:	6011      	str	r1, [r2, #0]
 80051ce:	e7d7      	b.n	8005180 <_free_r+0x28>
 80051d0:	d902      	bls.n	80051d8 <_free_r+0x80>
 80051d2:	230c      	movs	r3, #12
 80051d4:	6003      	str	r3, [r0, #0]
 80051d6:	e7d3      	b.n	8005180 <_free_r+0x28>
 80051d8:	6825      	ldr	r5, [r4, #0]
 80051da:	1961      	adds	r1, r4, r5
 80051dc:	428b      	cmp	r3, r1
 80051de:	bf04      	itt	eq
 80051e0:	6819      	ldreq	r1, [r3, #0]
 80051e2:	685b      	ldreq	r3, [r3, #4]
 80051e4:	6063      	str	r3, [r4, #4]
 80051e6:	bf04      	itt	eq
 80051e8:	1949      	addeq	r1, r1, r5
 80051ea:	6021      	streq	r1, [r4, #0]
 80051ec:	6054      	str	r4, [r2, #4]
 80051ee:	e7c7      	b.n	8005180 <_free_r+0x28>
 80051f0:	b003      	add	sp, #12
 80051f2:	bd30      	pop	{r4, r5, pc}
 80051f4:	200000a0 	.word	0x200000a0

080051f8 <_malloc_r>:
 80051f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051fa:	1ccd      	adds	r5, r1, #3
 80051fc:	f025 0503 	bic.w	r5, r5, #3
 8005200:	3508      	adds	r5, #8
 8005202:	2d0c      	cmp	r5, #12
 8005204:	bf38      	it	cc
 8005206:	250c      	movcc	r5, #12
 8005208:	2d00      	cmp	r5, #0
 800520a:	4606      	mov	r6, r0
 800520c:	db01      	blt.n	8005212 <_malloc_r+0x1a>
 800520e:	42a9      	cmp	r1, r5
 8005210:	d903      	bls.n	800521a <_malloc_r+0x22>
 8005212:	230c      	movs	r3, #12
 8005214:	6033      	str	r3, [r6, #0]
 8005216:	2000      	movs	r0, #0
 8005218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800521a:	f000 f87d 	bl	8005318 <__malloc_lock>
 800521e:	4921      	ldr	r1, [pc, #132]	; (80052a4 <_malloc_r+0xac>)
 8005220:	680a      	ldr	r2, [r1, #0]
 8005222:	4614      	mov	r4, r2
 8005224:	b99c      	cbnz	r4, 800524e <_malloc_r+0x56>
 8005226:	4f20      	ldr	r7, [pc, #128]	; (80052a8 <_malloc_r+0xb0>)
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	b923      	cbnz	r3, 8005236 <_malloc_r+0x3e>
 800522c:	4621      	mov	r1, r4
 800522e:	4630      	mov	r0, r6
 8005230:	f000 f862 	bl	80052f8 <_sbrk_r>
 8005234:	6038      	str	r0, [r7, #0]
 8005236:	4629      	mov	r1, r5
 8005238:	4630      	mov	r0, r6
 800523a:	f000 f85d 	bl	80052f8 <_sbrk_r>
 800523e:	1c43      	adds	r3, r0, #1
 8005240:	d123      	bne.n	800528a <_malloc_r+0x92>
 8005242:	230c      	movs	r3, #12
 8005244:	6033      	str	r3, [r6, #0]
 8005246:	4630      	mov	r0, r6
 8005248:	f000 f86c 	bl	8005324 <__malloc_unlock>
 800524c:	e7e3      	b.n	8005216 <_malloc_r+0x1e>
 800524e:	6823      	ldr	r3, [r4, #0]
 8005250:	1b5b      	subs	r3, r3, r5
 8005252:	d417      	bmi.n	8005284 <_malloc_r+0x8c>
 8005254:	2b0b      	cmp	r3, #11
 8005256:	d903      	bls.n	8005260 <_malloc_r+0x68>
 8005258:	6023      	str	r3, [r4, #0]
 800525a:	441c      	add	r4, r3
 800525c:	6025      	str	r5, [r4, #0]
 800525e:	e004      	b.n	800526a <_malloc_r+0x72>
 8005260:	6863      	ldr	r3, [r4, #4]
 8005262:	42a2      	cmp	r2, r4
 8005264:	bf0c      	ite	eq
 8005266:	600b      	streq	r3, [r1, #0]
 8005268:	6053      	strne	r3, [r2, #4]
 800526a:	4630      	mov	r0, r6
 800526c:	f000 f85a 	bl	8005324 <__malloc_unlock>
 8005270:	f104 000b 	add.w	r0, r4, #11
 8005274:	1d23      	adds	r3, r4, #4
 8005276:	f020 0007 	bic.w	r0, r0, #7
 800527a:	1ac2      	subs	r2, r0, r3
 800527c:	d0cc      	beq.n	8005218 <_malloc_r+0x20>
 800527e:	1a1b      	subs	r3, r3, r0
 8005280:	50a3      	str	r3, [r4, r2]
 8005282:	e7c9      	b.n	8005218 <_malloc_r+0x20>
 8005284:	4622      	mov	r2, r4
 8005286:	6864      	ldr	r4, [r4, #4]
 8005288:	e7cc      	b.n	8005224 <_malloc_r+0x2c>
 800528a:	1cc4      	adds	r4, r0, #3
 800528c:	f024 0403 	bic.w	r4, r4, #3
 8005290:	42a0      	cmp	r0, r4
 8005292:	d0e3      	beq.n	800525c <_malloc_r+0x64>
 8005294:	1a21      	subs	r1, r4, r0
 8005296:	4630      	mov	r0, r6
 8005298:	f000 f82e 	bl	80052f8 <_sbrk_r>
 800529c:	3001      	adds	r0, #1
 800529e:	d1dd      	bne.n	800525c <_malloc_r+0x64>
 80052a0:	e7cf      	b.n	8005242 <_malloc_r+0x4a>
 80052a2:	bf00      	nop
 80052a4:	200000a0 	.word	0x200000a0
 80052a8:	200000a4 	.word	0x200000a4

080052ac <_realloc_r>:
 80052ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ae:	4607      	mov	r7, r0
 80052b0:	4614      	mov	r4, r2
 80052b2:	460e      	mov	r6, r1
 80052b4:	b921      	cbnz	r1, 80052c0 <_realloc_r+0x14>
 80052b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80052ba:	4611      	mov	r1, r2
 80052bc:	f7ff bf9c 	b.w	80051f8 <_malloc_r>
 80052c0:	b922      	cbnz	r2, 80052cc <_realloc_r+0x20>
 80052c2:	f7ff ff49 	bl	8005158 <_free_r>
 80052c6:	4625      	mov	r5, r4
 80052c8:	4628      	mov	r0, r5
 80052ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052cc:	f000 f830 	bl	8005330 <_malloc_usable_size_r>
 80052d0:	42a0      	cmp	r0, r4
 80052d2:	d20f      	bcs.n	80052f4 <_realloc_r+0x48>
 80052d4:	4621      	mov	r1, r4
 80052d6:	4638      	mov	r0, r7
 80052d8:	f7ff ff8e 	bl	80051f8 <_malloc_r>
 80052dc:	4605      	mov	r5, r0
 80052de:	2800      	cmp	r0, #0
 80052e0:	d0f2      	beq.n	80052c8 <_realloc_r+0x1c>
 80052e2:	4631      	mov	r1, r6
 80052e4:	4622      	mov	r2, r4
 80052e6:	f7ff ff0f 	bl	8005108 <memcpy>
 80052ea:	4631      	mov	r1, r6
 80052ec:	4638      	mov	r0, r7
 80052ee:	f7ff ff33 	bl	8005158 <_free_r>
 80052f2:	e7e9      	b.n	80052c8 <_realloc_r+0x1c>
 80052f4:	4635      	mov	r5, r6
 80052f6:	e7e7      	b.n	80052c8 <_realloc_r+0x1c>

080052f8 <_sbrk_r>:
 80052f8:	b538      	push	{r3, r4, r5, lr}
 80052fa:	4d06      	ldr	r5, [pc, #24]	; (8005314 <_sbrk_r+0x1c>)
 80052fc:	2300      	movs	r3, #0
 80052fe:	4604      	mov	r4, r0
 8005300:	4608      	mov	r0, r1
 8005302:	602b      	str	r3, [r5, #0]
 8005304:	f7fb fe02 	bl	8000f0c <_sbrk>
 8005308:	1c43      	adds	r3, r0, #1
 800530a:	d102      	bne.n	8005312 <_sbrk_r+0x1a>
 800530c:	682b      	ldr	r3, [r5, #0]
 800530e:	b103      	cbz	r3, 8005312 <_sbrk_r+0x1a>
 8005310:	6023      	str	r3, [r4, #0]
 8005312:	bd38      	pop	{r3, r4, r5, pc}
 8005314:	20000294 	.word	0x20000294

08005318 <__malloc_lock>:
 8005318:	4801      	ldr	r0, [pc, #4]	; (8005320 <__malloc_lock+0x8>)
 800531a:	f000 b811 	b.w	8005340 <__retarget_lock_acquire_recursive>
 800531e:	bf00      	nop
 8005320:	2000029c 	.word	0x2000029c

08005324 <__malloc_unlock>:
 8005324:	4801      	ldr	r0, [pc, #4]	; (800532c <__malloc_unlock+0x8>)
 8005326:	f000 b80c 	b.w	8005342 <__retarget_lock_release_recursive>
 800532a:	bf00      	nop
 800532c:	2000029c 	.word	0x2000029c

08005330 <_malloc_usable_size_r>:
 8005330:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005334:	1f18      	subs	r0, r3, #4
 8005336:	2b00      	cmp	r3, #0
 8005338:	bfbc      	itt	lt
 800533a:	580b      	ldrlt	r3, [r1, r0]
 800533c:	18c0      	addlt	r0, r0, r3
 800533e:	4770      	bx	lr

08005340 <__retarget_lock_acquire_recursive>:
 8005340:	4770      	bx	lr

08005342 <__retarget_lock_release_recursive>:
 8005342:	4770      	bx	lr

08005344 <_init>:
 8005344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005346:	bf00      	nop
 8005348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800534a:	bc08      	pop	{r3}
 800534c:	469e      	mov	lr, r3
 800534e:	4770      	bx	lr

08005350 <_fini>:
 8005350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005352:	bf00      	nop
 8005354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005356:	bc08      	pop	{r3}
 8005358:	469e      	mov	lr, r3
 800535a:	4770      	bx	lr
